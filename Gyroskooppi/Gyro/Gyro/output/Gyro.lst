FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 10    MOV   A,0x10             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
007B: 55 FA 01 MOV   [0xFA],0x1         
007E: 4F       MOV   X,SP               
007F: 5B       MOV   A,X                
0080: 01 03    ADD   A,0x3              
0082: 53 F9    MOV   [0xF9],A           
0084: 55 F8 3A MOV   [0xF8],0x3A        
0087: 50 06    MOV   A,0x6              
0089: 00       SWI                      
008A: 71 10    OR    F,0x10             
008C: 51 F9    MOV   A,[0xF9]           
008E: 60 E8    MOV   REG[0xE8],A        
0090: 51 F8    MOV   A,[0xF8]           
0092: 60 EA    MOV   REG[0xEA],A        
0094: 70 EF    AND   F,0xEF             
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
0096: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0099: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
009C: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
009E: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
00A1: 70 EF    AND   F,0xEF             
00A3: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
00A6: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
00A9: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
00AC: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
00AF: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
00B2: 7C 02 DA LCALL 0x02DA             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
00B5: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
00B7: 55 03 0C MOV   [__r0],0xC         (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
00BA: 3C 03 0C CMP   [__r0],0xC         (0362)     cmp  [__r0],<__bss_end
00BD: A0 05    JZ    0x00C3             (0363)     jz   BssDone
00BF: 3F 03    MVI   [__r0],A           (0364)     mvi  [__r0],A
00C1: 8F F8    JMP   0x00BA             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00C3: 50 02    MOV   A,0x2              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00C5: 57 15    MOV   X,0x15             (0368)     mov  X,<__idata_start
00C7: 55 03 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00CA: 3C 03 00 CMP   [__r0],0x0         (0371)     cmp  [__r0],<__data_end
00CD: A0 0B    JZ    0x00D9             (0372)     jz   C_RTE_Done
00CF: 08       PUSH  A                  (0373)     push A
00D0: 28       ROMX                     (0374)     romx
00D1: 3F 03    MVI   [__r0],A           (0375)     mvi  [__r0],A
00D3: 18       POP   A                  (0376)     pop  A
00D4: 75       INC   X                  (0377)     inc  X
00D5: 09 00    ADC   A,0x0              (0378)     adc  A,0
00D7: 8F F2    JMP   0x00CA             (0379)     jmp  IDataLoop
00D9: 71 10    OR    F,0x10             
00DB: 70 EF    AND   F,0xEF             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
                                        (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00DD: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00E0: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00E2: 62 E0 03 MOV   REG[0xE0],0x3      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00E5: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00E7: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00EA: 7C 0A 9E LCALL _main              (0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00ED: 8F FF    JMP   0x00ED             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
                                        (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
00EF: 50 08    MOV   A,0x8              (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00F1: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0215: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_testi_Bank1
                                        (0019) export LoadConfigTBL_testi_Bank0
                                        (0020) export LoadConfigTBL_testi_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_testi_Bank0:
                                        (0023) ;  Instance name GYRO, User Module I2Cm
                                        (0024) ;  Instance name LCD, User Module LCD
                                        (0025) ;  Instance name OME, User Module LED
                                        (0026) ;  Instance name OMT, User Module LED
                                        (0027) ;  Instance name TRIGG, User Module LED
                                        (0028) ;  Instance name VME, User Module LED
                                        (0029) ;  Instance name VMT, User Module LED
                                        (0030) ;  Global Register values Bank 0
                                        (0031) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0032) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0033) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0034) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0035) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0036) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0037) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0038) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0039) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0040) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0041) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0042) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0043) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0044) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0045) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0046) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0047) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0048) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0049) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0050) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0051) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0052) 	db		ffh
                                        (0053) LoadConfigTBL_testi_Bank1:
                                        (0054) ;  Instance name GYRO, User Module I2Cm
                                        (0055) ;  Instance name LCD, User Module LCD
                                        (0056) ;  Instance name OME, User Module LED
                                        (0057) ;  Instance name OMT, User Module LED
                                        (0058) ;  Instance name TRIGG, User Module LED
                                        (0059) ;  Instance name VME, User Module LED
                                        (0060) ;  Instance name VMT, User Module LED
                                        (0061) ;  Global Register values Bank 1
                                        (0062) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0063) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0064) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0065) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0066) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0067) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0068) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0069) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0070) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0071) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0072) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0073) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0074) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0075) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0076) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0077) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0078) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0079) 	db		ffh
                                        (0080) AREA psoc_config(rom, rel)
                                        (0081) LoadConfigTBL_testi_Ordered:
                                        (0082) ;  Ordered Global Register values
                                        (0083) 	M8C_SetBank0
0217: 62 00 00 MOV   REG[0x0],0x0       (0084) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
021A: 71 10    OR    F,0x10             
                                        (0085) 	M8C_SetBank1
021C: 62 00 C8 MOV   REG[0x0],0xC8      (0086) 	mov	reg[00h], c8h		; Port_0_DriveMode_0 register (PRT0DM0)
021F: 62 01 37 MOV   REG[0x1],0x37      (0087) 	mov	reg[01h], 37h		; Port_0_DriveMode_1 register (PRT0DM1)
0222: 70 EF    AND   F,0xEF             
                                        (0088) 	M8C_SetBank0
0224: 62 03 37 MOV   REG[0x3],0x37      (0089) 	mov	reg[03h], 37h		; Port_0_DriveMode_2 register (PRT0DM2)
0227: 62 02 00 MOV   REG[0x2],0x0       (0090) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
022A: 71 10    OR    F,0x10             
                                        (0091) 	M8C_SetBank1
022C: 62 02 00 MOV   REG[0x2],0x0       (0092) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
022F: 62 03 00 MOV   REG[0x3],0x0       (0093) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0232: 70 EF    AND   F,0xEF             
                                        (0094) 	M8C_SetBank0
0234: 62 01 00 MOV   REG[0x1],0x0       (0095) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0237: 62 04 00 MOV   REG[0x4],0x0       (0096) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
023A: 71 10    OR    F,0x10             
                                        (0097) 	M8C_SetBank1
023C: 62 04 04 MOV   REG[0x4],0x4       (0098) 	mov	reg[04h], 04h		; Port_1_DriveMode_0 register (PRT1DM0)
023F: 62 05 FB MOV   REG[0x5],0xFB      (0099) 	mov	reg[05h], fbh		; Port_1_DriveMode_1 register (PRT1DM1)
0242: 70 EF    AND   F,0xEF             
                                        (0100) 	M8C_SetBank0
0244: 62 07 F8 MOV   REG[0x7],0xF8      (0101) 	mov	reg[07h], f8h		; Port_1_DriveMode_2 register (PRT1DM2)
0247: 62 06 00 MOV   REG[0x6],0x0       (0102) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
024A: 71 10    OR    F,0x10             
                                        (0103) 	M8C_SetBank1
024C: 62 06 00 MOV   REG[0x6],0x0       (0104) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
024F: 62 07 00 MOV   REG[0x7],0x0       (0105) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0252: 70 EF    AND   F,0xEF             
                                        (0106) 	M8C_SetBank0
0254: 62 05 00 MOV   REG[0x5],0x0       (0107) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0257: 62 08 00 MOV   REG[0x8],0x0       (0108) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
025A: 71 10    OR    F,0x10             
                                        (0109) 	M8C_SetBank1
025C: 62 08 7F MOV   REG[0x8],0x7F      (0110) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
025F: 62 09 80 MOV   REG[0x9],0x80      (0111) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0262: 70 EF    AND   F,0xEF             
                                        (0112) 	M8C_SetBank0
0264: 62 0B 80 MOV   REG[0xB],0x80      (0113) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0267: 62 0A 00 MOV   REG[0xA],0x0       (0114) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
026A: 71 10    OR    F,0x10             
                                        (0115) 	M8C_SetBank1
026C: 62 0A 00 MOV   REG[0xA],0x0       (0116) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
026F: 62 0B 00 MOV   REG[0xB],0x0       (0117) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0272: 70 EF    AND   F,0xEF             
                                        (0118) 	M8C_SetBank0
0274: 62 09 00 MOV   REG[0x9],0x0       (0119) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0277: 62 0C 00 MOV   REG[0xC],0x0       (0120) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
027A: 71 10    OR    F,0x10             
                                        (0121) 	M8C_SetBank1
027C: 62 0C 00 MOV   REG[0xC],0x0       (0122) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
027F: 62 0D 00 MOV   REG[0xD],0x0       (0123) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0282: 70 EF    AND   F,0xEF             
                                        (0124) 	M8C_SetBank0
0284: 62 0F 00 MOV   REG[0xF],0x0       (0125) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0287: 62 0E 00 MOV   REG[0xE],0x0       (0126) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
028A: 71 10    OR    F,0x10             
                                        (0127) 	M8C_SetBank1
028C: 62 0E 00 MOV   REG[0xE],0x0       (0128) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
028F: 62 0F 00 MOV   REG[0xF],0x0       (0129) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0292: 70 EF    AND   F,0xEF             
                                        (0130) 	M8C_SetBank0
0294: 62 0D 00 MOV   REG[0xD],0x0       (0131) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0297: 62 10 00 MOV   REG[0x10],0x0      (0132) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
029A: 71 10    OR    F,0x10             
                                        (0133) 	M8C_SetBank1
029C: 62 10 00 MOV   REG[0x10],0x0      (0134) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
029F: 62 11 00 MOV   REG[0x11],0x0      (0135) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02A2: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
02A4: 62 13 00 MOV   REG[0x13],0x0      (0137) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02A7: 62 12 00 MOV   REG[0x12],0x0      (0138) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02AA: 71 10    OR    F,0x10             
                                        (0139) 	M8C_SetBank1
02AC: 62 12 00 MOV   REG[0x12],0x0      (0140) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02AF: 62 13 00 MOV   REG[0x13],0x0      (0141) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02B2: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
02B4: 62 11 00 MOV   REG[0x11],0x0      (0143) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02B7: 62 14 00 MOV   REG[0x14],0x0      (0144) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02BA: 71 10    OR    F,0x10             
                                        (0145) 	M8C_SetBank1
02BC: 62 14 00 MOV   REG[0x14],0x0      (0146) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02BF: 62 15 00 MOV   REG[0x15],0x0      (0147) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02C2: 70 EF    AND   F,0xEF             
                                        (0148) 	M8C_SetBank0
02C4: 62 17 00 MOV   REG[0x17],0x0      (0149) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02C7: 62 16 00 MOV   REG[0x16],0x0      (0150) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02CA: 71 10    OR    F,0x10             
                                        (0151) 	M8C_SetBank1
02CC: 62 16 00 MOV   REG[0x16],0x0      (0152) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02CF: 62 17 00 MOV   REG[0x17],0x0      (0153) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02D2: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
02D4: 62 15 00 MOV   REG[0x15],0x0      (0155) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02D7: 70 EF    AND   F,0xEF             
                                        (0156) 	M8C_SetBank0
02D9: 7F       RET                      (0157) 	ret
                                        (0158) 
                                        (0159) 
                                        (0160) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_testi
                                        (0026) export _LoadConfig_testi
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_1_Data_SHADE
                                        (0030) export _Port_1_Data_SHADE
                                        (0031) export Port_1_DriveMode_0_SHADE
                                        (0032) export _Port_1_DriveMode_0_SHADE
                                        (0033) export Port_1_DriveMode_1_SHADE
                                        (0034) export _Port_1_DriveMode_1_SHADE
                                        (0035) export Port_1_DriveMode_2_SHADE
                                        (0036) export _Port_1_DriveMode_2_SHADE
                                        (0037) export Port_2_Data_SHADE
                                        (0038) export _Port_2_Data_SHADE
                                        (0039) export Port_2_DriveMode_0_SHADE
                                        (0040) export _Port_2_DriveMode_0_SHADE
                                        (0041) export Port_2_DriveMode_1_SHADE
                                        (0042) export _Port_2_DriveMode_1_SHADE
                                        (0043) 
                                        (0044) 
                                        (0045) export NO_SHADOW
                                        (0046) export _NO_SHADOW
                                        (0047) 
                                        (0048) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0049) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0050) 
                                        (0051) AREA psoc_config(rom, rel)
                                        (0052) 
                                        (0053) ;---------------------------------------------------------------------------
                                        (0054) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0055) ;                  parameters handled by boot code, like CPU speed). This
                                        (0056) ;                  function can be called from user code, but typically it
                                        (0057) ;                  is only called from boot.
                                        (0058) ;
                                        (0059) ;       INPUTS: None.
                                        (0060) ;      RETURNS: Nothing.
                                        (0061) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0062) ;               In the large memory model currently only the page
                                        (0063) ;               pointer registers listed below are modified.  This does
                                        (0064) ;               not guarantee that in future implementations of this
                                        (0065) ;               function other page pointer registers will not be
                                        (0066) ;               modified.
                                        (0067) ;          
                                        (0068) ;               Page Pointer Registers Modified: 
                                        (0069) ;               CUR_PP
                                        (0070) ;
                                        (0071) _LoadConfigInit:
                                        (0072)  LoadConfigInit:
                                        (0073)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0074)     
02DA: 55 04 00 MOV   [0x4],0x0          (0075) 	mov		[Port_0_Data_SHADE], 0h
02DD: 55 05 00 MOV   [0x5],0x0          (0076) 	mov		[Port_1_Data_SHADE], 0h
02E0: 55 07 04 MOV   [0x7],0x4          (0077) 	mov		[Port_1_DriveMode_0_SHADE], 4h
02E3: 55 08 FB MOV   [0x8],0xFB         (0078) 	mov		[Port_1_DriveMode_1_SHADE], fbh
02E6: 55 09 F8 MOV   [0x9],0xF8         (0079) 	mov		[Port_1_DriveMode_2_SHADE], f8h
02E9: 55 06 00 MOV   [0x6],0x0          (0080) 	mov		[Port_2_Data_SHADE], 0h
02EC: 55 0A 7F MOV   [0xA],0x7F         (0081) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
02EF: 55 0B 80 MOV   [0xB],0x80         (0082) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0083) 
02F2: 7C 02 F9 LCALL 0x02F9             (0084) 	lcall	LoadConfig_testi
02F5: 7C 02 15 LCALL 0x0215             (0085) 	lcall	LoadConfigTBL_testi_Ordered
                                        (0086) 
                                        (0087) 
                                        (0088)     RAM_EPILOGUE RAM_USE_CLASS_4
02F8: 7F       RET                      (0089)     ret
                                        (0090) 
                                        (0091) ;---------------------------------------------------------------------------
                                        (0092) ; Load Configuration testi
                                        (0093) ;
                                        (0094) ;    Load configuration registers for testi.
                                        (0095) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0096) ;
                                        (0097) ;       INPUTS: None.
                                        (0098) ;      RETURNS: Nothing.
                                        (0099) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0100) ;               modified as may the Page Pointer registers!
                                        (0101) ;               In the large memory model currently only the page
                                        (0102) ;               pointer registers listed below are modified.  This does
                                        (0103) ;               not guarantee that in future implementations of this
                                        (0104) ;               function other page pointer registers will not be
                                        (0105) ;               modified.
                                        (0106) ;          
                                        (0107) ;               Page Pointer Registers Modified: 
                                        (0108) ;               CUR_PP
                                        (0109) ;
                                        (0110) _LoadConfig_testi:
                                        (0111)  LoadConfig_testi:
                                        (0112)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0113) 
02F9: 10       PUSH  X                  (0114) 	push	x
02FA: 70 EF    AND   F,0xEF             
                                        (0115)     M8C_SetBank0                    ; Force bank 0
02FC: 50 00    MOV   A,0x0              (0116)     mov     a, 0                    ; Specify bank 0
02FE: 67       ASR   A                  (0117)     asr     a                       ; Store in carry flag
                                        (0118)                                     ; Load bank 0 table:
02FF: 50 01    MOV   A,0x1              (0119)     mov     A, >LoadConfigTBL_testi_Bank0
0301: 57 C7    MOV   X,0xC7             (0120)     mov     X, <LoadConfigTBL_testi_Bank0
0303: 7C 03 14 LCALL 0x0314             (0121)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0122) 
0306: 50 01    MOV   A,0x1              (0123)     mov     a, 1                    ; Specify bank 1
0308: 67       ASR   A                  (0124)     asr     a                       ; Store in carry flag
                                        (0125)                                     ; Load bank 1 table:
0309: 50 01    MOV   A,0x1              (0126)     mov     A, >LoadConfigTBL_testi_Bank1
030B: 57 F2    MOV   X,0xF2             (0127)     mov     X, <LoadConfigTBL_testi_Bank1
030D: 7C 03 14 LCALL 0x0314             (0128)     lcall   LoadConfig              ; Load the bank 1 values
0310: 70 EF    AND   F,0xEF             
                                        (0129) 
                                        (0130)     M8C_SetBank0                    ; Force return to bank 0
0312: 20       POP   X                  (0131) 	pop		x
                                        (0132) 
                                        (0133)     RAM_EPILOGUE RAM_USE_CLASS_4
0313: 7F       RET                      (0134)     ret
                                        (0135) 
                                        (0136) 
                                        (0137) 
                                        (0138) 
                                        (0139) ;---------------------------------------------------------------------------
                                        (0140) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0141) ;              pairs. Terminate on address=0xFF.
                                        (0142) ;
                                        (0143) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0144) ;           Flag Register Carry bit encodes the Register Bank
                                        (0145) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0146) ;
                                        (0147) ;  RETURNS: nothing.
                                        (0148) ;
                                        (0149) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0150) ;                X-3 Temporary store for register address
                                        (0151) ;                X-2 LSB of config table address
                                        (0152) ;                X-1 MSB of config table address
                                        (0153) ;
                                        (0154) LoadConfig:
                                        (0155)     RAM_PROLOGUE RAM_USE_CLASS_2
0314: 38 02    ADD   SP,0x2             (0156)     add     SP, 2                   ; Set up local vars
0316: 10       PUSH  X                  (0157)     push    X                       ; Save config table address on stack
0317: 08       PUSH  A                  (0158)     push    A
0318: 4F       MOV   X,SP               (0159)     mov     X, SP
0319: 56 FC 00 MOV   [X-4],0x0          (0160)     mov     [X-4], 0                ; Set default Destination to Bank 0
031C: D0 04    JNC   0x0321             (0161)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
031E: 56 FC 01 MOV   [X-4],0x1          (0162)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0163) .BankSelectSaved:
0321: 18       POP   A                  (0164)     pop     A
0322: 20       POP   X                  (0165)     pop     X
0323: 70 EF    AND   F,0xEF             
0325: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0166) 
                                        (0167) LoadConfigLp:
                                        (0168)     M8C_SetBank0                    ; Switch to bank 0
                                        (0169)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0328: 10       PUSH  X                  (0170)     push    X                       ; Preserve the config table address
0329: 08       PUSH  A                  (0171)     push    A
032A: 28       ROMX                     (0172)     romx                            ; Load register address from table
032B: 39 FF    CMP   A,0xFF             (0173)     cmp     A, END_CONFIG_TABLE     ; End of table?
032D: A0 1F    JZ    0x034D             (0174)     jz      EndLoadConfig           ;   Yes, go wrap it up
032F: 4F       MOV   X,SP               (0175)     mov     X, SP                   ;
0330: 48 FC 01 TST   [X-4],0x1          (0176)     tst     [X-4], 1                ; Loading IO Bank 1?
0333: A0 03    JZ    0x0337             (0177)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0335: 71 10    OR    F,0x10             
                                        (0178)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0179) .IOBankNowSet:
0337: 54 FD    MOV   [X-3],A            (0180)     mov     [X-3], A                ; Stash the register address
0339: 18       POP   A                  (0181)     pop     A                       ; Retrieve the table address
033A: 20       POP   X                  (0182)     pop     X
033B: 75       INC   X                  (0183)     inc     X                       ; Advance to the data byte
033C: 09 00    ADC   A,0x0              (0184)     adc     A, 0
033E: 10       PUSH  X                  (0185)     push    X                       ; Save the config table address again
033F: 08       PUSH  A                  (0186)     push    A
0340: 28       ROMX                     (0187)     romx                            ; load config data from the table
0341: 4F       MOV   X,SP               (0188)     mov     X, SP                   ; retrieve the register address
0342: 59 FD    MOV   X,[X-3]            (0189)     mov     X, [X-3]
0344: 61 00    MOV   REG[X+0x0],A       (0190)     mov     reg[X], A               ; Configure the register
0346: 18       POP   A                  (0191)     pop     A                       ; retrieve the table address
0347: 20       POP   X                  (0192)     pop     X
0348: 75       INC   X                  (0193)     inc     X                       ; advance to next table entry
0349: 09 00    ADC   A,0x0              (0194)     adc     A, 0
034B: 8F D7    JMP   0x0323             (0195)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0196) EndLoadConfig:
034D: 38 FC    ADD   SP,0xFC            (0197)     add     SP, -4
                                        (0198)     RAM_EPILOGUE RAM_USE_CLASS_2
034F: 7F       RET                      (0199)     ret
                                        (0200) 
                                        (0201) AREA InterruptRAM(ram, rel)
                                        (0202) 
                                        (0203) NO_SHADOW:
                                        (0204) _NO_SHADOW:
                                        (0205) ; write only register shadows
                                        (0206) _Port_0_Data_SHADE:
                                        (0207) Port_0_Data_SHADE:	BLK	1
                                        (0208) _Port_1_Data_SHADE:
                                        (0209) Port_1_Data_SHADE:	BLK	1
                                        (0210) _Port_2_Data_SHADE:
                                        (0211) Port_2_Data_SHADE:	BLK	1
                                        (0212) _Port_1_DriveMode_0_SHADE:
                                        (0213) Port_1_DriveMode_0_SHADE:	BLK	1
                                        (0214) _Port_1_DriveMode_1_SHADE:
                                        (0215) Port_1_DriveMode_1_SHADE:	BLK	1
                                        (0216) _Port_1_DriveMode_2_SHADE:
                                        (0217) Port_1_DriveMode_2_SHADE:	BLK	1
                                        (0218) _Port_2_DriveMode_0_SHADE:
                                        (0219) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0220) _Port_2_DriveMode_1_SHADE:
                                        (0221) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0222) 
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0350: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0351: 10       PUSH  X                  (0209)     push  X
0352: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0353: B0 04    JNZ   0x0358             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0355: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0356: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0357: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0358: 90 3C    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
035A: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
035B: 18       POP   A                  (0220)     pop   A
035C: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
035D: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
035F: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0360: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0372: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0373: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0374: 67       ASR   A                  (0262)     asr   A
0375: 67       ASR   A                  (0263)     asr   A
0376: 67       ASR   A                  (0264)     asr   A
0377: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0379: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
037B: 90 19    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
037D: 18       POP   A                  (0268)     pop   A                            ; Restore value
037E: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0380: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0382: 90 12    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0384: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0385: 4B       SWAP  A,X                (0305)     swap  A,X
0386: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0388: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0389: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
038B: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
038C: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
038E: A0 06    JZ    0x0395             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0390: 90 04    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0392: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0393: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0395: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0396: 90 5F    CALL  0x03F7             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0398: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0399: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
039A: 67       ASR   A                  (0390)     asr   A
039B: 67       ASR   A                  (0391)     asr   A
039C: 67       ASR   A                  (0392)     asr   A
039D: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
039F: 90 38    CALL  0x03D9             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
03A1: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
03A2: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
03A4: 40       NOP                      (0397)     nop
03A5: 40       NOP                      (0398)     nop
03A6: 40       NOP                      (0399)     nop
03A7: 90 30    CALL  0x03D9             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
03A9: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
03AA: 90 4B    CALL  0x03F7             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
03AC: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
03AD: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
03AE: 67       ASR   A                  (0436)     asr   A
03AF: 67       ASR   A                  (0437)     asr   A
03B0: 67       ASR   A                  (0438)     asr   A
03B1: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
03B3: 90 09    CALL  0x03BE             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
03B5: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
03B6: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
03B8: 40       NOP                      (0443)     nop
03B9: 40       NOP                      (0444)     nop
03BA: 40       NOP                      (0445)     nop
03BB: 90 01    CALL  0x03BE             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
03BD: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
03BE: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
03BF: 26 06 80 AND   [0x6],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
03C2: 51 06    MOV   A,[0x6]            (0480)     mov   A,[Port_2_Data_SHADE]
03C4: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
03C6: 18       POP   A                  (0483)     pop   A
03C7: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
03C9: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
03CB: 2A 06    OR    A,[0x6]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
03CD: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
03CF: 53 06    MOV   [0x6],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
03D1: 40       NOP                      (0489)     nop
03D2: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
03D4: 53 06    MOV   [0x6],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
03D6: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
03D8: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
03D9: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
03DA: 26 06 80 AND   [0x6],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
03DD: 2E 06 20 OR    [0x6],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
03E0: 51 06    MOV   A,[0x6]            (0527)     mov   A,[Port_2_Data_SHADE]
03E2: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
03E4: 18       POP   A                  (0530)     pop   A
03E5: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
03E7: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
03E9: 2A 06    OR    A,[0x6]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
03EB: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
03ED: 53 06    MOV   [0x6],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
03EF: 40       NOP                      (0536)     NOP
03F0: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
03F2: 53 06    MOV   [0x6],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
03F4: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
03F6: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
03F7: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
03F8: 26 06 80 AND   [0x6],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
03FB: 51 06    MOV   A,[0x6]            (0574)     mov   A,[Port_2_Data_SHADE]
03FD: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
03FF: 26 0A F0 AND   [0xA],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0402: 51 0A    MOV   A,[0xA]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0404: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0406: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0408: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
040A: 2E 06 40 OR    [0x6],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
040D: 51 06    MOV   A,[0x6]            (0584)     mov   A,[Port_2_Data_SHADE]
040F: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0411: 40       NOP                      (0586)     NOP
                                        (0587) 
0412: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0413: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0415: 2E 06 50 OR    [0x6],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0418: 51 06    MOV   A,[0x6]            (0593)     mov   A,[Port_2_Data_SHADE]
041A: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
041C: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
041D: 40       NOP                      (0597)     nop
041E: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0420: 08       PUSH  A                  (0610)     push  A
0421: 26 06 C0 AND   [0x6],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0424: 51 06    MOV   A,[0x6]            (0612)     mov   A,[Port_2_Data_SHADE]
0426: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0428: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0429: 40       NOP                      (0616)     nop                                    ; fastest PSoC
042A: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
042B: 2E 06 50 OR    [0x6],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
042E: 51 06    MOV   A,[0x6]            (0620)     mov   A,[Port_2_Data_SHADE]
0430: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0432: 40       NOP                      (0623)     nop
0433: 40       NOP                      (0624)     nop
                                        (0625) 
0434: 26 06 C0 AND   [0x6],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0437: 51 06    MOV   A,[0x6]            (0627)     mov   A,[Port_2_Data_SHADE]
0439: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
043B: 18       POP   A                  (0630)     pop   A
043C: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
043E: A0 04    JZ    0x0443             (0633)     jz    .UNLOCK
0440: 79       DEC   X                  (0634)     dec   X
0441: BF D3    JNZ   0x0415             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0443: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0444: 2E 0A 7F OR    [0xA],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0447: 51 0A    MOV   A,[0xA]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0449: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
044B: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
044D: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
044F: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0450: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0451: 26 0A 80 AND   [0xA],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0454: 2E 0A 7F OR    [0xA],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0457: 26 0B 80 AND   [0xB],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
045A: 51 0A    MOV   A,[0xA]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
045C: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
045E: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0460: 51 0B    MOV   A,[0xB]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0462: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0464: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0466: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0468: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
046A: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
046C: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
046E: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0470: 9F 4C    CALL  0x03BE             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0472: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0474: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0476: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0478: 9F 44    CALL  0x03BE             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
047A: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
047C: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
047E: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0480: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0482: 9F 3A    CALL  0x03BE             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0484: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0486: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0488: 50 02    MOV   A,0x2              (0720)     mov   A,02h
048A: 9F 32    CALL  0x03BE             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
048C: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
048E: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0490: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0492: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
0494: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0496: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0498: 50 01    MOV   A,0x1              (0731)     mov   A,01h
049A: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
049C: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
049E: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
04A0: 50 06    MOV   A,0x6              (0736)     mov   A,06h
04A2: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
04A4: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
04A6: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
04A8: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
04AA: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
04AC: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
04AE: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
04B0: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
04B2: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
04B4: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
04B6: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
04B8: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04BA: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
04BC: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
04C1: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
04C3: 10       PUSH  X                  (0791)     push  X                            ; Store COL
04C4: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
04C6: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
04C7: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
04C9: 20       POP   X                  (0795)     pop   X
                                        (0796) 
04CA: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
04CC: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
04CD: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
04CF: 78       DEC   A                  (0828)     dec   A
04D0: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
04D2: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
04DB: 08       PUSH  A                  (0871)     push  A
04DC: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
04DE: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
04E0: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
04E2: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
04E4: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
04E6: D0 06    JNC   0x04ED             (0877)     jnc   .Delay50u_End
04E8: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
04EA: 78       DEC   A                  (0880)     dec   A                              ; [4]
04EB: BF FE    JNZ   0x04EA             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
04ED: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
04EE: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
04EF: 10       PUSH  X                  (0943)     push  X
04F0: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
04F2: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
04F4: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
04F5: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
04F8: B0 05    JNZ   0x04FE             (0950)     jnz   .LCD_CHECK1X
04FA: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
04FC: 80 11    JMP   0x050E             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
04FE: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0501: D0 07    JNC   0x0509             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
0503: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
0505: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
0507: 80 06    JMP   0x050E             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
0509: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
050B: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
050E: 9E 86    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
0510: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
0512: BF E2    JNZ   0x04F5             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
0514: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0515: 4F       MOV   X,SP               (1015)     mov   X, SP
0516: 10       PUSH  X                  (1016)     push  X
0517: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
0519: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
051B: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
051D: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
051E: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0521: B0 05    JNZ   0x0527             (1026)     jnz   .LCD_CHECK1
0523: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0525: 80 11    JMP   0x0537             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0527: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
052A: D0 07    JNC   0x0532             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
052C: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
052E: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0530: 80 06    JMP   0x0537             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0532: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0534: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0537: 9E 5D    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
0539: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
053B: BF E2    JNZ   0x051E             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
053D: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
053E: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
0540: 08       PUSH  A                  (1098)     push  A
0541: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
0543: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
0545: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
0547: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
054A: B0 05    JNZ   0x0550             (1103)     jnz   .VBG_NZ_SEGX
054C: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
054E: 80 13    JMP   0x0562             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
0550: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
0553: D0 09    JNC   0x055D             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
0555: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
0557: 78       DEC   A                  (1111)     dec   A
0558: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
055B: 80 06    JMP   0x0562             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
055D: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
0560: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
0562: 9E 32    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(1120)     call  LCD_WriteData                ; Write value
0564: 18       POP   A                  (1121)     pop   A
0565: 78       DEC   A                  (1122)     dec   A
0566: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
0568: BF D7    JNZ   0x0540             (1124)     jnz   .VBG_LOOPX
056A: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
056B: 4F       MOV   X,SP               (1168)     mov   X, SP
056C: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
056E: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0570: 08       PUSH  A                  (1172)     push  A
0571: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
0573: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0575: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
0577: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
057A: B0 05    JNZ   0x0580             (1177)     jnz   .VBG_NZ_SEG
057C: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
057E: 80 13    JMP   0x0592             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0580: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0583: D0 09    JNC   0x058D             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0585: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0587: 78       DEC   A                  (1185)     dec   A
0588: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
058B: 80 06    JMP   0x0592             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
058D: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0590: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0592: 9E 02    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(1194)     call  LCD_WriteData                ; Write value
0594: 18       POP   A                  (1195)     pop   A
0595: 78       DEC   A                  (1196)     dec   A
0596: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0598: BF D7    JNZ   0x0570             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
059A: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
059B: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
059C: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
059D: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
059E: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
05A0: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
05A2: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
05A5: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
05A8: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
05AA: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
05AC: D0 05    JNC   0x05B2             (1251)     jnc   .VBG_SOLID
05AE: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
05B0: 80 03    JMP   0x05B4             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
05B2: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
05B4: 9D E0    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(1257)     call  LCD_WriteData                ; character data
05B6: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
05B8: BF EF    JNZ   0x05A8             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
05BA: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
05BC: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
05BF: BF E5    JNZ   0x05A5             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
05C1: 18       POP   A                  (1264)     pop  A
05C2: 18       POP   A                  (1265)     pop  A
05C3: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
05C5: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
05C7: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
05D6: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
05D7: 38 03    ADD   SP,0x3             (1320)     add   SP,3
05D9: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
05DB: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
05DD: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
05DF: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
05E2: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
05E5: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
05E7: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
05EA: B0 05    JNZ   0x05F0             (1332)     jnz   .BG_OTHER
05EC: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
05EE: 80 03    JMP   0x05F2             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
05F0: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
05F2: 9D A2    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(1338)     call  LCD_WriteData
05F4: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
05F6: BF EE    JNZ   0x05E5             (1340)     jnz   .BG_Loop2
05F8: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
05FA: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
05FD: BF E4    JNZ   0x05E2             (1343)     jnz   .BG_Loop1
                                        (1344) 
05FF: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0601: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0603: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0605: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\gyro.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: GYRO.asm
                                        (0004) ;;   Version: 2.00, Updated on 2013/5/19 at 10:43:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cm User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "GYRO.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export   GYRO_Start
                                        (0031) export  _GYRO_Start
                                        (0032) export   GYRO_Stop
                                        (0033) export  _GYRO_Stop
                                        (0034) export   GYRO_fSendRepeatStart
                                        (0035) export  _GYRO_fSendRepeatStart
                                        (0036) export   GYRO_fSendStart
                                        (0037) export  _GYRO_fSendStart
                                        (0038) export   GYRO_SendStop
                                        (0039) export  _GYRO_SendStop
                                        (0040) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0041) export  _GYRO_fReadBytes
                                        (0042) export  _GYRO_bWriteBytes
                                        (0043) export  _GYRO_bWriteCBytes
                                        (0044) 
                                        (0045) export   GYRO_fWrite
                                        (0046) export  _GYRO_fWrite
                                        (0047) 
                                        (0048) export   GYRO_bRead
                                        (0049) export  _GYRO_bRead
                                        (0050) 
                                        (0051) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0052) 
                                        (0053) export   GYRO_fReadBytes
                                        (0054) export   GYRO_bWriteBytes
                                        (0055) export   GYRO_bWriteCBytes
                                        (0056) 
                                        (0057) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0058) 
                                        (0059) ;-------------------------------------------------------------------
                                        (0060) ;  Declare the varables for both the assembler and C compiler.
                                        (0061) ;
                                        (0062) ;-------------------------------------------------------------------
                                        (0063) export  GYRO_bStatus
                                        (0064) export _GYRO_bStatus
                                        (0065) export  GYRO_bData
                                        (0066) export _GYRO_bData
                                        (0067) export  GYRO_bAddr
                                        (0068) export _GYRO_bAddr
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) area testi_RAM(RAM, REL, CON)
                                        (0074) 
                                        (0075) _GYRO_bStatus:
                                        (0076)  GYRO_bStatus:                         blk   1  ; Status during transfers
                                        (0077) _GYRO_bData:
                                        (0078)  GYRO_bData:                           blk   1  ; Data transfered
                                        (0079) _GYRO_bXferCnt:
                                        (0080)  GYRO_bXferCnt:                                  ; Reused variable for counting transfered
                                        (0081) _GYRO_bAddr:                                     ; Bytes
                                        (0082)  GYRO_bAddr:                           blk   1  ; Slave Address
                                        (0083) _GYRO_bit_count:
                                        (0084)  GYRO_bit_count:                       blk   1  ; Bit counter
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) GYRO_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
                                        (0091) GYRO_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
                                        (0092) 
                                        (0093) .SECTION
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ;  FUNCTION NAME: GYRO_Start
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;
                                        (0099) ;-----------------------------------------------------------------------------
                                        (0100) ;
                                        (0101) ;  ARGUMENTS: none
                                        (0102) ;
                                        (0103) ;  RETURNS: none
                                        (0104) ;
                                        (0105) ;  SIDE EFFECTS:
                                        (0106) ;    The A and X registers may be modified by this or future implementations
                                        (0107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0110) ;    functions.
                                        (0111) ;          
                                        (0112) ;    Currently only the page pointer registers listed below are modified: 
                                        (0113) ;          CUR_PP
                                        (0114) ;
                                        (0115) ;    Resets all pins on the I2C master port to the pulldown drive
                                        (0116) ;
                                        (0117) ;  THEORY of OPERATION or PROCEDURE:
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120)  GYRO_Start:
                                        (0121) _GYRO_Start:
                                        (0122)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0123)     RAM_SETPAGE_CUR >Port_1_DriveMode_1_SHADE
                                        (0124)     ; Set pins to drive mode high Z
0606: 2E 08 03 OR    [0x8],0x3          (0125)     or   [Port_1_DriveMode_1_SHADE],GYRO_SDA_pin|GYRO_SCL_pin
0609: 26 07 FC AND   [0x7],0xFC         (0126)     and  [Port_1_DriveMode_0_SHADE],~(GYRO_SDA_pin|GYRO_SCL_pin)
                                        (0127) 
                                        (0128) IF(GYRO_DriveMode2)            
060C: 26 09 FC AND   [0x9],0xFC         (0129)     and  [Port_1_DriveMode_2_SHADE],~(GYRO_SDA_pin|GYRO_SCL_pin)
060F: 51 09    MOV   A,[0x9]            (0130)     mov  A,[Port_1_DriveMode_2_SHADE]
0611: 60 07    MOV   REG[0x7],A         (0131)     mov  reg[GYRO_I2CPRTDM2],A
0613: 71 10    OR    F,0x10             
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) 	M8C_SetBank1
0615: 51 08    MOV   A,[0x8]            (0135)     mov  A,[Port_1_DriveMode_1_SHADE]
0617: 60 05    MOV   REG[0x5],A         (0136)     mov  reg[GYRO_I2CPRTDM1],A
0619: 51 07    MOV   A,[0x7]            (0137)     mov  A,[Port_1_DriveMode_0_SHADE]
061B: 60 04    MOV   REG[0x4],A         (0138)     mov  reg[GYRO_I2CPRTDM0],A
061D: 70 EF    AND   F,0xEF             
                                        (0139)     M8C_SetBank0
                                        (0140)                                                      ; Set both pins, low so that only the port
                                        (0141)                                                      ; mode has to be changed from a 0 to a 1
061F: 26 05 FC AND   [0x5],0xFC         (0142)     and  [Port_1_Data_SHADE],~(GYRO_SDA_pin|GYRO_SCL_pin)
0622: 51 05    MOV   A,[0x5]            (0143)     mov  A,[Port_1_Data_SHADE]
0624: 60 04    MOV   REG[0x4],A         (0144)     mov  reg[GYRO_I2CPRTDR],A
                                        (0145)     RAM_EPILOGUE RAM_USE_CLASS_4
0626: 7F       RET                      (0146)     ret
                                        (0147) .ENDSECTION
                                        (0148) 
                                        (0149) .SECTION
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;  FUNCTION NAME: GYRO_Stop
                                        (0152) ;
                                        (0153) ;  DESCRIPTION:
                                        (0154) ;    This function performs no operation and is used for future
                                        (0155) ;    module compatibility.
                                        (0156) ;
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;
                                        (0159) ;  ARGUMENTS: none
                                        (0160) ;
                                        (0161) ;  RETURNS: none
                                        (0162) ;
                                        (0163) ;  SIDE EFFECTS:
                                        (0164) ;    The A and X registers may be modified by this or future implementations
                                        (0165) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0166) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0167) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0168) ;    functions.
                                        (0169) ;          
                                        (0170)  GYRO_Stop:
                                        (0171) _GYRO_Stop:
                                        (0172)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0173)     RAM_EPILOGUE RAM_USE_CLASS_1
0627: 7F       RET                      (0174)     ret
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: GYRO_fReadBytes
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;
                                        (0185) ;  ARGUMENTS:
                                        (0186) ;  [SP-3]=> Address of slave
                                        (0187) ;  [SP-4]=> LSB of Array address to put data in.
                                        (0188) ;  [SP-5]=> MSB of Array address to put data in.
                                        (0189) ;  [SP-6]=> Count of bytes to read.
                                        (0190) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0191) ;           to determine if:
                                        (0192) ;             0x01 => Use RepeatStart instead of Start
                                        (0193) ;             0x02 => Don't send Stop
                                        (0194) ;
                                        (0195) ;  RETURNS:
                                        (0196) ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0197) ;
                                        (0198) ;  SIDE EFFECTS:
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;          
                                        (0205) ;    Currently only the page pointer registers listed below are modified: 
                                        (0206) ;          CUR_PP
                                        (0207) ;		   IDX_PP
                                        (0208) ;
                                        (0209) SlaveAdr:     equ  -3
                                        (0210) RxArrayLSB:   equ  -4
                                        (0211) RxArrayMSB:   equ  -5
                                        (0212) RxByteCount:  equ  -6
                                        (0213) RxMode:       equ  -7
                                        (0214) 
                                        (0215) _GYRO_fReadBytes:
                                        (0216)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0217)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0218)     RAM_SETPAGE_IDX2STK
                                        (0219)     RAM_SETPAGE_CUR >GYRO_bStatus
0628: 4F       MOV   X,SP               (0220)     mov   X, SP
                                        (0221)     
0629: 52 FD    MOV   A,[X-3]            (0222)     mov   A, [X+SlaveAdr]
062B: 64       ASL   A                  (0223)     asl   A                                                ; Shift address to the left to make
                                        (0224)                                                            ; a complete byte with the R/W bit.
062C: 29 01    OR    A,0x1              (0225)     or    A,0x01                                           ; OR the address with the Read bit.
062E: 55 0C 00 MOV   [0xC],0x0          (0226)     mov   [GYRO_bStatus],0x00                              ; Clear all flags
0631: 48 F9 01 TST   [X-7],0x1          (0227)     tst   [x+RxMode],GYRO_RepStart
0634: B0 05    JNZ   0x063A             (0228)     jnz   DoRestartRx
0636: 91 AE    CALL  0x07E6             (0229)     call  I2C_DoStart                                      ; Send a start and address.
0638: 80 03    JMP   0x063C             (0230)     jmp   CheckRxAck
                                        (0231) DoRestartRx:
063A: 91 77    CALL  0x07B3             (0232)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0233) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0234)     RAM_SETPAGE_CUR >GYRO_bStatus
063C: 47 0C 01 TST   [0xC],0x1          (0235)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
063F: A0 20    JZ    0x0660             (0236)     jz    End_RD_Loop
                                        (0237)                                                            ; Send ACK until last byte
0641: 2E 0C 10 OR    [0xC],0x10         (0238)     or    [GYRO_bStatus],GYRO_SEND_ACK                     ; Send ACK until last byte
                                        (0239) RD_Loop:                                                   ; Loop through bytes
0644: 10       PUSH  X                  (0240)     push  x                                                ; Save X for later
0645: 7B FA    DEC   [X-6]              (0241)     dec   [x+RxByteCount]                                  ; Decrement data counter
0647: B0 04    JNZ   0x064C             (0242)     jnz   I2C_READ
0649: 26 0C EF AND   [0xC],0xEF         (0243)     and   [GYRO_bStatus],~GYRO_SEND_ACK                    ; If last Byte, don't ACK
                                        (0244) I2C_READ:
064C: 92 49    CALL  0x0897             (0245)     call  GYRO_read                                        ; Read a byte
                                        (0246)     RAM_SETPAGE_CUR >GYRO_bStatus
064E: 20       POP   X                  (0247)     pop   x                                                ; Restore x
064F: 10       PUSH  X                  (0248)     push  x
0650: 52 FC    MOV   A,[X-4]            (0249)     mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
0652: 08       PUSH  A                  (0250)     push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                                        (0251) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0252)     mov   A,[x+RxArrayMSB]
                                        (0253)     RAM_SETPAGE_IDX A
                                        (0254) ENDIF
0653: 20       POP   X                  (0255)     pop   x                                                ; restores the index pointer pushed a few lines above
0654: 51 0D    MOV   A,[0xD]            (0256)     mov   a,[GYRO_bData]                                   ; Save data in data array
0656: 54 00    MOV   [X+0],A            (0257)     mov   [x],a                                            ; Put read data in array
0658: 20       POP   X                  (0258)     pop   x                                                ; Restore the original pointer (for the subrtn params)
                                        (0259)     RAM_SETPAGE_IDX2STK					   ; Set Index Page to Stack Page
0659: 77 FC    INC   [X-4]              (0260)     inc   [x+RxArrayLSB]                                   ; Advance data pointer
065B: 48 FA FF TST   [X-6],0xFF         (0261)     tst   [x+RxByteCount],FFh                              ; Decrement data counter
065E: BF E5    JNZ   0x0644             (0262)     jnz   RD_Loop                                          ; Not finished, do another byte.
                                        (0263) End_RD_Loop:                                               ; Endloop
0660: 48 F9 02 TST   [X-7],0x2          (0264)     tst   [x+RxMode],GYRO_NoStop
0663: B0 03    JNZ   0x0667             (0265)     jnz   SkipRxStop
0665: 92 B6    CALL  _GYRO_SendStop     (0266)     call  GYRO_SendStop
                                        (0267) SkipRxStop:
                                        (0268)     RAM_SETPAGE_CUR >GYRO_bStatus
0667: 50 00    MOV   A,0x0              (0269)     mov   a,GYRO_XFER_ERROR                                ; Clear return value until we test if slave ACKed
0669: 47 0C 01 TST   [0xC],0x1          (0270)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed                  ; Test to see if Slave ACKed
066C: A0 03    JZ    0x0670             (0271)     jz    End_ReadBytes
066E: 50 01    MOV   A,0x1              (0272)     mov   a,GYRO_XFER_COMPLETE                             ; Return ACKed True
                                        (0273) End_ReadBytes:
                                        (0274)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0275)     RAM_EPILOGUE RAM_USE_CLASS_4
0670: 7F       RET                      (0276)     ret
                                        (0277) .ENDSECTION
                                        (0278) 
                                        (0279) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0280) .SECTION
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;  FUNCTION NAME: GYRO_fReadBytes
                                        (0283) ;
                                        (0284) ;  DESCRIPTION:
                                        (0285) ;
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS:
                                        (0289) ;      A => Address of slave
                                        (0290) ;      X => Pointer to other arguments.
                                        (0291) ;    [x] => LSB of Array address to put data in.
                                        (0292) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (0293) ;  [X-2] => Count of bytes to read.
                                        (0294) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (0295) ;           to determine if:
                                        (0296) ;             0x01 => Use RepeatStart instead of Start
                                        (0297) ;             0x02 => Don't send Stop
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;          
                                        (0309) RxArray_X:      equ   0
                                        (0310) RxByteCount_X:  equ  -2
                                        (0311) RxMode_X:       equ  -3
                                        (0312) 
                                        (0313)  GYRO_fReadBytes:		                 
0671: 64       ASL   A                  (0314)     asl   A                                            ; Shift address to the left to make
                                        (0315)                                                        ; a complete byte with the R/W bit.
0672: 29 01    OR    A,0x1              (0316)     or    A,0x01                                       ; OR the address with the Read bit.
0674: 55 0C 00 MOV   [0xC],0x0          (0317)     mov   [GYRO_bStatus],0x00                              ; Clear all flags
0677: 48 FD 01 TST   [X-3],0x1          (0318)     tst   [x+RxMode_X],GYRO_RepStart
067A: B0 05    JNZ   0x0680             (0319)     jnz   DoRestartRxSmm
067C: 91 68    CALL  0x07E6             (0320)     call  I2C_DoStart                                      ; Send a start and address.
067E: 80 03    JMP   0x0682             (0321)     jmp   CheckRxAckSmm
                                        (0322) DoRestartRxSmm:
0680: 91 31    CALL  0x07B3             (0323)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0324) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
0682: 47 0C 01 TST   [0xC],0x1          (0325)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
0685: A0 1E    JZ    0x06A4             (0326)     jz    End_RD_LoopSmm
                                        (0327)                                                            ; Send ACK until last byte
0687: 2E 0C 10 OR    [0xC],0x10         (0328)     or    [GYRO_bStatus],GYRO_SEND_ACK                     ; Send ACK until last byte
                                        (0329) RD_LoopSmm:                                                   ; Loop through bytes
068A: 10       PUSH  X                  (0330)     push  x                                                ; Save X for later
068B: 7B FE    DEC   [X-2]              (0331)     dec   [x+RxByteCount_X]                                ; Decrement data counter
068D: B0 04    JNZ   0x0692             (0332)     jnz   I2C_READSmm
068F: 26 0C EF AND   [0xC],0xEF         (0333)     and   [GYRO_bStatus],~GYRO_SEND_ACK                    ; If last Byte, don't ACK
                                        (0334) I2C_READSmm:
0692: 92 03    CALL  0x0897             (0335)     call  GYRO_read                                        ; Read a byte
0694: 20       POP   X                  (0336)     pop   x                                                ; Restore x
0695: 10       PUSH  X                  (0337)     push  x                                                ; Store x
0696: 59 00    MOV   X,[X+0]            (0338)     mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
0698: 51 0D    MOV   A,[0xD]            (0339)     mov   a,[GYRO_bData]                                   ; Save data in data array
069A: 54 00    MOV   [X+0],A            (0340)     mov   [x+RxArray_X],a                                  ; Put read data in array
069C: 20       POP   X                  (0341)     pop   x                                                ; Restore the original pointer
069D: 77 00    INC   [X+0]              (0342)     inc   [x+RxArray_X]                                    ; Advance data pointer
069F: 48 FE FF TST   [X-2],0xFF         (0343)     tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
06A2: BF E7    JNZ   0x068A             (0344)     jnz   RD_LoopSmm                                       ; Not finished, do another byte.
                                        (0345) End_RD_LoopSmm:                                            ; Endloop
06A4: 48 FD 02 TST   [X-3],0x2          (0346)     tst   [x+RxMode_X],GYRO_NoStop
06A7: B0 03    JNZ   0x06AB             (0347)     jnz   SkipRxStopSmm
06A9: 92 72    CALL  _GYRO_SendStop     (0348)     call  GYRO_SendStop
                                        (0349) SkipRxStopSmm:
06AB: 50 00    MOV   A,0x0              (0350)     mov   a,GYRO_XFER_ERROR                                ; Clear return value until we test if slave ACKed
06AD: 47 0C 01 TST   [0xC],0x1          (0351)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed                  ; Test to see if Slave ACKed
06B0: A0 03    JZ    0x06B4             (0352)     jz    End_ReadBytesSmm
06B2: 50 01    MOV   A,0x1              (0353)     mov   a,GYRO_XFER_COMPLETE                             ; Return ACKed True
                                        (0354) End_ReadBytesSmm:
06B4: 7F       RET                      (0355)     ret
                                        (0356) .ENDSECTION
                                        (0357) ENDIF
                                        (0358) 
                                        (0359) .SECTION
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;  FUNCTION NAME: GYRO_bWriteBytes
                                        (0362) ;
                                        (0363) ;  DESCRIPTION:
                                        (0364) ;    Write multiple data bits to slave device.
                                        (0365) ;
                                        (0366) ;-----------------------------------------------------------------------------
                                        (0367) ;
                                        (0368) ;  ARGUMENTS:
                                        (0369) ; [SP-3] => Address of slave
                                        (0370) ; [SP-4] => LSB of Array address to put data in.
                                        (0371) ; [SP-5] => MSB of Array address to put data in.
                                        (0372) ; [SP-6] => Count of bytes to write.
                                        (0373) ; [SP-7] => Mode flags that allow the programmer to set flags
                                        (0374) ;           to determine if:
                                        (0375) ;              0x01 => Use RePeatStart instead of Start
                                        (0376) ;              0x02 => Don't send Stop
                                        (0377) ;
                                        (0378) ;
                                        (0379) ;  RETURNS:
                                        (0380) ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0381) ;
                                        (0382) ;  SIDE EFFECTS:
                                        (0383) ;    The A and X registers may be modified by this or future implementations
                                        (0384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0387) ;    functions.
                                        (0388) ;          
                                        (0389) ;    Currently only the page pointer registers listed below are modified: 
                                        (0390) ;          CUR_PP
                                        (0391) ;		   IDX_PP
                                        (0392) ;
                                        (0393) TxSlaveAdr:   equ  -3
                                        (0394) TxArrayLSB:   equ  -4
                                        (0395) TxArrayMSB:   equ  -5
                                        (0396) TxByteCount:  equ  -6
                                        (0397) TxMode:       equ  -7
                                        (0398) 
                                        (0399) _GYRO_bWriteBytes:
                                        (0400)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0401)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0402)     RAM_SETPAGE_IDX2STK
                                        (0403)     RAM_SETPAGE_CUR >GYRO_bStatus
06B5: 4F       MOV   X,SP               (0404)     mov   X, SP
                                        (0405)     
06B6: 52 FD    MOV   A,[X-3]            (0406)     mov   A,[x+TxSlaveAdr]
06B8: 64       ASL   A                  (0407)     asl   A                                           ; Shift address to the left to make
                                        (0408)                                                       ; a complete byte with the R/W bit.
                                        (0409)                                                       ; The ASL takes care of clearing bit 0.
06B9: 55 0C 00 MOV   [0xC],0x0          (0410)     mov   [GYRO_bStatus],0x00                         ; Clear all flags
                                        (0411) 
                                        (0412) 
06BC: 48 F9 01 TST   [X-7],0x1          (0413)     tst   [x+TxMode],GYRO_RepStart
06BF: B0 05    JNZ   0x06C5             (0414)     jnz   DoRestartTx
06C1: 91 23    CALL  0x07E6             (0415)     call  I2C_DoStart                                 ; Send a start and address.
06C3: 80 03    JMP   0x06C7             (0416)     jmp   DoTxAck
                                        (0417) DoRestartTx:
06C5: 90 EC    CALL  0x07B3             (0418)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0419) DoTxAck:
                                        (0420)     RAM_SETPAGE_CUR >GYRO_bStatus
06C7: 55 0E 00 MOV   [0xE],0x0          (0421)     mov   [GYRO_bXferCnt],0x00                        ; Zero out byte count first
06CA: 47 0C 01 TST   [0xC],0x1          (0422)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed             ; Test to see if Slave ACKed
06CD: A0 1A    JZ    0x06E8             (0423)     jz    End_WR_Loop
                                        (0424) WR_Loop:                                              ; Loop through bytes
                                        (0425)     RAM_SETPAGE_IDX2STK
06CF: 10       PUSH  X                  (0426)     push  x                                           ; Save X for later
06D0: 52 FC    MOV   A,[X-4]            (0427)     mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
06D2: 08       PUSH  A                  (0428) 	push  a                                           ; save the address on the stack (will pop it back into X)
                                        (0429) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0430)     mov   a,[x+TxArrayMSB]
                                        (0431)     RAM_SETPAGE_IDX a                                 ; Set Index Page to pointer MSB
                                        (0432) ENDIF
06D3: 20       POP   X                  (0433)     pop   x                                           ; this recovers the address previously stoed on teh stack
06D4: 52 00    MOV   A,[X+0]            (0434)     mov   a,[x]                                       ; Get data pointer to by X
06D6: 53 0D    MOV   [0xD],A            (0435)     mov   [GYRO_bData],a                              ; Save data in temp location
06D8: 91 36    CALL  0x0810             (0436)     call  GYRO_write                                  ; Write the data
                                        (0437) 	RAM_SETPAGE_CUR >GYRO_bStatus
                                        (0438)     RAM_SETPAGE_IDX2STK                               ; Set Index Page back to Stack Page   
06DA: 20       POP   X                  (0439)     pop   x
06DB: 47 0C 01 TST   [0xC],0x1          (0440)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
06DE: A0 0E    JZ    0x06ED             (0441)     jz    DoWBstop                                    ; Stop transfer if NAKed
06E0: 76 0E    INC   [0xE]              (0442)     inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
06E2: 77 FC    INC   [X-4]              (0443)     inc   [x+TxArrayLSB]                              ; Advance pointer
06E4: 7B FA    DEC   [X-6]              (0444)     dec   [x+TxByteCount]                             ; Decrement byte counter
06E6: BF E8    JNZ   0x06CF             (0445)     jnz   WR_Loop                                     ; Not finished, do another byte.
                                        (0446) End_WR_Loop:                                          ; Endloop
06E8: 48 F9 02 TST   [X-7],0x2          (0447)     tst   [x+TxMode],GYRO_NoStop
06EB: B0 03    JNZ   0x06EF             (0448)     jnz   SkipTxStop
                                        (0449) DoWBstop:
06ED: 92 2E    CALL  _GYRO_SendStop     (0450)     call  GYRO_SendStop
                                        (0451) SkipTxStop:
                                        (0452) 	RAM_SETPAGE_CUR >GYRO_bStatus
06EF: 51 0E    MOV   A,[0xE]            (0453)     mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
                                        (0454) End_WriteBytes:
                                        (0455)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0456)     RAM_EPILOGUE RAM_USE_CLASS_4
06F1: 7F       RET                      (0457)     ret
                                        (0458) .ENDSECTION
                                        (0459) 
                                        (0460) 
                                        (0461) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: GYRO_bWriteBytes
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;    Write multiple data bits to slave device.
                                        (0468) ;
                                        (0469) ;-----------------------------------------------------------------------------
                                        (0470) ;
                                        (0471) ;  ARGUMENTS:
                                        (0472) ;     A => Address of slave
                                        (0473) ;     X => Pointer to other arguments.
                                        (0474) ;   [x] => LSB of Array address to put data in.
                                        (0475) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (0476) ; [X-2] => Count of bytes to write.
                                        (0477) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (0478) ;          to determine if:
                                        (0479) ;              0x01 => Use RePeatStart instead of Start
                                        (0480) ;              0x02 => Don't send Stop
                                        (0481) ;
                                        (0482) ;
                                        (0483) ;  RETURNS:
                                        (0484) ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0485) ;
                                        (0486) ;  SIDE EFFECTS:
                                        (0487) ;    The A and X registers may be modified by this or future implementations
                                        (0488) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0489) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0490) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0491) ;    functions.
                                        (0492) ;          
                                        (0493) TxArray_X:      equ   0
                                        (0494) TxByteCount_X:  equ  -2
                                        (0495) TxMode_X:       equ  -3
                                        (0496) 
                                        (0497)  GYRO_bWriteBytes:						       
06F2: 64       ASL   A                  (0498)     asl   A                                           ; Shift address to the left to make
                                        (0499)                                                       ; a complete byte with the R/W bit.
                                        (0500)                                                       ; The ASL takes care of clearing bit 0.
06F3: 55 0C 00 MOV   [0xC],0x0          (0501)     mov   [GYRO_bStatus],0x00                         ; Clear all flags
                                        (0502) 
                                        (0503) 
06F6: 48 FD 01 TST   [X-3],0x1          (0504)     tst   [x+TxMode_X],GYRO_RepStart
06F9: B0 05    JNZ   0x06FF             (0505)     jnz   DoRestartTxSmm
06FB: 90 E9    CALL  0x07E6             (0506)     call  I2C_DoStart                                 ; Send a start and address.
06FD: 80 03    JMP   0x0701             (0507)     jmp   DoTxAckSmm
                                        (0508) DoRestartTxSmm:
06FF: 90 B2    CALL  0x07B3             (0509)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0510) DoTxAckSmm:
0701: 55 0E 00 MOV   [0xE],0x0          (0511)     mov   [GYRO_bXferCnt],0x00                        ; Zero out byte count first
0704: 47 0C 01 TST   [0xC],0x1          (0512)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed             ; Test to see if Slave ACKed
0707: A0 18    JZ    0x0720             (0513)     jz    End_WR_LoopSmm
                                        (0514) WR_LoopSmm:                                              ; Loop through bytes
0709: 10       PUSH  X                  (0515)     push  x                                           ; Save X for later
070A: 59 00    MOV   X,[X+0]            (0516)     mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
070C: 52 00    MOV   A,[X+0]            (0517)     mov   a,[x]                                       ; Get data pointer to by X
070E: 53 0D    MOV   [0xD],A            (0518)     mov   [GYRO_bData],a                              ; Save data in temp location
0710: 90 FE    CALL  0x0810             (0519)     call  GYRO_write                                  ; Write the data
0712: 20       POP   X                  (0520)     pop   x
0713: 47 0C 01 TST   [0xC],0x1          (0521)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
0716: A0 0E    JZ    0x0725             (0522)     jz    DoWBstopSmm                                    ; Stop transfer if NAKed
0718: 76 0E    INC   [0xE]              (0523)     inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
071A: 77 00    INC   [X+0]              (0524)     inc   [x+TxArray_X]                                 ; Advance pointer
071C: 7B FE    DEC   [X-2]              (0525)     dec   [x+TxByteCount_X]                             ; Decrement byte counter
071E: BF EA    JNZ   0x0709             (0526)     jnz   WR_LoopSmm                                     ; Not finished, do another byte.
                                        (0527) End_WR_LoopSmm:                                          ; Endloop
0720: 48 FD 02 TST   [X-3],0x2          (0528)     tst   [x+TxMode_X],GYRO_NoStop
0723: B0 03    JNZ   0x0727             (0529)     jnz   SkipTxStopSmm
                                        (0530) DoWBstopSmm:
0725: 91 F6    CALL  _GYRO_SendStop     (0531)     call  GYRO_SendStop
                                        (0532) SkipTxStopSmm:
0727: 51 0E    MOV   A,[0xE]            (0533)     mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
                                        (0534) End_WriteBytesSmm:
0729: 7F       RET                      (0535)     ret
                                        (0536) .ENDSECTION
                                        (0537) ENDIF
                                        (0538) 
                                        (0539) .SECTION
                                        (0540) ;-----------------------------------------------------------------------------
                                        (0541) ;  FUNCTION NAME: GYRO_bWriteCBytes
                                        (0542) ;
                                        (0543) ;  DESCRIPTION:
                                        (0544) ;    Write multiple data bits to slave device from ROM
                                        (0545) ;
                                        (0546) ;-----------------------------------------------------------------------------
                                        (0547) ;
                                        (0548) ;  ARGUMENTS:
                                        (0549) ;   [SP-3] => Address of slave
                                        (0550) ;   [SP-4] => LSB of ROM Array address to put data in.
                                        (0551) ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
                                        (0552) ;   [SP-6] => Count of bytes to write.
                                        (0553) ;   [SP-7] => Mode flags that allow the programmer to set flags
                                        (0554) ;            to determine if:
                                        (0555) ;               0x01 => Use RepeatStart instead of Start
                                        (0556) ;               0x02 => Don't send Stop
                                        (0557) ;
                                        (0558) ;  RETURNS:
                                        (0559) ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0560) ;
                                        (0561) ;  SIDE EFFECTS:
                                        (0562) ;    The A and X registers may be modified by this or future implementations
                                        (0563) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0564) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0565) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0566) ;    functions.
                                        (0567) ;          
                                        (0568) ;    Currently only the page pointer registers listed below are modified: 
                                        (0569) ;          CUR_PP
                                        (0570) ;
                                        (0571) TxCSlaveAdr:   equ  -3
                                        (0572) TxCArrayLSB:   equ  -4
                                        (0573) TxCArrayMSB:   equ  -5
                                        (0574) TxCByteCount:  equ  -6
                                        (0575) TxCMode:       equ  -7
                                        (0576) 
                                        (0577) _GYRO_bWriteCBytes:
                                        (0578)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0579)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0580)     RAM_SETPAGE_CUR >GYRO_bStatus
072A: 4F       MOV   X,SP               (0581)     mov   X, SP
                                        (0582) 
072B: 52 FD    MOV   A,[X-3]            (0583)     mov   A,[x+TxCSlaveAdr]
072D: 64       ASL   A                  (0584)     asl   A                                           ; Shift address to the left to make
                                        (0585)                                                       ; a complete byte with the R/W bit.
                                        (0586)                                                       ; The ASL takes care of clearing bit 0.
072E: 55 0C 00 MOV   [0xC],0x0          (0587)     mov   [GYRO_bStatus],0x00                         ; Clear all flags
                                        (0588) 
                                        (0589) 
0731: 48 F9 01 TST   [X-7],0x1          (0590)     tst   [x+TxCMode],GYRO_RepStart                   ; Check if a Start or RepeatStart
0734: B0 05    JNZ   0x073A             (0591)     jnz   DoCRestartTx                                ; should executed.
0736: 90 AE    CALL  0x07E6             (0592)     call  I2C_DoStart                                 ; Send a start and address.
0738: 80 03    JMP   0x073C             (0593)     jmp   DoCTxAck
                                        (0594) DoCRestartTx:
073A: 90 77    CALL  0x07B3             (0595)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0596) 
                                        (0597) DoCTxAck:                                             ; Test to see if Slave is ACKed
                                        (0598) 	RAM_SETPAGE_CUR >GYRO_bStatus
073C: 55 0E 00 MOV   [0xE],0x0          (0599)     mov   [GYRO_bXferCnt],0x00            ; Zero out byte count first
073F: 47 0C 01 TST   [0xC],0x1          (0600)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
0742: A0 1D    JZ    0x0760             (0601)     jz    End_WRC_Loop
                                        (0602) WRC_Loop:                                             ; Loop through bytes
0744: 10       PUSH  X                  (0603)     push  x                                           ; Save X for later
                                        (0604) 
0745: 52 FB    MOV   A,[X-5]            (0605)     mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
0747: 59 FC    MOV   X,[X-4]            (0606)     mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
0749: 28       ROMX                     (0607)     romx                                              ; Put ROM Data in a
074A: 53 0D    MOV   [0xD],A            (0608)     mov   [GYRO_bData],a                              ; Save data in temp location
074C: 90 C2    CALL  0x0810             (0609)     call  GYRO_write                                  ; Write the data
                                        (0610)     RAM_SETPAGE_CUR >GYRO_bStatus
074E: 20       POP   X                  (0611)     pop   x
074F: 47 0C 01 TST   [0xC],0x1          (0612)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
0752: A0 12    JZ    0x0765             (0613)     jz    DoWCBstop                                    ; Stop transfer if NAKed
0754: 76 0E    INC   [0xE]              (0614)     inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
0756: 77 FC    INC   [X-4]              (0615)     inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
0758: D0 03    JNC   0x075C             (0616)     jnc   DecBCnt
075A: 77 FB    INC   [X-5]              (0617)     inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
                                        (0618) 
                                        (0619) DecBCnt:
075C: 7B FA    DEC   [X-6]              (0620)     dec   [x+TxCByteCount]                            ; Decrement byte counter
075E: BF E5    JNZ   0x0744             (0621)     jnz   WRC_Loop                                    ; Not finished, do another byte.
                                        (0622) End_WRC_Loop:                                         ; Endloop
0760: 48 F9 02 TST   [X-7],0x2          (0623)     tst   [x+TxCMode],GYRO_NoStop
0763: B0 03    JNZ   0x0767             (0624)     jnz   SkipTxCStop
                                        (0625) DoWCBstop:
0765: 91 B6    CALL  _GYRO_SendStop     (0626)     call  GYRO_SendStop
                                        (0627) SkipTxCStop:
                                        (0628)     RAM_SETPAGE_CUR >GYRO_bStatus
0767: 51 0E    MOV   A,[0xE]            (0629)     mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
                                        (0630) End_WriteCBytes:
                                        (0631)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0632)     RAM_EPILOGUE RAM_USE_CLASS_4
0769: 7F       RET                      (0633)     ret
                                        (0634) .ENDSECTION
                                        (0635) 
                                        (0636) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0637) .SECTION
                                        (0638) ;-----------------------------------------------------------------------------
                                        (0639) ;  FUNCTION NAME: GYRO_bWriteCBytes
                                        (0640) ;
                                        (0641) ;  DESCRIPTION:
                                        (0642) ;    Write multiple data bits to slave device from ROM
                                        (0643) ;
                                        (0644) ;-----------------------------------------------------------------------------
                                        (0645) ;
                                        (0646) ;  ARGUMENTS:
                                        (0647) ;      A => Address of slave
                                        (0648) ;      X => Pointer to other arguments.
                                        (0649) ;     [x] => LSB of ROM Array address to put data in.
                                        (0650) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (0651) ;   [X-2] => Count of bytes to write.
                                        (0652) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (0653) ;            to determine if:
                                        (0654) ;               0x01 => Use RepeatStart instead of Start
                                        (0655) ;               0x02 => Don't send Stop
                                        (0656) ;
                                        (0657) ;  RETURNS:
                                        (0658) ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0659) ;
                                        (0660) ;  SIDE EFFECTS:
                                        (0661) ;    The A and X registers may be modified by this or future implementations
                                        (0662) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0663) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0664) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0665) ;    functions.
                                        (0666) ;          
                                        (0667) TxCArrayLSB_x:   equ   0
                                        (0668) TxCArrayMSB_x:   equ  -1
                                        (0669) TxCByteCount_x:  equ  -2
                                        (0670) TxCMode_x:       equ  -3
                                        (0671) 
                                        (0672)  GYRO_bWriteCBytes:					        
076A: 64       ASL   A                  (0673)     asl   A                                           ; Shift address to the left to make
                                        (0674)                                                       ; a complete byte with the R/W bit.
                                        (0675)                                                       ; The ASL takes care of clearing bit 0.
076B: 55 0C 00 MOV   [0xC],0x0          (0676)     mov   [GYRO_bStatus],0x00                         ; Clear all flags
                                        (0677) 
                                        (0678) 
076E: 48 FD 01 TST   [X-3],0x1          (0679)     tst   [x+TxCMode_x],GYRO_RepStart                 ; Check if a Start or RepeatStart
0771: B0 05    JNZ   0x0777             (0680)     jnz   DoCRestartTxSmm                                ; should executed.
0773: 90 71    CALL  0x07E6             (0681)     call  I2C_DoStart                                 ; Send a start and address.
0775: 80 03    JMP   0x0779             (0682)     jmp   DoCTxAckSmm
                                        (0683) DoCRestartTxSmm:
0777: 90 3A    CALL  0x07B3             (0684)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0685) 
                                        (0686) DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
0779: 55 0E 00 MOV   [0xE],0x0          (0687)     mov   [GYRO_bXferCnt],0x00            ; Zero out byte count first
077C: 47 0C 01 TST   [0xC],0x1          (0688)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
077F: A0 1D    JZ    0x079D             (0689)     jz    End_WRC_LoopSmm
                                        (0690) WRC_LoopSmm:                                             ; Loop through bytes
0781: 10       PUSH  X                  (0691)     push  x                                           ; Save X for later
                                        (0692) 
0782: 52 FF    MOV   A,[X-1]            (0693)     mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
0784: 59 00    MOV   X,[X+0]            (0694)     mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
0786: 28       ROMX                     (0695)     romx                                              ; Put ROM Data in a
0787: 53 0D    MOV   [0xD],A            (0696)     mov   [GYRO_bData],a                              ; Save data in temp location
0789: 90 85    CALL  0x0810             (0697)     call  GYRO_write                                  ; Write the data
078B: 20       POP   X                  (0698)     pop   x
078C: 47 0C 01 TST   [0xC],0x1          (0699)     tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
078F: A0 12    JZ    0x07A2             (0700)     jz    DoWCBstopSmm                                ; Stop transfer if NAKed
0791: 76 0E    INC   [0xE]              (0701)     inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
0793: 77 00    INC   [X+0]              (0702)     inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
0795: D0 03    JNC   0x0799             (0703)     jnc   DecBCntSmm
0797: 77 FF    INC   [X-1]              (0704)     inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
                                        (0705) 
                                        (0706) DecBCntSmm:
0799: 7B FE    DEC   [X-2]              (0707)     dec   [x+TxCByteCount_x]                            ; Decrement byte counter
079B: BF E5    JNZ   0x0781             (0708)     jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
                                        (0709) End_WRC_LoopSmm:                                         ; Endloop
079D: 48 FD 02 TST   [X-3],0x2          (0710)     tst   [x+TxCMode_x],GYRO_NoStop
07A0: B0 03    JNZ   0x07A4             (0711)     jnz   SkipTxCStopSmm
                                        (0712) DoWCBstopSmm:
07A2: 91 79    CALL  _GYRO_SendStop     (0713)     call  GYRO_SendStop
                                        (0714) SkipTxCStopSmm:
07A4: 51 0E    MOV   A,[0xE]            (0715)     mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
                                        (0716) End_WriteCBytesSmm:
07A6: 7F       RET                      (0717)     ret
                                        (0718) .ENDSECTION
                                        (0719) ENDIF
                                        (0720) 
                                        (0721) .SECTION
                                        (0722) ;-----------------------------------------------------------------------------
                                        (0723) ;  FUNCTION NAME: GYRO_fSendRepeatStart
                                        (0724) ;
                                        (0725) ;  DESCRIPTION:
                                        (0726) ;    Send repeated start condition and send slave address.
                                        (0727) ;
                                        (0728) ;-----------------------------------------------------------------------------
                                        (0729) ;
                                        (0730) ;  ARGUMENTS:
                                        (0731) ;    GYRO_bAddr - Contains the slave address and transfer direction.
                                        (0732) ;
                                        (0733) ;  RETURNS:
                                        (0734) ;    GYRO_bSTatus - Cleared if a slave responds to a request. Set otherwise
                                        (0735) ;
                                        (0736) ;  SIDE EFFECTS:
                                        (0737) ;    The A and X registers may be modified by this or future implementations
                                        (0738) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0739) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0740) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0741) ;    functions.
                                        (0742) ;          
                                        (0743) ;    Currently only the page pointer registers listed below are modified: 
                                        (0744) ;          CUR_PP
                                        (0745) ;
                                        (0746) ;  THEORY of OPERATION or PROCEDURE:
                                        (0747) ;    Prepare to send start by setting SCl and SDA high.
                                        (0748) ;    must be followed directly by GYRO_start.
                                        (0749) ;
                                        (0750)  GYRO_fSendRepeatStart:
                                        (0751) _GYRO_fSendRepeatStart:
                                        (0752)     RAM_PROLOGUE RAM_USE_CLASS_4
07A7: 64       ASL   A                  (0753)     asl   a                                                ; Shift address to the left
07A8: 79       DEC   X                  (0754)     dec   x                                                ; If zero, C flag will be set
07A9: D0 04    JNC   0x07AE             (0755)     jnc   .setRead                                ; Do a write if zero
07AB: 90 06    CALL  0x07B3             (0756)     call  I2C_DoRepeatStart
                                        (0757)     RAM_EPILOGUE RAM_USE_CLASS_4
07AD: 7F       RET                      (0758)     ret
                                        (0759) .setRead:
07AE: 29 01    OR    A,0x1              (0760)     or    a,0x01                                           ; Set Read flag
07B0: 90 01    CALL  0x07B3             (0761)     call  I2C_DoRepeatStart
                                        (0762)     RAM_EPILOGUE RAM_USE_CLASS_4
07B2: 7F       RET                      (0763)     ret  
                                        (0764) 
                                        (0765) I2C_DoRepeatStart:
                                        (0766)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0767)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
07B3: 08       PUSH  A                  (0768)     push  a
07B4: 71 10    OR    F,0x10             
                                        (0769)     M8C_SetBank1
07B6: 2E 07 01 OR    [0x7],0x1          (0770)     or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin          ; Assert SCL low
07B9: 26 07 FD AND   [0x7],0xFD         (0771)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin         ; Release SDA high
07BC: 51 07    MOV   A,[0x7]            (0772)     mov   A,[Port_1_DriveMode_0_SHADE]
07BE: 60 04    MOV   REG[0x4],A         (0773)     mov   reg[GYRO_I2CPRTDM0],A
                                        (0774) 
                                        (0775)                                                            ; Delay 3/4 period
07C0: 50 0C    MOV   A,0xC              (0776)     mov   A,GYRO_delay3qtr
07C2: 91 88    CALL  0x094C             (0777)     call  GYRO_delay
                                        (0778)                                                            ; Release SCL high
07C4: 26 07 FE AND   [0x7],0xFE         (0779)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
07C7: 51 07    MOV   A,[0x7]            (0780)     mov   A,[Port_1_DriveMode_0_SHADE]
07C9: 60 04    MOV   REG[0x4],A         (0781)     mov   reg[GYRO_I2CPRTDM0],A
07CB: 70 EF    AND   F,0xEF             
                                        (0782) 
                                        (0783)     M8C_SetBank0
                                        (0784) clockstretch1:                                             ; Wait for SCL high in case of wait
                                        (0785)                                                            ; states adde by slave
07CD: 49 04 01 TST   REG[0x4],0x1       (0786)     tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
07D0: AF FC    JZ    0x07CD             (0787)     jz    clockstretch1
                                        (0788) 
07D2: 50 0C    MOV   A,0xC              (0789)     mov   A,GYRO_delay3qtr                                 ; Delay 1/2 period
07D4: 91 76    CALL  0x094C             (0790)     call  GYRO_delay
07D6: 18       POP   A                  (0791)     pop   a
07D7: 90 0D    CALL  0x07E6             (0792)     call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                                        (0793)     RAM_EPILOGUE RAM_USE_CLASS_4
07D9: 7F       RET                      (0794)     ret
                                        (0795) .ENDSECTION
                                        (0796) 
                                        (0797) .SECTION
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799) ;  FUNCTION NAME: GYRO_fSendStart
                                        (0800) ;
                                        (0801) ;  DESCRIPTION:
                                        (0802) ;    Generates start condition and sends slave address.
                                        (0803) ;
                                        (0804) ;-----------------------------------------------------------------------------
                                        (0805) ;
                                        (0806) ;  ARGUMENTS:
                                        (0807) ;    A => Contains the slave address.
                                        (0808) ;
                                        (0809) ;  RETURNS:
                                        (0810) ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0811) ;
                                        (0812) ;  SIDE EFFECTS:
                                        (0813) ;    The A and X registers may be modified by this or future implementations
                                        (0814) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0815) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0816) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0817) ;    functions.
                                        (0818) ;          
                                        (0819) ;    Currently only the page pointer registers listed below are modified: 
                                        (0820) ;          CUR_PP
                                        (0821) ;
                                        (0822) ;  THEORY of OPERATION or PROCEDURE:
                                        (0823) ;   Send start by setting SDA low while SCL is high. Set
                                        (0824) ;   SCL low in preparation to send address. Must be followed
                                        (0825) ;   by GYRO_write.
                                        (0826) ;
                                        (0827)  GYRO_fSendStart:
                                        (0828) _GYRO_fSendStart:
                                        (0829)     RAM_PROLOGUE RAM_USE_CLASS_4
07DA: 64       ASL   A                  (0830)     asl   a                                                     ; Shift address to the left
07DB: 79       DEC   X                  (0831)     dec   x                                                     ; If zero, C flag will be set
07DC: D0 04    JNC   0x07E1             (0832)     jnc   .SetRead
07DE: 90 06    CALL  0x07E6             (0833)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0834)     RAM_EPILOGUE RAM_USE_CLASS_4
07E0: 7F       RET                      (0835)     ret
                                        (0836) .SetRead:
07E1: 29 01    OR    A,0x1              (0837)     or    a,0x01                                                ; Set Read flag
07E3: 90 01    CALL  0x07E6             (0838)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
07E5: 7F       RET                      (0840)     ret
07E6: 71 10    OR    F,0x10             
                                        (0841) 
                                        (0842) I2C_DoStart:
                                        (0843)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0844)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (0845)     M8C_SetBank1
07E8: 08       PUSH  A                  (0846)     push  A                                                     ; Save the slave address
07E9: 2E 07 02 OR    [0x7],0x2          (0847)     or    [Port_1_DriveMode_0_SHADE],GYRO_SDA_pin               ; Assert SDA low
07EC: 51 07    MOV   A,[0x7]            (0848)     mov   A,[Port_1_DriveMode_0_SHADE]
07EE: 60 04    MOV   REG[0x4],A         (0849)     mov   reg[GYRO_I2CPRTDM0],A
                                        (0850) 
07F0: 50 05    MOV   A,0x5              (0851)     mov   A,GYRO_delayhalf                                      ; Delay 1/2 period
07F2: 91 58    CALL  0x094C             (0852)     call  GYRO_delay
07F4: 18       POP   A                  (0853)     pop   A                                                     ; Restore slave address to A
07F5: 70 EF    AND   F,0xEF             
                                        (0854)     M8C_SetBank0
                                        (0855)     RAM_SETPAGE_CUR >GYRO_bData
07F7: 53 0D    MOV   [0xD],A            (0856)     mov   [GYRO_bData],A
07F9: 71 10    OR    F,0x10             
                                        (0857) 
                                        (0858)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (0859)     M8C_SetBank1
07FB: 2E 07 01 OR    [0x7],0x1          (0860)     or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin               ; Set SCL low
07FE: 51 07    MOV   A,[0x7]            (0861)     mov   A,[Port_1_DriveMode_0_SHADE]
0800: 60 04    MOV   REG[0x4],A         (0862)     mov   reg[GYRO_I2CPRTDM0],A
0802: 70 EF    AND   F,0xEF             
                                        (0863)     M8C_SetBank0
                                        (0864) 
0804: 50 02    MOV   A,0x2              (0865)     mov   A,GYRO_delayqtr                                       ; Delay 1/4 period
0806: 91 44    CALL  0x094C             (0866)     call  GYRO_delay
0808: 90 06    CALL  0x0810             (0867)     call   GYRO_write                                           ; Write the byte.
                                        (0868)     RAM_EPILOGUE RAM_USE_CLASS_4
080A: 7F       RET                      (0869)     ret
                                        (0870) .ENDSECTION
                                        (0871) 
                                        (0872) .SECTION
                                        (0873) ;-----------------------------------------------------------------------------
                                        (0874) ;  FUNCTION NAME: GYRO_fWrite
                                        (0875) ;
                                        (0876) ;  DESCRIPTION:
                                        (0877) ;    Writes a byte to the I2C master bus.
                                        (0878) ;
                                        (0879) ;-----------------------------------------------------------------------------
                                        (0880) ;
                                        (0881) ;  ARGUMENTS:
                                        (0882) ;    A contains Data to be written to I2C slave.
                                        (0883) ;
                                        (0884) ;  RETURNS:
                                        (0885) ;    1 If ACKed, else 0
                                        (0886) ;
                                        (0887) ;  SIDE EFFECTS:
                                        (0888) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0889) ;
                                        (0890) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0891) ;
                                        (0892) ;  FUNCTION NAME: GYRO_write
                                        (0893) ;
                                        (0894) ;  DESCRIPTION:
                                        (0895) ;    Writes a byte to the I2C master bus. Also used for sending the address.
                                        (0896) ;
                                        (0897) ;  ARGUMENTS:
                                        (0898) ;    Reg A contains slave address.
                                        (0899) ;    GYRO_bData - Contains data to be transmitted.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Send data byte to slave. Must be followed by GYRO_get_ack.
                                        (0915) ;
                                        (0916) GYRO_fWrite:
                                        (0917) _GYRO_fWrite:
                                        (0918)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0919)     RAM_SETPAGE_CUR >GYRO_bData
080B: 53 0D    MOV   [0xD],A            (0920)     mov   [GYRO_bData],A                                   ; Put data in bData
080D: 90 01    CALL  0x0810             (0921)     call  GYRO_write
                                        (0922)     RAM_EPILOGUE RAM_USE_CLASS_4
080F: 7F       RET                      (0923)     ret
                                        (0924) 
                                        (0925) GYRO_write:
                                        (0926) _GYRO_write:
                                        (0927)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0928)     RAM_SETPAGE_CUR >GYRO_bit_count
                                        (0929)     
0810: 55 0F 08 MOV   [0xF],0x8          (0930)     mov   [GYRO_bit_count],8                                ; Set up count to xmit 8 bits
                                        (0931) writenextbit:
0813: 7A 0F    DEC   [0xF]              (0932)     dec   [GYRO_bit_count]
0815: 71 10    OR    F,0x10             
                                        (0933) 
                                        (0934)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (0935)                                                            ; Assert SCL low
                                        (0936)     M8C_SetBank1
0817: 2E 07 01 OR    [0x7],0x1          (0937)     or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
081A: 51 07    MOV   A,[0x7]            (0938)     mov   A,[Port_1_DriveMode_0_SHADE]
081C: 60 04    MOV   REG[0x4],A         (0939)     mov   reg[GYRO_I2CPRTDM0],A
081E: 70 EF    AND   F,0xEF             
                                        (0940)     M8C_SetBank0
                                        (0941) 
                                        (0942)     RAM_SETPAGE_CUR >GYRO_bit_count
0820: 6B 0D    RLC   [0xD]              (0943)     rlc   [GYRO_bData]
0822: 71 10    OR    F,0x10             
                                        (0944)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (0945)     M8C_SetBank1
0824: C0 0A    JC    0x082F             (0946)     jc    write_bit                                        ; Assert SDA low for data 0    
0826: 2E 07 02 OR    [0x7],0x2          (0947)     or    [Port_1_DriveMode_0_SHADE],GYRO_SDA_pin
0829: 51 07    MOV   A,[0x7]            (0948)     mov   A,[Port_1_DriveMode_0_SHADE]
082B: 60 04    MOV   REG[0x4],A         (0949)     mov   reg[GYRO_I2CPRTDM0],A
                                        (0950) 
082D: 80 08    JMP   0x0836             (0951)     jmp   writestartclock
                                        (0952) write_bit:                                                 ; Release SDA high for data 1
082F: 26 07 FD AND   [0x7],0xFD         (0953)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin      
0832: 51 07    MOV   A,[0x7]            (0954)     mov   A,[Port_1_DriveMode_0_SHADE]
0834: 60 04    MOV   REG[0x4],A         (0955)     mov   reg[GYRO_I2CPRTDM0],A
                                        (0956) 
                                        (0957) writestartclock:
0836: 50 05    MOV   A,0x5              (0958)     mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
0838: 91 12    CALL  0x094C             (0959)     call  GYRO_delay
                                        (0960)                                                            ; Release SCL High
083A: 26 07 FE AND   [0x7],0xFE         (0961)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
083D: 51 07    MOV   A,[0x7]            (0962)     mov   A,[Port_1_DriveMode_0_SHADE]
083F: 60 04    MOV   REG[0x4],A         (0963)     mov   reg[GYRO_I2CPRTDM0],A
0841: 70 EF    AND   F,0xEF             
                                        (0964) 
                                        (0965)     M8C_SetBank0
                                        (0966) clockstretch2:                                             ; Wait for SCL high in case of wait states
                                        (0967)                                                            ; are added by slave.
0843: 49 04 01 TST   REG[0x4],0x1       (0968)     tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
0846: AF FC    JZ    0x0843             (0969)     jz    clockstretch2
                                        (0970)                                                            ; Delay for 1/2 period
0848: 50 05    MOV   A,0x5              (0971)     mov   A,GYRO_delayhalf
084A: 91 00    CALL  0x094C             (0972)     call  GYRO_delay
                                        (0973) 
                                        (0974)     RAM_SETPAGE_CUR >GYRO_bit_count
084C: 3C 0F 00 CMP   [0xF],0x0          (0975)     cmp   [GYRO_bit_count],0
084F: BF C3    JNZ   0x0813             (0976)     jnz   writenextbit
0851: 90 01    CALL  0x0854             (0977)     call  GYRO_get_ack                
                                        (0978) 
                                        (0979)     RAM_EPILOGUE RAM_USE_CLASS_4
0853: 7F       RET                      (0980)     ret
0854: 71 10    OR    F,0x10             
                                        (0981) .ENDSECTION
                                        (0982) 
                                        (0983) .SECTION
                                        (0984) ;-----------------------------------------------------------------------------
                                        (0985) ;  FUNCTION NAME: GYRO_get_ack
                                        (0986) ;
                                        (0987) ;  DESCRIPTION:
                                        (0988) ;    Get slave acknowledge response. Used only by GYRO_write.
                                        (0989) ;
                                        (0990) ;-----------------------------------------------------------------------------
                                        (0991) ;
                                        (0992) ;  ARGUMENTS:
                                        (0993) ;    GYRO_bData - Contains data to be transmitted.
                                        (0994) ;
                                        (0995) ;  RETURNS:
                                        (0996) ;    Sets flag in GYRO_bStatus if ACKed by Slave.
                                        (0997) ;
                                        (0998) ;  SIDE EFFECTS:
                                        (0999) ;    The A and X registers may be modified by this or future implementations
                                        (1000) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1001) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1002) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1003) ;    functions.
                                        (1004) ;          
                                        (1005) ;    Currently only the page pointer registers listed below are modified: 
                                        (1006) ;          CUR_PP
                                        (1007) ;
                                        (1008) GYRO_get_ack:
                                        (1009) _GYRO_get_ack:
                                        (1010)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1011)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (1012)     M8C_SetBank1
0856: 2E 07 01 OR    [0x7],0x1          (1013)     or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
0859: 51 07    MOV   A,[0x7]            (1014)     mov   A,[Port_1_DriveMode_0_SHADE]
085B: 60 04    MOV   REG[0x4],A         (1015)     mov   reg[GYRO_I2CPRTDM0],A
                                        (1016)                                                            ; Release SDA high so slave may ACK
085D: 26 07 FD AND   [0x7],0xFD         (1017)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin
0860: 51 07    MOV   A,[0x7]            (1018)     mov   A,[Port_1_DriveMode_0_SHADE]
0862: 60 04    MOV   REG[0x4],A         (1019)     mov   reg[GYRO_I2CPRTDM0],A
                                        (1020)                                                            ; Delay 3/4 period
0864: 50 0C    MOV   A,0xC              (1021)     mov   A,GYRO_delay3qtr
0866: 90 E4    CALL  0x094C             (1022)     call  GYRO_delay
                                        (1023)                                                            ; Release SCL high
0868: 26 07 FE AND   [0x7],0xFE         (1024)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
086B: 51 07    MOV   A,[0x7]            (1025)     mov   A,[Port_1_DriveMode_0_SHADE]
086D: 60 04    MOV   REG[0x4],A         (1026)     mov   reg[GYRO_I2CPRTDM0],A
086F: 70 EF    AND   F,0xEF             
                                        (1027) 
                                        (1028)     M8C_SetBank0
                                        (1029) clockstretch3:                                             ; Wait for SCL to go high in case wait states
                                        (1030)                                                            ; are added my slave.
0871: 49 04 01 TST   REG[0x4],0x1       (1031)     tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
0874: AF FC    JZ    0x0871             (1032)     jz    clockstretch3
                                        (1033)     
                                        (1034)     RAM_SETPAGE_CUR >GYRO_bStatus    
                                        (1035)                                                        ; Clear ACK bit
0876: 26 0C FE AND   [0xC],0xFE         (1036)     and   [GYRO_bStatus],~GYRO_SLAVE_ACKed
0879: 49 04 02 TST   REG[0x4],0x2       (1037)     tst   reg[GYRO_I2CPRTDR],GYRO_SDA_pin
087C: B0 04    JNZ   0x0881             (1038)     jnz    getack2                                         ; If ACKed, set flag
087E: 2E 0C 01 OR    [0xC],0x1          (1039)     or    [GYRO_bStatus],GYRO_SLAVE_ACKed
                                        (1040) 
                                        (1041) getack2:
0881: 50 05    MOV   A,0x5              (1042)     mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
0883: 90 C7    CALL  0x094C             (1043)     call  GYRO_delay
                                        (1044) 
0885: 51 0C    MOV   A,[0xC]            (1045)     mov   A,[GYRO_bStatus]                                 ; Get result and put it in A
0887: 21 01    AND   A,0x1              (1046)     and   A,GYRO_SLAVE_ACKed                               ; Mask off just the ACK flag.
                                        (1047)     RAM_EPILOGUE RAM_USE_CLASS_4
0889: 7F       RET                      (1048)     ret
                                        (1049) .ENDSECTION
                                        (1050) 
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: GYRO_bRead
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;    Reads 1 data byte from the I2C master bus.
                                        (1057) ;
                                        (1058) ;-----------------------------------------------------------------------------
                                        (1059) ;
                                        (1060) ;  ARGUMENTS:
                                        (1061) ;    Reg A Contains the Slave Address.
                                        (1062) ;    GYRO_bStatus - Set for no ack to be followed by stop.
                                        (1063) ;    Clear for ack to indicate more data to follow.
                                        (1064) ;
                                        (1065) ;  RETURNS:
                                        (1066) ;    GYRO_bData - Contains received data.
                                        (1067) ;
                                        (1068) ;  SIDE EFFECTS:
                                        (1069) ;    The A and X registers may be modified by this or future implementations
                                        (1070) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1071) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1072) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1073) ;    functions.
                                        (1074) ;          
                                        (1075) ;    Currently only the page pointer registers listed below are modified: 
                                        (1076) ;          CUR_PP
                                        (1077) ;
                                        (1078) ;    Must be followed by GYRO_put_ack.
                                        (1079) ;
                                        (1080) GYRO_bRead:
                                        (1081) _GYRO_bRead:
                                        (1082)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1083)     RAM_SETPAGE_CUR >GYRO_bStatus
088A: 55 0C 00 MOV   [0xC],0x0          (1084)     mov   [GYRO_bStatus],0x00                              ; Clear ACK flag
088D: 21 FF    AND   A,0xFF             (1085)     and   A,0xFF                                           ; Is Ack flag set"
088F: A0 07    JZ    0x0897             (1086)     jz    GYRO_read                                        ; Don't ACK
0891: 2E 0C 10 OR    [0xC],0x10         (1087)     or    [GYRO_bStatus],GYRO_SEND_ACK                     ; Set ACK flag
0894: 90 01    CALL  0x0897             (1088)     call  GYRO_read
                                        (1089)     RAM_EPILOGUE RAM_USE_CLASS_4
0896: 7F       RET                      (1090)     ret
                                        (1091) 
                                        (1092) GYRO_read:
                                        (1093) _GYRO_read:
                                        (1094)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1095)     RAM_SETPAGE_CUR >GYRO_bStatus    
0897: 55 0F 08 MOV   [0xF],0x8          (1096)     mov   [GYRO_bit_count],8                               ; Count and prepare bits to read
                                        (1097) readnextbit:
089A: 7A 0F    DEC   [0xF]              (1098)     dec   [GYRO_bit_count]
089C: 6B 0D    RLC   [0xD]              (1099)     rlc   [GYRO_bData]
089E: 71 10    OR    F,0x10             
                                        (1100)     
                                        (1101)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (1102)     M8C_SetBank1                                           ; Asser SCL low
08A0: 2E 07 01 OR    [0x7],0x1          (1103)     or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
08A3: 51 07    MOV   A,[0x7]            (1104)     mov   A,[Port_1_DriveMode_0_SHADE]
08A5: 60 04    MOV   REG[0x4],A         (1105)     mov   reg[GYRO_I2CPRTDM0],A
                                        (1106)                                                            ; Delay 1/2 period
08A7: 50 05    MOV   A,0x5              (1107)     mov   A,GYRO_delayhalf
08A9: 90 A1    CALL  0x094C             (1108)     call  GYRO_delay
                                        (1109)                                                            ; Release SCL high
08AB: 26 07 FE AND   [0x7],0xFE         (1110)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
08AE: 51 07    MOV   A,[0x7]            (1111)     mov   A,[Port_1_DriveMode_0_SHADE]
08B0: 60 04    MOV   REG[0x4],A         (1112)     mov   reg[GYRO_I2CPRTDM0],A
08B2: 70 EF    AND   F,0xEF             
                                        (1113) 
                                        (1114)     M8C_SetBank0
                                        (1115)     RAM_SETPAGE_CUR >GYRO_bStatus    
                                        (1116) clockstretch4:                                             ; Wait for SCL to go high in case slave
                                        (1117)                                                            ; addes wait states.
                                        (1118) 
08B4: 49 04 01 TST   REG[0x4],0x1       (1119)     tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
08B7: AF FC    JZ    0x08B4             (1120)     jz    clockstretch4
                                        (1121)                                                            ; Delay 1/4 period
08B9: 50 02    MOV   A,0x2              (1122)     mov   A,GYRO_delayqtr
08BB: 90 8F    CALL  0x094C             (1123)     call  GYRO_delay
                                        (1124) 
08BD: 26 0D FE AND   [0xD],0xFE         (1125)     and   [GYRO_bData],~01h                                ; Record bit received
08C0: 49 04 02 TST   REG[0x4],0x2       (1126)     tst   reg[GYRO_I2CPRTDR],GYRO_SDA_pin
08C3: A0 04    JZ    0x08C8             (1127)     jz    readnobit
08C5: 2E 0D 01 OR    [0xD],0x1          (1128)     or    [GYRO_bData],01h
                                        (1129) readnobit:
08C8: 3C 0F 00 CMP   [0xF],0x0          (1130)     cmp   [GYRO_bit_count],0
08CB: BF CE    JNZ   0x089A             (1131)     jnz   readnextbit                                      ; Check for byte complete
                                        (1132) 
08CD: 90 01    CALL  0x08D0             (1133)     call   GYRO_put_ack                
                                        (1134)     RAM_EPILOGUE RAM_USE_CLASS_4
08CF: 7F       RET                      (1135)     ret
08D0: 71 10    OR    F,0x10             
                                        (1136) .ENDSECTION
                                        (1137)                                                          
                                        (1138) .SECTION
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;  FUNCTION NAME: GYRO_put_ack
                                        (1141) ;
                                        (1142) ;  DESCRIPTION:
                                        (1143) ;    Send acknowledge to slave. Used only by GYRO_read
                                        (1144) ;
                                        (1145) ;-----------------------------------------------------------------------------
                                        (1146) ;
                                        (1147) ;  ARGUMENTS:
                                        (1148) ;    GYRO_bStatus - Set for no ack to be followed by stop. Clear for ack
                                        (1149) ;    to indicate more data to follow.
                                        (1150) ;
                                        (1151) ;  RETURNS:
                                        (1152) ;    GYRO_bData - Contains received data.
                                        (1153) ;
                                        (1154) ;  SIDE EFFECTS:
                                        (1155) ;    The A and X registers may be modified by this or future implementations
                                        (1156) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1157) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1158) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1159) ;    functions.
                                        (1160) ;          
                                        (1161) ;    Currently only the page pointer registers listed below are modified: 
                                        (1162) ;          CUR_PP
                                        (1163) ;
                                        (1164) ;    Send ack if more data will follow.
                                        (1165) ;
                                        (1166) GYRO_put_ack:
                                        (1167) _GYRO_put_ack:
                                        (1168)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1169)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (1170)     M8C_SetBank1                                           ; Assert SCL low
08D2: 2E 07 01 OR    [0x7],0x1          (1171)     or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
08D5: 51 07    MOV   A,[0x7]            (1172)     mov   A,[Port_1_DriveMode_0_SHADE]
08D7: 60 04    MOV   REG[0x4],A         (1173)     mov   reg[GYRO_I2CPRTDM0],A
08D9: 70 EF    AND   F,0xEF             
                                        (1174)     M8C_SetBank0
                                        (1175) 
                                        (1176)     RAM_SETPAGE_CUR >GYRO_bStatus    
                                        (1177)                                                        ; Check if ack is to be transmitted
08DB: 47 0C 10 TST   [0xC],0x10         (1178)     tst   [GYRO_bStatus],GYRO_SEND_ACK
08DE: 71 10    OR    F,0x10             
                                        (1179) 
                                        (1180)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (1181)     M8C_SetBank1
                                        (1182) 
08E0: A0 0A    JZ    0x08EB             (1183)     jz    noputack
                                        (1184)                                                            ; Assert SDA low
08E2: 2E 07 02 OR    [0x7],0x2          (1185)     or    [Port_1_DriveMode_0_SHADE],GYRO_SDA_pin
08E5: 51 07    MOV   A,[0x7]            (1186)     mov   A,[Port_1_DriveMode_0_SHADE]
08E7: 60 04    MOV   REG[0x4],A         (1187)     mov   reg[GYRO_I2CPRTDM0],A
                                        (1188) 
08E9: 80 08    JMP   0x08F2             (1189)     jmp   putack1
                                        (1190) noputack:                                                  ; Release SDA high
08EB: 26 07 FD AND   [0x7],0xFD         (1191)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin
08EE: 51 07    MOV   A,[0x7]            (1192)     mov   A,[Port_1_DriveMode_0_SHADE]
08F0: 60 04    MOV   REG[0x4],A         (1193)     mov   reg[GYRO_I2CPRTDM0],A
                                        (1194) 
                                        (1195) putack1:
08F2: 50 02    MOV   A,0x2              (1196)     mov   A,GYRO_delayqtr                                  ; Delay 1/4 period
08F4: 90 56    CALL  0x094C             (1197)     call  GYRO_delay
                                        (1198)                                                            ; Release SCL high
08F6: 26 07 FE AND   [0x7],0xFE         (1199)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
08F9: 51 07    MOV   A,[0x7]            (1200)     mov   A,[Port_1_DriveMode_0_SHADE]
08FB: 60 04    MOV   REG[0x4],A         (1201)     mov   reg[GYRO_I2CPRTDM0],A
08FD: 70 EF    AND   F,0xEF             
                                        (1202) 
                                        (1203)     M8C_SetBank0
                                        (1204) clockstretch5:                                             ; Wait for SCL high in case slave
                                        (1205)                                                            ; adds wait states.
08FF: 49 04 01 TST   REG[0x4],0x1       (1206)     tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
0902: AF FC    JZ    0x08FF             (1207)     jz    clockstretch5
                                        (1208)                                                            ; delay for the high half of the clock.
0904: 50 05    MOV   A,0x5              (1209)     mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
0906: 90 44    CALL  0x094C             (1210)     call  GYRO_delay
0908: 71 10    OR    F,0x10             
                                        (1211) 
                                        (1212)     M8C_SetBank1                                           ; Assert SCL low
090A: 2E 07 01 OR    [0x7],0x1          (1213)     or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
090D: 51 07    MOV   A,[0x7]            (1214)     mov   A,[Port_1_DriveMode_0_SHADE]
090F: 60 04    MOV   REG[0x4],A         (1215)     mov   reg[GYRO_I2CPRTDM0],A
                                        (1216)                                                            ; If there is another read pending
                                        (1217)                                                            ; must release SDA for slave
0911: 26 07 FD AND   [0x7],0xFD         (1218)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin         ; Release SDA high
0914: 51 07    MOV   A,[0x7]            (1219)     mov   A,[Port_1_DriveMode_0_SHADE]
0916: 60 04    MOV   REG[0x4],A         (1220)     mov   reg[GYRO_I2CPRTDM0],A
0918: 70 EF    AND   F,0xEF             
                                        (1221)     M8C_SetBank0
                                        (1222) 
                                        (1223)     RAM_SETPAGE_CUR >GYRO_bStatus    
091A: 51 0D    MOV   A,[0xD]            (1224)     mov   A, [GYRO_bData]
                                        (1225)     RAM_EPILOGUE RAM_USE_CLASS_4
091C: 7F       RET                      (1226)     ret
091D: 71 10    OR    F,0x10             
                                        (1227) .ENDSECTION
                                        (1228) 
                                        (1229) .SECTION
                                        (1230) ;-----------------------------------------------------------------------------
                                        (1231) ;  FUNCTION NAME: GYRO_SendStop
                                        (1232) ;
                                        (1233) ;  DESCRIPTION:
                                        (1234) ;    Assert stop condition.
                                        (1235) ;
                                        (1236) ;-----------------------------------------------------------------------------
                                        (1237) ;
                                        (1238) ;  ARGUMENTS: none
                                        (1239) ;
                                        (1240) ;  RETURNS: none
                                        (1241) ;
                                        (1242) ;  SIDE EFFECTS:
                                        (1243) ;    The A and X registers may be modified by this or future implementations
                                        (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1247) ;    functions.
                                        (1248) ;          
                                        (1249) ;    Currently only the page pointer registers listed below are modified: 
                                        (1250) ;          CUR_PP
                                        (1251) ;
                                        (1252) ;  THEORY of OPERATION or PROCEDURE:
                                        (1253) ;     Send stop by releasing SDA high while SCL high.ASA21CR1
                                        (1254) ;
                                        (1255)  GYRO_SendStop:
                                        (1256) _GYRO_SendStop:
                                        (1257)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1258)     RAM_SETPAGE_CUR >Port_1_DriveMode_0_SHADE
                                        (1259)     M8C_SetBank1                                           ; Assert ACK and SDA low
091F: 2E 07 03 OR    [0x7],0x3          (1260)     or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin|GYRO_SDA_pin
0922: 51 07    MOV   A,[0x7]            (1261)     mov   A,[Port_1_DriveMode_0_SHADE]
0924: 60 04    MOV   REG[0x4],A         (1262)     mov   reg[GYRO_I2CPRTDM0],A
                                        (1263) 
0926: 50 0C    MOV   A,0xC              (1264)     mov   A,GYRO_delay3qtr                                 ; Delay 3/4 period
0928: 90 22    CALL  0x094C             (1265)     call  GYRO_delay
                                        (1266)                                                            ; Release SCL high
092A: 26 07 FE AND   [0x7],0xFE         (1267)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
092D: 51 07    MOV   A,[0x7]            (1268)     mov   A,[Port_1_DriveMode_0_SHADE]
092F: 60 04    MOV   REG[0x4],A         (1269)     mov   reg[GYRO_I2CPRTDM0],A
0931: 70 EF    AND   F,0xEF             
                                        (1270) 
                                        (1271)     M8C_SetBank0
                                        (1272) clockstretch6:                                             ; Wait for SCL to go high in case slave
                                        (1273)                                                            ; has added wait states.
0933: 49 04 01 TST   REG[0x4],0x1       (1274)     tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
0936: AF FC    JZ    0x0933             (1275)     jz    clockstretch6
0938: 71 10    OR    F,0x10             
                                        (1276)     M8C_SetBank1
                                        (1277) 
093A: 50 0C    MOV   A,0xC              (1278)     mov   A,GYRO_delay3qtr                                 ; Delay 3/4 period
093C: 90 0E    CALL  0x094C             (1279)     call  GYRO_delay
                                        (1280) 
                                        (1281)                                                            ; Release SDA high
093E: 26 07 FD AND   [0x7],0xFD         (1282)     and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin
0941: 51 07    MOV   A,[0x7]            (1283)     mov   A,[Port_1_DriveMode_0_SHADE]
0943: 60 04    MOV   REG[0x4],A         (1284)     mov   reg[GYRO_I2CPRTDM0],A
                                        (1285) 
0945: 50 05    MOV   A,0x5              (1286)     mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
0947: 90 03    CALL  0x094C             (1287)     call  GYRO_delay
0949: 70 EF    AND   F,0xEF             
                                        (1288)     M8C_SetBank0
                                        (1289)     
                                        (1290)     RAM_EPILOGUE RAM_USE_CLASS_4
094B: 7F       RET                      (1291)     ret
                                        (1292) .ENDSECTION
                                        (1293) 
                                        (1294) .SECTION
                                        (1295) ;-----------------------------------------------------------------------------
                                        (1296) ;  FUNCTION NAME: GYRO_delay
                                        (1297) ;
                                        (1298) ;  DESCRIPTION:
                                        (1299) ;    Create delays for GYRO routines.
                                        (1300) ;
                                        (1301) ;-----------------------------------------------------------------------------
                                        (1302) ;
                                        (1303) ;  ARGUMENTS: none
                                        (1304) ;
                                        (1305) ;  RETURNS: none
                                        (1306) ;
                                        (1307) ;  SIDE EFFECTS:
                                        (1308) ;    The A and X registers may be modified by this or future implementations
                                        (1309) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1310) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1312) ;    functions.
                                        (1313) ;          
                                        (1314) GYRO_delay:                                      ; 11 cycles for call. 32 total.
                                        (1315) GYROdelay1:                                      ; Delay 1/4 period at 100 kHz
094C: 78       DEC   A                  (1316)      dec  A                                      ; 4 cycles
094D: BF FE    JNZ   0x094C             (1317)      jnz  GYROdelay1                             ; 5 cycles for jump, 4 no jump.     
094F: 7F       RET                      (1318)      ret                                         ; 8 cycles
                                        (1319)   
                                        (1320) .ENDSECTION
                                        (1321) 
                                        (1322) 
                                        (1323) 
                                        (1324) ; End of File GYRO.asm
                                        (1325) 
                                        (1326) 
FILE: C:\Users\Topias\DOCUME~1\GitHub\robitti\GYROSK~1\Gyro\Gyro\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include <stdio.h>
(0008) #include <stdlib.h>
(0009) 
(0010) //Define all Gyroscope registers
(0011) 
(0012) //#define MPU6050_ADDRESS 0b11010010 // Address with end write bit
(0013) #define MPU6050_ADDRESS 0x69 //GY-521 address
(0014) #define MPU6050_RA_XG_OFFS_TC 0x00 //[7] PWR_MODE, [6:1] XG_OFFS_TC, [0] OTP_BNK_VLD
(0015) #define MPU6050_RA_YG_OFFS_TC 0x01 //[7] PWR_MODE, [6:1] YG_OFFS_TC, [0] OTP_BNK_VLD
(0016) #define MPU6050_RA_ZG_OFFS_TC 0x02 //[7] PWR_MODE, [6:1] ZG_OFFS_TC, [0] OTP_BNK_VLD
(0017) #define MPU6050_RA_X_FINE_GAIN 0x03 //[7:0] X_FINE_GAIN
(0018) #define MPU6050_RA_Y_FINE_GAIN 0x04 //[7:0] Y_FINE_GAIN
(0019) #define MPU6050_RA_Z_FINE_GAIN 0x05 //[7:0] Z_FINE_GAIN
(0020) #define MPU6050_RA_XA_OFFS_H 0x06 //[15:0] XA_OFFS
(0021) #define MPU6050_RA_XA_OFFS_L_TC 0x07
(0022) #define MPU6050_RA_YA_OFFS_H 0x08 //[15:0] YA_OFFS
(0023) #define MPU6050_RA_YA_OFFS_L_TC 0x09
(0024) #define MPU6050_RA_ZA_OFFS_H 0x0A //[15:0] ZA_OFFS
(0025) #define MPU6050_RA_ZA_OFFS_L_TC 0x0B
(0026) #define MPU6050_RA_XG_OFFS_USRH 0x13 //[15:0] XG_OFFS_USR
(0027) #define MPU6050_RA_XG_OFFS_USRL 0x14
(0028) #define MPU6050_RA_YG_OFFS_USRH 0x15 //[15:0] YG_OFFS_USR
(0029) #define MPU6050_RA_YG_OFFS_USRL 0x16
(0030) #define MPU6050_RA_ZG_OFFS_USRH 0x17 //[15:0] ZG_OFFS_USR
(0031) #define MPU6050_RA_ZG_OFFS_USRL 0x18
(0032) #define MPU6050_RA_SMPLRT_DIV 0x19
(0033) #define MPU6050_RA_CONFIG 0x1A
(0034) #define MPU6050_RA_GYRO_CONFIG 0x1B
(0035) #define MPU6050_RA_ACCEL_CONFIG 0x1C
(0036) #define MPU6050_RA_FF_THR 0x1D
(0037) #define MPU6050_RA_FF_DUR 0x1E
(0038) #define MPU6050_RA_MOT_THR 0x1F
(0039) #define MPU6050_RA_MOT_DUR 0x20
(0040) #define MPU6050_RA_ZRMOT_THR 0x21
(0041) #define MPU6050_RA_ZRMOT_DUR 0x22
(0042) #define MPU6050_RA_FIFO_EN 0x23
(0043) #define MPU6050_RA_I2C_MST_CTRL 0x24
(0044) #define MPU6050_RA_I2C_SLV0_ADDR 0x25
(0045) #define MPU6050_RA_I2C_SLV0_REG 0x26
(0046) #define MPU6050_RA_I2C_SLV0_CTRL 0x27
(0047) #define MPU6050_RA_I2C_SLV1_ADDR 0x28
(0048) #define MPU6050_RA_I2C_SLV1_REG 0x29
(0049) #define MPU6050_RA_I2C_SLV1_CTRL 0x2A
(0050) #define MPU6050_RA_I2C_SLV2_ADDR 0x2B
(0051) #define MPU6050_RA_I2C_SLV2_REG 0x2C
(0052) #define MPU6050_RA_I2C_SLV2_CTRL 0x2D
(0053) #define MPU6050_RA_I2C_SLV3_ADDR 0x2E
(0054) #define MPU6050_RA_I2C_SLV3_REG 0x2F
(0055) #define MPU6050_RA_I2C_SLV3_CTRL 0x30
(0056) #define MPU6050_RA_I2C_SLV4_ADDR 0x31
(0057) #define MPU6050_RA_I2C_SLV4_REG 0x32
(0058) #define MPU6050_RA_I2C_SLV4_DO 0x33
(0059) #define MPU6050_RA_I2C_SLV4_CTRL 0x34
(0060) #define MPU6050_RA_I2C_SLV4_DI 0x35
(0061) #define MPU6050_RA_I2C_MST_STATUS 0x36
(0062) #define MPU6050_RA_INT_PIN_CFG 0x37
(0063) #define MPU6050_RA_INT_ENABLE 0x38
(0064) #define MPU6050_RA_DMP_INT_STATUS 0x39
(0065) #define MPU6050_RA_INT_STATUS 0x3A
(0066) #define MPU6050_RA_ACCEL_XOUT_H 0x3B
(0067) #define MPU6050_RA_ACCEL_XOUT_L 0x3C
(0068) #define MPU6050_RA_ACCEL_YOUT_H 0x3D
(0069) #define MPU6050_RA_ACCEL_YOUT_L 0x3E
(0070) #define MPU6050_RA_ACCEL_ZOUT_H 0x3F
(0071) #define MPU6050_RA_ACCEL_ZOUT_L 0x40
(0072) #define MPU6050_RA_TEMP_OUT_H 0x41
(0073) #define MPU6050_RA_TEMP_OUT_L 0x42
(0074) #define MPU6050_RA_GYRO_XOUT_H 0x43
(0075) #define MPU6050_RA_GYRO_XOUT_L 0x44
(0076) #define MPU6050_RA_GYRO_YOUT_H 0x45
(0077) #define MPU6050_RA_GYRO_YOUT_L 0x46
(0078) #define MPU6050_RA_GYRO_ZOUT_H 0x47
(0079) #define MPU6050_RA_GYRO_ZOUT_L 0x48
(0080) #define MPU6050_RA_EXT_SENS_DATA_00 0x49
(0081) #define MPU6050_RA_EXT_SENS_DATA_01 0x4A
(0082) #define MPU6050_RA_EXT_SENS_DATA_02 0x4B
(0083) #define MPU6050_RA_EXT_SENS_DATA_03 0x4C
(0084) #define MPU6050_RA_EXT_SENS_DATA_04 0x4D
(0085) #define MPU6050_RA_EXT_SENS_DATA_05 0x4E
(0086) #define MPU6050_RA_EXT_SENS_DATA_06 0x4F
(0087) #define MPU6050_RA_EXT_SENS_DATA_07 0x50
(0088) #define MPU6050_RA_EXT_SENS_DATA_08 0x51
(0089) #define MPU6050_RA_EXT_SENS_DATA_09 0x52
(0090) #define MPU6050_RA_EXT_SENS_DATA_10 0x53
(0091) #define MPU6050_RA_EXT_SENS_DATA_11 0x54
(0092) #define MPU6050_RA_EXT_SENS_DATA_12 0x55
(0093) #define MPU6050_RA_EXT_SENS_DATA_13 0x56
(0094) #define MPU6050_RA_EXT_SENS_DATA_14 0x57
(0095) #define MPU6050_RA_EXT_SENS_DATA_15 0x58
(0096) #define MPU6050_RA_EXT_SENS_DATA_16 0x59
(0097) #define MPU6050_RA_EXT_SENS_DATA_17 0x5A
(0098) #define MPU6050_RA_EXT_SENS_DATA_18 0x5B
(0099) #define MPU6050_RA_EXT_SENS_DATA_19 0x5C
(0100) #define MPU6050_RA_EXT_SENS_DATA_20 0x5D
(0101) #define MPU6050_RA_EXT_SENS_DATA_21 0x5E
(0102) #define MPU6050_RA_EXT_SENS_DATA_22 0x5F
(0103) #define MPU6050_RA_EXT_SENS_DATA_23 0x60
(0104) #define MPU6050_RA_MOT_DETECT_STATUS 0x61
(0105) #define MPU6050_RA_I2C_SLV0_DO 0x63
(0106) #define MPU6050_RA_I2C_SLV1_DO 0x64
(0107) #define MPU6050_RA_I2C_SLV2_DO 0x65
(0108) #define MPU6050_RA_I2C_SLV3_DO 0x66
(0109) #define MPU6050_RA_I2C_MST_DELAY_CTRL 0x67
(0110) #define MPU6050_RA_SIGNAL_PATH_RESET 0x68
(0111) #define MPU6050_RA_MOT_DETECT_CTRL 0x69
(0112) #define MPU6050_RA_USER_CTRL 0x6A
(0113) #define MPU6050_RA_PWR_MGMT_1 0x6B
(0114) #define MPU6050_RA_PWR_MGMT_2 0x6C
(0115) #define MPU6050_RA_BANK_SEL 0x6D
(0116) #define MPU6050_RA_MEM_START_ADDR 0x6E
(0117) #define MPU6050_RA_MEM_R_W 0x6F
(0118) #define MPU6050_RA_DMP_CFG_1 0x70
(0119) #define MPU6050_RA_DMP_CFG_2 0x71
(0120) #define MPU6050_RA_FIFO_COUNTH 0x72
(0121) #define MPU6050_RA_FIFO_COUNTL 0x73
(0122) #define MPU6050_RA_FIFO_R_W 0x74
(0123) #define MPU6050_RA_WHO_AM_I 0x75
(0124) 
(0125) /* TESTI
(0126) 	void echo (void)
(0127) {
(0128) Counter16_Stop;
(0129) timervalue=Counter16_wReadCounter();
(0130) timervalue=0xffff-timervalue;
(0131) time=timervalue*10.66;
(0132) distance=(time/54.6)-1;
(0133) Counter16_WritePeriod(0xffff);
(0134) Counter16_Start;
(0135) }
(0136) */
(0137) /*
(0138) 	void trigger (void)
(0139) {
(0140) 	// TRIGGERIN YKSI PULSSI
(0141) 	TRIGG_Start();
(0142) 	TRIGG_Switch(1);
(0143) 	  for (i=0;i<4;i++); //n. 10us
(0144) 	TRIGG_Switch(0);
(0145) }*/
(0146) 	
(0147) void readSlave(int slaveAddr, int slaveReg, int bytes, BYTE *masterReg);
(0148) 
(0149) void readSlave(int slaveAddr, int slaveReg, int bytes, BYTE *masterReg) {
__UserModules_end|_readSlave|__text_start|_readSlave:
  i                    --> X+0
  masterReg            --> X-11
  bytes                --> X-9
  slaveReg             --> X-7
  slaveAddr            --> X-5
    0950: 10       PUSH  X
    0951: 4F       MOV   X,SP
    0952: 38 02    ADD   SP,0x2
(0150) 	
(0151) 	int i;
(0152) 	
(0153) 	//master:start
(0154) 	//master:slaveaddr+write
(0155) 	LCD_Position(0,0);
    0954: 10       PUSH  X
    0955: 50 00    MOV   A,0x0
    0957: 57 00    MOV   X,0x0
    0959: 7C 04 C1 LCALL _LCD_Position
(0156) 	LCD_PrCString("                 ");
    095C: 50 01    MOV   A,0x1
    095E: 08       PUSH  A
    095F: 50 B5    MOV   A,0xB5
    0961: 5C       MOV   X,A
    0962: 18       POP   A
    0963: 7C 03 50 LCALL _LCD_PrCString
(0157) 	LCD_Position(0,0);
    0966: 50 00    MOV   A,0x0
    0968: 57 00    MOV   X,0x0
    096A: 7C 04 C1 LCALL _LCD_Position
(0158) 	LCD_PrCString("S,AD+W");
    096D: 50 01    MOV   A,0x1
    096F: 08       PUSH  A
    0970: 50 AE    MOV   A,0xAE
    0972: 5C       MOV   X,A
    0973: 18       POP   A
    0974: 7C 03 50 LCALL _LCD_PrCString
    0977: 20       POP   X
(0159) 	GYRO_fSendStart(slaveAddr, GYRO_WRITE);	
    0978: 10       PUSH  X
    0979: 50 00    MOV   A,0x0
    097B: 08       PUSH  A
    097C: 52 FC    MOV   A,[X-4]
    097E: 20       POP   X
    097F: 7C 07 DA LCALL _GYRO_fSendStart
(0160) 	
(0161) 	//slave:ack
(0162) 	//master:register address (whoami 0x75)
(0163) 	LCD_Position(0,0);
    0982: 50 00    MOV   A,0x0
    0984: 57 00    MOV   X,0x0
    0986: 7C 04 C1 LCALL _LCD_Position
(0164) 	LCD_PrCString("                 ");
    0989: 50 01    MOV   A,0x1
    098B: 08       PUSH  A
    098C: 50 B5    MOV   A,0xB5
    098E: 5C       MOV   X,A
    098F: 18       POP   A
    0990: 7C 03 50 LCALL _LCD_PrCString
(0165) 	LCD_Position(0,0);
    0993: 50 00    MOV   A,0x0
    0995: 57 00    MOV   X,0x0
    0997: 7C 04 C1 LCALL _LCD_Position
(0166) 	LCD_PrCString("RA");
    099A: 50 01    MOV   A,0x1
    099C: 08       PUSH  A
    099D: 50 AB    MOV   A,0xAB
    099F: 5C       MOV   X,A
    09A0: 18       POP   A
    09A1: 7C 03 50 LCALL _LCD_PrCString
    09A4: 20       POP   X
(0167) 	GYRO_fWrite(slaveReg);
    09A5: 52 FA    MOV   A,[X-6]
    09A7: 10       PUSH  X
    09A8: 7C 08 0B LCALL _GYRO_fWrite
(0168) 	
(0169) 	//master:sendrepeatstart
(0170) 	LCD_Position(0,0);
    09AB: 50 00    MOV   A,0x0
    09AD: 57 00    MOV   X,0x0
    09AF: 7C 04 C1 LCALL _LCD_Position
(0171) 	LCD_PrCString("                 ");
    09B2: 50 01    MOV   A,0x1
    09B4: 08       PUSH  A
    09B5: 50 B5    MOV   A,0xB5
    09B7: 5C       MOV   X,A
    09B8: 18       POP   A
    09B9: 7C 03 50 LCALL _LCD_PrCString
(0172) 	LCD_Position(0,0);
    09BC: 50 00    MOV   A,0x0
    09BE: 57 00    MOV   X,0x0
    09C0: 7C 04 C1 LCALL _LCD_Position
(0173) 	LCD_PrCString("S,AD+R");
    09C3: 50 01    MOV   A,0x1
    09C5: 08       PUSH  A
    09C6: 50 A4    MOV   A,0xA4
    09C8: 5C       MOV   X,A
    09C9: 18       POP   A
    09CA: 7C 03 50 LCALL _LCD_PrCString
    09CD: 20       POP   X
(0174) 	GYRO_fSendRepeatStart(slaveAddr, GYRO_READ);
    09CE: 10       PUSH  X
    09CF: 50 01    MOV   A,0x1
    09D1: 08       PUSH  A
    09D2: 52 FC    MOV   A,[X-4]
    09D4: 20       POP   X
    09D5: 7C 07 A7 LCALL _GYRO_fSendRepeatStart
(0175) 	
(0176) 	//master:slaveaddr+read
(0177) 	LCD_Position(0,0);
    09D8: 50 00    MOV   A,0x0
    09DA: 57 00    MOV   X,0x0
    09DC: 7C 04 C1 LCALL _LCD_Position
(0178) 	LCD_PrCString("                 ");
    09DF: 50 01    MOV   A,0x1
    09E1: 08       PUSH  A
    09E2: 50 B5    MOV   A,0xB5
    09E4: 5C       MOV   X,A
    09E5: 18       POP   A
    09E6: 7C 03 50 LCALL _LCD_PrCString
(0179) 	LCD_Position(0,0);
    09E9: 50 00    MOV   A,0x0
    09EB: 57 00    MOV   X,0x0
    09ED: 7C 04 C1 LCALL _LCD_Position
(0180) 	LCD_PrCString("READ DATA");
    09F0: 50 01    MOV   A,0x1
    09F2: 08       PUSH  A
    09F3: 50 9A    MOV   A,0x9A
    09F5: 5C       MOV   X,A
    09F6: 18       POP   A
    09F7: 7C 03 50 LCALL _LCD_PrCString
    09FA: 20       POP   X
(0181) 	for (i = 0; i < bytes; i++) {
    09FB: 56 01 00 MOV   [X+1],0x0
    09FE: 56 00 00 MOV   [X+0],0x0
    0A01: 80 19    JMP   0x0A1B
(0182) 		masterReg[i] = GYRO_bRead(GYRO_ACKslave);
    0A03: 10       PUSH  X
    0A04: 50 01    MOV   A,0x1
    0A06: 7C 08 8A LCALL _GYRO_bRead
    0A09: 20       POP   X
    0A0A: 53 03    MOV   [__r0],A
    0A0C: 52 01    MOV   A,[X+1]
    0A0E: 03 F6    ADD   A,[X-10]
    0A10: 53 01    MOV   [__r3],A
    0A12: 51 03    MOV   A,[__r0]
    0A14: 3F 01    MVI   [__r3],A
(0183) 	}
    0A16: 77 01    INC   [X+1]
    0A18: 0F 00 00 ADC   [X+0],0x0
    0A1B: 52 01    MOV   A,[X+1]
    0A1D: 13 F8    SUB   A,[X-8]
    0A1F: 52 F7    MOV   A,[X-9]
    0A21: 31 80    XOR   A,0x80
    0A23: 53 00    MOV   [__rX],A
    0A25: 52 00    MOV   A,[X+0]
    0A27: 31 80    XOR   A,0x80
    0A29: 1A 00    SBB   A,[__rX]
    0A2B: CF D7    JC    0x0A03
(0184) 	
(0185) 	//slave:ack
(0186) 	//slave:data
(0187) 	//master:nack
(0188) 	masterReg[bytes] = GYRO_bRead(GYRO_NAKslave);
    0A2D: 10       PUSH  X
    0A2E: 50 00    MOV   A,0x0
    0A30: 7C 08 8A LCALL _GYRO_bRead
    0A33: 20       POP   X
    0A34: 53 03    MOV   [__r0],A
    0A36: 52 F8    MOV   A,[X-8]
    0A38: 03 F6    ADD   A,[X-10]
    0A3A: 53 01    MOV   [__r3],A
    0A3C: 51 03    MOV   A,[__r0]
    0A3E: 3F 01    MVI   [__r3],A
(0189) 	
(0190) 	//master:stop
(0191) 	LCD_Position(0,0);
    0A40: 10       PUSH  X
    0A41: 50 00    MOV   A,0x0
    0A43: 57 00    MOV   X,0x0
    0A45: 7C 04 C1 LCALL _LCD_Position
(0192) 	LCD_PrCString("                 ");
    0A48: 50 01    MOV   A,0x1
    0A4A: 08       PUSH  A
    0A4B: 50 B5    MOV   A,0xB5
    0A4D: 5C       MOV   X,A
    0A4E: 18       POP   A
    0A4F: 7C 03 50 LCALL _LCD_PrCString
(0193) 	LCD_Position(0,0);
    0A52: 50 00    MOV   A,0x0
    0A54: 57 00    MOV   X,0x0
    0A56: 7C 04 C1 LCALL _LCD_Position
(0194) 	LCD_PrCString("P");
    0A59: 50 01    MOV   A,0x1
    0A5B: 08       PUSH  A
    0A5C: 50 98    MOV   A,0x98
    0A5E: 5C       MOV   X,A
    0A5F: 18       POP   A
    0A60: 7C 03 50 LCALL _LCD_PrCString
(0195) 	GYRO_SendStop();
    0A63: 7C 09 1D LCALL _GYRO_SendStop
(0196) 	
(0197) 	LCD_Position(1,0);            // Place LCD cursor at row 1, column 0
    0A66: 57 00    MOV   X,0x0
    0A68: 50 01    MOV   A,0x1
    0A6A: 7C 04 C1 LCALL _LCD_Position
    0A6D: 20       POP   X
(0198) 	for (i = 0; i <= bytes; i++) {
    0A6E: 56 01 00 MOV   [X+1],0x0
    0A71: 56 00 00 MOV   [X+0],0x0
    0A74: 80 13    JMP   0x0A88
(0199) 		LCD_PrHexByte(masterReg[i]);        //Tulosta rxbuf
    0A76: 52 01    MOV   A,[X+1]
    0A78: 03 F6    ADD   A,[X-10]
    0A7A: 53 02    MOV   [__r1],A
    0A7C: 3E 02    MVI   A,[__r1]
    0A7E: 10       PUSH  X
    0A7F: 7C 03 72 LCALL _LCD_PrHexByte
    0A82: 20       POP   X
(0200) 	}
    0A83: 77 01    INC   [X+1]
    0A85: 0F 00 00 ADC   [X+0],0x0
    0A88: 52 F8    MOV   A,[X-8]
    0A8A: 13 01    SUB   A,[X+1]
    0A8C: 52 00    MOV   A,[X+0]
    0A8E: 31 80    XOR   A,0x80
    0A90: 53 00    MOV   [__rX],A
    0A92: 52 F7    MOV   A,[X-9]
    0A94: 31 80    XOR   A,0x80
    0A96: 1A 00    SBB   A,[__rX]
    0A98: DF DD    JNC   0x0A76
    0A9A: 38 FE    ADD   SP,0xFE
    0A9C: 20       POP   X
    0A9D: 7F       RET   
(0201) }
(0202) 
(0203) 
(0204) void main(void)
(0205) {
_main:
  i                    --> X+109
  y                    --> X+107
  str                  --> X+91
  asdf                 --> X+89
  status               --> X+88
  theStr6              --> X+76
  theStr5              --> X+64
  theStr4              --> X+52
  theStr3              --> X+40
  theStr2              --> X+28
  rxBuf                --> X+12
  theStr1              --> X+0
    0A9E: 10       PUSH  X
    0A9F: 4F       MOV   X,SP
    0AA0: 38 6F    ADD   SP,0x6F
(0206) 	BYTE status;
(0207) 	BYTE rxBuf[16];
(0208) 	int asdf;
(0209) 	char str[16];
(0210) 	int y;
(0211) 	
(0212) 	int i;
(0213) 	char theStr1[] = "Gyroskooppi";
    0AA2: 55 02 50 MOV   [__r1],0x50
    0AA5: 55 03 01 MOV   [__r0],0x1
    0AA8: 5A 01    MOV   [__r3],X
    0AAA: 10       PUSH  X
    0AAB: 55 00 00 MOV   [__rX],0x0
    0AAE: 51 03    MOV   A,[__r0]
    0AB0: 58 02    MOV   X,[__r1]
    0AB2: 08       PUSH  A
    0AB3: 28       ROMX  
    0AB4: 3F 01    MVI   [__r3],A
    0AB6: 18       POP   A
    0AB7: 75       INC   X
    0AB8: 09 00    ADC   A,0x0
    0ABA: 76 00    INC   [__rX]
    0ABC: 3C 00 0C CMP   [__rX],0xC
    0ABF: BF F2    JNZ   0x0AB2
    0AC1: 20       POP   X
(0214) 	char theStr2[] = "Eteen!     ";
    0AC2: 55 02 5C MOV   [__r1],0x5C
    0AC5: 55 03 01 MOV   [__r0],0x1
    0AC8: 5A 01    MOV   [__r3],X
    0ACA: 06 01 1C ADD   [__r3],0x1C
    0ACD: 10       PUSH  X
    0ACE: 55 00 00 MOV   [__rX],0x0
    0AD1: 51 03    MOV   A,[__r0]
    0AD3: 58 02    MOV   X,[__r1]
    0AD5: 08       PUSH  A
    0AD6: 28       ROMX  
    0AD7: 3F 01    MVI   [__r3],A
    0AD9: 18       POP   A
    0ADA: 75       INC   X
    0ADB: 09 00    ADC   A,0x0
    0ADD: 76 00    INC   [__rX]
    0ADF: 3C 00 0C CMP   [__rX],0xC
    0AE2: BF F2    JNZ   0x0AD5
    0AE4: 20       POP   X
(0215) 	char theStr3[] = "Taakse!    ";
    0AE5: 55 02 68 MOV   [__r1],0x68
    0AE8: 55 03 01 MOV   [__r0],0x1
    0AEB: 5A 01    MOV   [__r3],X
    0AED: 06 01 28 ADD   [__r3],0x28
    0AF0: 10       PUSH  X
    0AF1: 55 00 00 MOV   [__rX],0x0
    0AF4: 51 03    MOV   A,[__r0]
    0AF6: 58 02    MOV   X,[__r1]
    0AF8: 08       PUSH  A
    0AF9: 28       ROMX  
    0AFA: 3F 01    MVI   [__r3],A
    0AFC: 18       POP   A
    0AFD: 75       INC   X
    0AFE: 09 00    ADC   A,0x0
    0B00: 76 00    INC   [__rX]
    0B02: 3C 00 0C CMP   [__rX],0xC
    0B05: BF F2    JNZ   0x0AF8
    0B07: 20       POP   X
(0216) 	char theStr4[] = "SEIS!      ";
    0B08: 55 02 74 MOV   [__r1],0x74
    0B0B: 55 03 01 MOV   [__r0],0x1
    0B0E: 5A 01    MOV   [__r3],X
    0B10: 06 01 34 ADD   [__r3],0x34
    0B13: 10       PUSH  X
    0B14: 55 00 00 MOV   [__rX],0x0
    0B17: 51 03    MOV   A,[__r0]
    0B19: 58 02    MOV   X,[__r1]
    0B1B: 08       PUSH  A
    0B1C: 28       ROMX  
    0B1D: 3F 01    MVI   [__r3],A
    0B1F: 18       POP   A
    0B20: 75       INC   X
    0B21: 09 00    ADC   A,0x0
    0B23: 76 00    INC   [__rX]
    0B25: 3C 00 0C CMP   [__rX],0xC
    0B28: BF F2    JNZ   0x0B1B
    0B2A: 20       POP   X
(0217) 	char theStr5[] = "Oikealle!  ";
    0B2B: 55 02 80 MOV   [__r1],0x80
    0B2E: 55 03 01 MOV   [__r0],0x1
    0B31: 5A 01    MOV   [__r3],X
    0B33: 06 01 40 ADD   [__r3],0x40
    0B36: 10       PUSH  X
    0B37: 55 00 00 MOV   [__rX],0x0
    0B3A: 51 03    MOV   A,[__r0]
    0B3C: 58 02    MOV   X,[__r1]
    0B3E: 08       PUSH  A
    0B3F: 28       ROMX  
    0B40: 3F 01    MVI   [__r3],A
    0B42: 18       POP   A
    0B43: 75       INC   X
    0B44: 09 00    ADC   A,0x0
    0B46: 76 00    INC   [__rX]
    0B48: 3C 00 0C CMP   [__rX],0xC
    0B4B: BF F2    JNZ   0x0B3E
    0B4D: 20       POP   X
(0218) 	char theStr6[] = "Vasemmalle!";	
    0B4E: 55 02 8C MOV   [__r1],0x8C
    0B51: 55 03 01 MOV   [__r0],0x1
    0B54: 5A 01    MOV   [__r3],X
    0B56: 06 01 4C ADD   [__r3],0x4C
    0B59: 10       PUSH  X
    0B5A: 55 00 00 MOV   [__rX],0x0
    0B5D: 51 03    MOV   A,[__r0]
    0B5F: 58 02    MOV   X,[__r1]
    0B61: 08       PUSH  A
    0B62: 28       ROMX  
    0B63: 3F 01    MVI   [__r3],A
    0B65: 18       POP   A
    0B66: 75       INC   X
    0B67: 09 00    ADC   A,0x0
    0B69: 76 00    INC   [__rX]
    0B6B: 3C 00 0C CMP   [__rX],0xC
    0B6E: BF F2    JNZ   0x0B61
(0219) 	
(0220) 	LCD_Start();
    0B70: 7C 04 51 LCALL _LCD_Init|LCD_Start|_LCD_Start
(0221) 	LCD_Position(0,3);
    0B73: 57 03    MOV   X,0x3
    0B75: 50 00    MOV   A,0x0
    0B77: 7C 04 C1 LCALL _LCD_Position
    0B7A: 20       POP   X
(0222) 	LCD_PrString(theStr1);
    0B7B: 10       PUSH  X
    0B7C: 51 03    MOV   A,[__r0]
    0B7E: 7C 03 8C LCALL _LCD_PrString
    0B81: 20       POP   X
(0223) 	
(0224) 	readSlave(0x48, 0x0, 1, rxBuf);
    0B82: 5A 02    MOV   [__r1],X
    0B84: 06 02 0C ADD   [__r1],0xC
    0B87: 51 03    MOV   A,[__r0]
    0B89: 08       PUSH  A
    0B8A: 51 02    MOV   A,[__r1]
    0B8C: 08       PUSH  A
    0B8D: 50 00    MOV   A,0x0
    0B8F: 08       PUSH  A
    0B90: 50 01    MOV   A,0x1
    0B92: 08       PUSH  A
    0B93: 50 00    MOV   A,0x0
    0B95: 08       PUSH  A
    0B96: 08       PUSH  A
    0B97: 08       PUSH  A
    0B98: 50 48    MOV   A,0x48
    0B9A: 08       PUSH  A
    0B9B: 9D B3    CALL  __UserModules_end|_readSlave|__text_start|_readSlave
    0B9D: 38 F8    ADD   SP,0xF8
(0225) 	//readSlave(MPU6050_ADDRESS, 0x75, 2, rxBuf);
(0226) 	
(0227) 	/*
(0228) 	LCD_Position(0,0);
(0229) 	LCD_PrCString("                 ");
(0230) 	
(0231) 	LCD_Position(0,0);
(0232) 	LCD_PrCString("BeforeGyro");
(0233) 	
(0234) 	//GYRO_Start();
(0235) 	GYRO_fSendStart(0x48,GYRO_WRITE);
(0236) 	
(0237) 	LCD_Position(0,0);
(0238) 	LCD_PrCString("                 ");
(0239) 	LCD_Position(0,0);
(0240) 	LCD_PrCString("WriteSequence");
(0241) 	
(0242) 	//rxBuf[0] = MPU6050_RA_WHO_AM_I;
(0243) 	
(0244) 	//GYRO_bWriteBytes(0x69,rxBuf,1,GYRO_NoStop);
(0245) 	//GYRO_fWrite(*rxBuf);
(0246) 	
(0247) 	LCD_Position(0,0);
(0248) 	LCD_PrCString("                 ");
(0249) 	LCD_Position(0,0);
(0250) 	LCD_PrCString("InGyro");
(0251) 	
(0252) 	status = GYRO_fReadBytes(0x69,rxBuf,2,GYRO_CompleteXfer);
(0253) 	//GYRO_bRead(GYRO_NAKslave);
(0254) 	
(0255) 	LCD_Position(0,0);
(0256) 	LCD_PrCString("                 ");
(0257) 	LCD_Position(5,0);
(0258) 	//LCD_PrCString("InGyroAgain");
(0259) 	LCD_PrHexByte(status);
(0260) 	
(0261) 	//GYRO_SendStop();
(0262) 	
(0263) 	/*
(0264) 	for (i = 0; i < 16; i++) {
(0265) 		if (i > 0) cprintf(":");
(0266) 		cprintf("%02X", rxBuf[i]);
(0267) 	}*/
(0268) 	
(0269) 	LCD_Position(0,0);
    0B9F: 10       PUSH  X
    0BA0: 50 00    MOV   A,0x0
    0BA2: 57 00    MOV   X,0x0
    0BA4: 7C 04 C1 LCALL _LCD_Position
(0270) 	LCD_PrCString("                 ");
    0BA7: 50 01    MOV   A,0x1
    0BA9: 08       PUSH  A
    0BAA: 50 B5    MOV   A,0xB5
    0BAC: 5C       MOV   X,A
    0BAD: 18       POP   A
    0BAE: 7C 03 50 LCALL _LCD_PrCString
    0BB1: 20       POP   X
(0271) 	/*
(0272) 	for (i = 0; i < 1000; i++) {
(0273) 		LCD_Position(0,0);
(0274) 		LCD_PrCString("AfterGyro");
(0275) 		//LCD_PrHexInt(i);
(0276) 	}*/
(0277) 	
(0278) 	/*
(0279) 	//LCD_Start();                  // LCD käynttöönotto
(0280) 	LCD_Position(1,0);            // Place LCD cursor at row 0, col 5.
(0281) 	for (i = 0; i < 8; i++) {
(0282) 		LCD_PrHexByte(rxBuf[i]);        //Tulosta rxbuf
(0283) 	}
(0284) 	//LCD_PrString(str);
(0285) 	/*
(0286) 	
(0287) 	//Ohjaimien starttaukset..
(0288) 	VME_Start();
(0289) 	OME_Start();
(0290) 	VMT_Start();
(0291) 	OMT_Start();
(0292) 	
(0293) 	//Eteenpäin
(0294) 	VME_Switch(1);         // Turn on VasenMoottoriEteen
(0295) 	OME_Switch(1);         // Turn on OikeaMoottoriEteen
(0296) 	
(0297) 	LCD_Position(1,3);
(0298) 	LCD_PrString(theStr2);         //Tulosta teksti 2
(0299) 	
(0300) 	for (i=0;i<30000;i++);
(0301) 	VME_Switch(0);		  // Turn off VasenMoottoriEteen
(0302) 	OME_Switch(0); 		  // Turn off OikeaMoottoriEteen
(0303) 	
(0304) 	for (i=0;i<30000;i++); //Tauko välissä
(0305) 	LCD_Position(1,3);
(0306) 	LCD_PrString(theStr4);         //Tulosta teksti 4
(0307) 	
(0308) 	//Taaksepäin
(0309) 	VMT_Switch(1);         // Turn on VasenMoottoriTaakse
(0310) 	OMT_Switch(1);         // Turn on OikeaMoottoriTaakse
(0311) 	
(0312) 	LCD_Position(1,3);
(0313) 	LCD_PrString(theStr3);         //Tulosta teksti 3
(0314) 	
(0315) 	for (i=0;i<30000;i++);
(0316) 	VMT_Switch(0);		   // Turn off VasenMoottoriTaakse
(0317) 	OMT_Switch(0);		   // Turn off OikeaMoottoriTaakse
(0318) 
(0319) 	LCD_Position(1,3);
(0320) 	LCD_PrString(theStr4);         //Tulosta teksti 4
(0321) 	
(0322) 	//Käännökset
(0323) 		
(0324) 	for (i=0;i<30000;i++);
(0325) 	//Oikealle		//Varmuudeksi turn off ei käytettäville suunnille
(0326) 	OME_Switch(0); 		  // Turn off OikeaMoottoriEteen
(0327) 	VMT_Switch(0);		   // Turn off VasenMoottoriTaakse
(0328) 	VME_Switch(1);		  // Turn on VasenMoottoriEteen
(0329) 	OMT_Switch(1);		   // Turn on OikeaMoottoriTaakse
(0330) 	
(0331) 	LCD_Position(1,3);
(0332) 	LCD_PrString(theStr5);         //Tulosta teksti 5
(0333) 	
(0334) 		//Ajastus 90° käännökseen, kokeilemalla...
(0335) 	for (i=0;i<30000;i++);
(0336) 	VME_Switch(0);		  // Turn off VasenMoottoriEteen
(0337) 	OMT_Switch(0);		   // Turn off OikeaMoottoriTaakse
(0338) 	
(0339) 	LCD_Position(1,3);
(0340) 	LCD_PrString(theStr4);         //Tulosta teksti 4
(0341) 	
(0342) 	for (i=0;i<30000;i++);
(0343) 	//Vasemmalle  	//Varmuudeksi turn off ei käytettäville suunnille
(0344) 	VME_Switch(0);		  // Turn off VasenMoottoriEteen
(0345) 	OMT_Switch(0);		   // Turn off OikeaMoottoriTaakse
(0346) 	OME_Switch(1); 		  // Turn on OikeaMoottoriEteen
(0347) 	VMT_Switch(1);		   // Turn on VasenMoottoriTaakse
(0348) 	
(0349) 	LCD_Position(1,3);
(0350) 	LCD_PrString(theStr6);         //Tulosta teksti 6
(0351) 	
(0352) 		//Ajastus 90° käännökseen, kokeilemalla...
(0353) 	for (i=0;i<30000;i++);
(0354) 	OME_Switch(0); 		  // Turn off OikeaMoottoriEteen
(0355) 	VMT_Switch(0);		   // Turn off VasenMoottoriTaakse
(0356) 	
(0357) 	LCD_Position(1,3);
(0358) 	LCD_PrString(theStr4);         //Tulosta teksti 4
(0359) 	
(0360) 	*/
(0361) 	
(0362) 
(0363) 	
(0364) 
(0365) 
(0366) 
(0367) 	//ÄLÄ POISTA!!!
(0368) 	while (1);		//ESTÄÄ MAIN:ISTA POISTUMISEN TÄRKEÄ!!! ÄLÄ POISTA!!!
    0BB2: 8F FF    JMP   0x0BB2
(0369) 	//ÄLÄ POISTA!!!
(0370) }    0BB4: 38 91    ADD   SP,0x91
    0BB6: 20       POP   X
    0BB7: 8F FF    JMP   0x0BB7
