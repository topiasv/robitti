 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: GYRO.asm
 0000           ;;   Version: 2.00, Updated on 2013/5/19 at 10:43:43
 0000           ;;  Generated by PSoC Designer 5.4.2946
 0000           ;;
 0000           ;;  DESCRIPTION: I2Cm User Module software implementation file.
 0000           ;;
 0000           ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
 0000           ;;        arguments and observe the associated "Registers are volatile" policy.
 0000           ;;        This means it is the caller's responsibility to preserve any values
 0000           ;;        in the X and A registers that are still needed after the API functions
 0000           ;;        returns. For Large Memory Model devices it is also the caller's 
 0000           ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
 0000           ;;        MVW_PP registers. Even though some of these registers may not be modified
 0000           ;;        now, there is no guarantee that will remain the case in future releases.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           SYSTEM_STACK_PAGE: equ 0   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0000           SYSTEM_LARGE_MEMORY_MODEL: equ 0   
 0001           SYSTEM_SMALL_MEMORY_MODEL: equ 1   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C27000.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0002           GYRO_delayqtr:     equ   2            ; Define delays for proper timing at 24 MHz
 0005           GYRO_delayhalf:    equ   5
 000C           GYRO_delay3qtr:    equ   12
 0000           
 0000           ;12 MHz
 0000           ;GYRO_delayqtr:    equ   3
 0000           ;GYRO_delayhalf:   equ   3
 0000           ;GYRO_delay3qtr:   equ   3
 0000           
 0002           GYRO_SDA_pin:      equ   2h ; bit number of for SDA
 0001           GYRO_SCL_pin:      equ   1h ; bit number of for SCL
 0001           GYRO_I2CPortNum:   equ   1h     ; Port number to use for I2C Both pins will be on this port
 0000           
 0001           GYRO_DriveMode2:   equ   1
 0000           
 0000           ;-----------------
 0000           ; Bank 0
 0000           ;-----------------
 0004           GYRO_I2CPRTDR:     equ   PRT1DR  ; Port number to use for I2C Both pins will be on this port
 0000           
                IF(GYRO_DriveMode2)
 0007           GYRO_I2CPRTDM2:                        equ   PRT1DM2  ; Port number to use for I2C Both pins will be on this port
                ENDIF
                
                ;-----------------
                ; Bank 1
                ;-----------------
                
 0004           GYRO_I2CPRTDM0:                        equ   PRT1DM0  ; Port number to use for I2C Both pins will be on this port
 0005           GYRO_I2CPRTDM1:                        equ   PRT1DM1  ; Port number to use for I2C Both pins will be on this port
 0000           
 0000           ;-----------------
 0000           ; Misc
 0000           ;-----------------
 0001           GYRO_READ:           equ  0x01 ; Set the R/W flag after the slave address.
 0000           GYRO_WRITE:          equ  0x00 ; Clear the R/W flag after the slave address.
 0000           GYRO_XFER_ERROR:     equ  0x00 ; Slave did not ACK
 0001           GYRO_XFER_COMPLETE:  equ  0x01 ; Returned if Slave did ACK
 0000           
 0000           GYRO_CompleteXfer:   equ  0x00 ; Perform a complete I2C transfer
 0001           GYRO_RepStart:       equ  0x01 ; Perform a complete transfer with a Repeat Start
 0002           GYRO_NoStop:         equ  0x02 ; Perform a complete transfer, but leave off the stop.
 0000           
 0000           GYRO_NAKslave:       equ  0x00 ; NAK the slave after a read
 0001           GYRO_ACKslave:       equ  0x01 ; ACK the slave after a read
 0000           
 0000           ; end of file GYRO.inc
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global Symbols
 0000           ;-----------------------------------------------
 0000           
                export   GYRO_Start
                export  _GYRO_Start
                export   GYRO_Stop
                export  _GYRO_Stop
                export   GYRO_fSendRepeatStart
                export  _GYRO_fSendRepeatStart
                export   GYRO_fSendStart
                export  _GYRO_fSendStart
                export   GYRO_SendStop
                export  _GYRO_SendStop
                ; export the following 3 functions for C-implementations large or small mem models 
                export  _GYRO_fReadBytes
                export  _GYRO_bWriteBytes
                export  _GYRO_bWriteCBytes
                
                export   GYRO_fWrite
                export  _GYRO_fWrite
                
                export   GYRO_bRead
                export  _GYRO_bRead
                
                IF SYSTEM_SMALL_MEMORY_MODEL
                
                export   GYRO_fReadBytes
                export   GYRO_bWriteBytes
                export   GYRO_bWriteCBytes
                
                ENDIF    ;SYSTEM_SMALL_MEMORY_MODEL
                
                ;-------------------------------------------------------------------
                ;  Declare the varables for both the assembler and C compiler.
                ;
                ;-------------------------------------------------------------------
                export  GYRO_bStatus
                export _GYRO_bStatus
                export  GYRO_bData
                export _GYRO_bData
                export  GYRO_bAddr
                export _GYRO_bAddr
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                area testi_RAM(RAM, REL, CON)
                
 0000           _GYRO_bStatus:
 0000            GYRO_bStatus:                         blk   1  ; Status during transfers
 0001           _GYRO_bData:
 0001            GYRO_bData:                           blk   1  ; Data transfered
 0002           _GYRO_bXferCnt:
 0002            GYRO_bXferCnt:                                  ; Reused variable for counting transfered
 0002           _GYRO_bAddr:                                     ; Bytes
 0002            GYRO_bAddr:                           blk   1  ; Slave Address
 0003           _GYRO_bit_count:
 0003            GYRO_bit_count:                       blk   1  ; Bit counter
 0004           
                AREA UserModules (ROM, REL)
                ;-----------------------------------------------
                ;  EQUATES
                ;-----------------------------------------------
 0001           GYRO_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
 0010           GYRO_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
 0000           
 0000           .SECTION
 0000           ;-----------------------------------------------------------------------------
 0000           ;  FUNCTION NAME: GYRO_Start
 0000           ;
 0000           ;  DESCRIPTION:
 0000           ;
 0000           ;-----------------------------------------------------------------------------
 0000           ;
 0000           ;  ARGUMENTS: none
 0000           ;
 0000           ;  RETURNS: none
 0000           ;
 0000           ;  SIDE EFFECTS:
 0000           ;    The A and X registers may be modified by this or future implementations
 0000           ;    of this function.  The same is true for all RAM page pointer registers in
 0000           ;    the Large Memory Model.  When necessary, it is the calling function's
 0000           ;    responsibility to perserve their values across calls to fastcall16 
 0000           ;    functions.
 0000           ;          
 0000           ;    Currently only the page pointer registers listed below are modified: 
 0000           ;          CUR_PP
 0000           ;
 0000           ;    Resets all pins on the I2C master port to the pulldown drive
 0000           ;
 0000           ;  THEORY of OPERATION or PROCEDURE:
 0000           ;
 0000           ;-----------------------------------------------------------------------------
 0000            GYRO_Start:
 0000           _GYRO_Start:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_DriveMode_1_SHADE
                   ENDIF
                    ; Set pins to drive mode high Z
 0000 2E0003        or   [Port_1_DriveMode_1_SHADE],GYRO_SDA_pin|GYRO_SCL_pin
 0003 2600FC        and  [Port_1_DriveMode_0_SHADE],~(GYRO_SDA_pin|GYRO_SCL_pin)
 0006           
                IF(GYRO_DriveMode2)            
 0006 2600FC        and  [Port_1_DriveMode_2_SHADE],~(GYRO_SDA_pin|GYRO_SCL_pin)
 0009 5100          mov  A,[Port_1_DriveMode_2_SHADE]
 000B 6007          mov  reg[GYRO_I2CPRTDM2],A
                ENDIF
                
 000D 7110          or    F, FLAG_XIO_MASK
 000F 5100          mov  A,[Port_1_DriveMode_1_SHADE]
 0011 6005          mov  reg[GYRO_I2CPRTDM1],A
 0013 5100          mov  A,[Port_1_DriveMode_0_SHADE]
 0015 6004          mov  reg[GYRO_I2CPRTDM0],A
 0017 70EF          and   F, ~FLAG_XIO_MASK
 0019                                                                ; Set both pins, low so that only the port
 0019                                                                ; mode has to be changed from a 0 to a 1
 0019 2600FC        and  [Port_1_Data_SHADE],~(GYRO_SDA_pin|GYRO_SCL_pin)
 001C 5100          mov  A,[Port_1_Data_SHADE]
 001E 6004          mov  reg[GYRO_I2CPRTDR],A
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0020 7F            ret
 0021           .ENDSECTION
 0021           
 0021           .SECTION
 0021           ;-----------------------------------------------------------------------------
 0021           ;  FUNCTION NAME: GYRO_Stop
 0021           ;
 0021           ;  DESCRIPTION:
 0021           ;    This function performs no operation and is used for future
 0021           ;    module compatibility.
 0021           ;
 0021           ;-----------------------------------------------------------------------------
 0021           ;
 0021           ;  ARGUMENTS: none
 0021           ;
 0021           ;  RETURNS: none
 0021           ;
 0021           ;  SIDE EFFECTS:
 0021           ;    The A and X registers may be modified by this or future implementations
 0021           ;    of this function.  The same is true for all RAM page pointer registers in
 0021           ;    the Large Memory Model.  When necessary, it is the calling function's
 0021           ;    responsibility to perserve their values across calls to fastcall16 
 0021           ;    functions.
 0021           ;          
 0021            GYRO_Stop:
 0021           _GYRO_Stop:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0021 7F            ret
 0022           .ENDSECTION
 0022           
 0022           .SECTION
 0022           ;-----------------------------------------------------------------------------
 0022           ;  FUNCTION NAME: GYRO_fReadBytes
 0022           ;
 0022           ;  DESCRIPTION:
 0022           ;
 0022           ;-----------------------------------------------------------------------------
 0022           ;
 0022           ;  ARGUMENTS:
 0022           ;  [SP-3]=> Address of slave
 0022           ;  [SP-4]=> LSB of Array address to put data in.
 0022           ;  [SP-5]=> MSB of Array address to put data in.
 0022           ;  [SP-6]=> Count of bytes to read.
 0022           ;  [SP-7]=> Mode flags that allow the programmer to set flags
 0022           ;           to determine if:
 0022           ;             0x01 => Use RepeatStart instead of Start
 0022           ;             0x02 => Don't send Stop
 0022           ;
 0022           ;  RETURNS:
 0022           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 0022           ;
 0022           ;  SIDE EFFECTS:
 0022           ;    The A and X registers may be modified by this or future implementations
 0022           ;    of this function.  The same is true for all RAM page pointer registers in
 0022           ;    the Large Memory Model.  When necessary, it is the calling function's
 0022           ;    responsibility to perserve their values across calls to fastcall16 
 0022           ;    functions.
 0022           ;          
 0022           ;    Currently only the page pointer registers listed below are modified: 
 0022           ;          CUR_PP
 0022           ;                  IDX_PP
 0022           ;
 FFFFFFFD           SlaveAdr:     equ  -3
 FFFFFFFC           RxArrayLSB:   equ  -4
 FFFFFFFB           RxArrayMSB:   equ  -5
 FFFFFFFA           RxByteCount:  equ  -6
 FFFFFFF9           RxMode:       equ  -7
 0022           
 0022           _GYRO_fReadBytes:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0022 4F            mov   X, SP
 0023               
 0023 52FD          mov   A, [X+SlaveAdr]
 0025 64            asl   A                                                ; Shift address to the left to make
 0026                                                                      ; a complete byte with the R/W bit.
 0026 2901          or    A,0x01                                           ; OR the address with the Read bit.
 0028 550000        mov   [GYRO_bStatus],0x00                              ; Clear all flags
 002B 48F901        tst   [x+RxMode],GYRO_RepStart
 002E B005          jnz   DoRestartRx
 0030 91AE          call  I2C_DoStart                                      ; Send a start and address.
 0032 8003          jmp   CheckRxAck
 0034           DoRestartRx:
 0034 9177          call  I2C_DoRepeatStart                                ; Send a repeat start and address.
 0036           CheckRxAck:                                                ; Test to see if Slave ACKed
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0036 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 0039 A020          jz    End_RD_Loop
 003B                                                                      ; Send ACK until last byte
 003B 2E0010        or    [GYRO_bStatus],GYRO_SEND_ACK                     ; Send ACK until last byte
 003E           RD_Loop:                                                   ; Loop through bytes
 003E 10            push  x                                                ; Save X for later
 003F 7BFA          dec   [x+RxByteCount]                                  ; Decrement data counter
 0041 B004          jnz   I2C_READ
 0043 2600EF        and   [GYRO_bStatus],~GYRO_SEND_ACK                    ; If last Byte, don't ACK
 0046           I2C_READ:
 0046 9249          call  GYRO_read                                        ; Read a byte
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0048 20            pop   x                                                ; Restore x
 0049 10            push  x
 004A 52FC          mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
 004C 08            push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                IF SYSTEM_LARGE_MEMORY_MODEL
                    mov   A,[x+RxArrayMSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
                ENDIF
 004D 20            pop   x                                                ; restores the index pointer pushed a few lines above
 004E 5101          mov   a,[GYRO_bData]                                   ; Save data in data array
 0050 5400          mov   [x],a                                            ; Put read data in array
 0052 20            pop   x                                                ; Restore the original pointer (for the subrtn params)
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
 0053 77FC          inc   [x+RxArrayLSB]                                   ; Advance data pointer
 0055 48FAFF        tst   [x+RxByteCount],FFh                              ; Decrement data counter
 0058 BFE5          jnz   RD_Loop                                          ; Not finished, do another byte.
 005A           End_RD_Loop:                                               ; Endloop
 005A 48F902        tst   [x+RxMode],GYRO_NoStop
 005D B003          jnz   SkipRxStop
 005F 92B6          call  GYRO_SendStop
 0061           SkipRxStop:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0061 5000          mov   a,GYRO_XFER_ERROR                                ; Clear return value until we test if slave ACKed
 0063 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed                  ; Test to see if Slave ACKed
 0066 A003          jz    End_ReadBytes
 0068 5001          mov   a,GYRO_XFER_COMPLETE                             ; Return ACKed True
 006A           End_ReadBytes:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 006A 7F            ret
 006B           .ENDSECTION
 006B           
                IF SYSTEM_SMALL_MEMORY_MODEL
 006B           .SECTION
 006B           ;-----------------------------------------------------------------------------
 006B           ;  FUNCTION NAME: GYRO_fReadBytes
 006B           ;
 006B           ;  DESCRIPTION:
 006B           ;
 006B           ;-----------------------------------------------------------------------------
 006B           ;
 006B           ;  ARGUMENTS:
 006B           ;      A => Address of slave
 006B           ;      X => Pointer to other arguments.
 006B           ;    [x] => LSB of Array address to put data in.
 006B           ;  [X-1] => MSB of Array address to put data in (ignorned)
 006B           ;  [X-2] => Count of bytes to read.
 006B           ;  [X-3] => Mode flags that allow the programmer to set flags
 006B           ;           to determine if:
 006B           ;             0x01 => Use RepeatStart instead of Start
 006B           ;             0x02 => Don't send Stop
 006B           ;
 006B           ;  RETURNS:
 006B           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 006B           ;
 006B           ;  SIDE EFFECTS:
 006B           ;    The A and X registers may be modified by this or future implementations
 006B           ;    of this function.  The same is true for all RAM page pointer registers in
 006B           ;    the Large Memory Model.  When necessary, it is the calling function's
 006B           ;    responsibility to perserve their values across calls to fastcall16 
 006B           ;    functions.
 006B           ;          
 0000           RxArray_X:      equ   0
 FFFFFFFE           RxByteCount_X:  equ  -2
 FFFFFFFD           RxMode_X:       equ  -3
 006B           
 006B            GYRO_fReadBytes:		                 
 006B 64            asl   A                                            ; Shift address to the left to make
 006C                                                                  ; a complete byte with the R/W bit.
 006C 2901          or    A,0x01                                       ; OR the address with the Read bit.
 006E 550000        mov   [GYRO_bStatus],0x00                              ; Clear all flags
 0071 48FD01        tst   [x+RxMode_X],GYRO_RepStart
 0074 B005          jnz   DoRestartRxSmm
 0076 9168          call  I2C_DoStart                                      ; Send a start and address.
 0078 8003          jmp   CheckRxAckSmm
 007A           DoRestartRxSmm:
 007A 9131          call  I2C_DoRepeatStart                                ; Send a repeat start and address.
 007C           CheckRxAckSmm:                                                ; Test to see if Slave ACKed
 007C 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 007F A01E          jz    End_RD_LoopSmm
 0081                                                                      ; Send ACK until last byte
 0081 2E0010        or    [GYRO_bStatus],GYRO_SEND_ACK                     ; Send ACK until last byte
 0084           RD_LoopSmm:                                                   ; Loop through bytes
 0084 10            push  x                                                ; Save X for later
 0085 7BFE          dec   [x+RxByteCount_X]                                ; Decrement data counter
 0087 B004          jnz   I2C_READSmm
 0089 2600EF        and   [GYRO_bStatus],~GYRO_SEND_ACK                    ; If last Byte, don't ACK
 008C           I2C_READSmm:
 008C 9203          call  GYRO_read                                        ; Read a byte
 008E 20            pop   x                                                ; Restore x
 008F 10            push  x                                                ; Store x
 0090 5900          mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
 0092 5101          mov   a,[GYRO_bData]                                   ; Save data in data array
 0094 5400          mov   [x+RxArray_X],a                                  ; Put read data in array
 0096 20            pop   x                                                ; Restore the original pointer
 0097 7700          inc   [x+RxArray_X]                                    ; Advance data pointer
 0099 48FEFF        tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
 009C BFE7          jnz   RD_LoopSmm                                       ; Not finished, do another byte.
 009E           End_RD_LoopSmm:                                            ; Endloop
 009E 48FD02        tst   [x+RxMode_X],GYRO_NoStop
 00A1 B003          jnz   SkipRxStopSmm
 00A3 9272          call  GYRO_SendStop
 00A5           SkipRxStopSmm:
 00A5 5000          mov   a,GYRO_XFER_ERROR                                ; Clear return value until we test if slave ACKed
 00A7 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed                  ; Test to see if Slave ACKed
 00AA A003          jz    End_ReadBytesSmm
 00AC 5001          mov   a,GYRO_XFER_COMPLETE                             ; Return ACKed True
 00AE           End_ReadBytesSmm:
 00AE 7F            ret
 00AF           .ENDSECTION
                ENDIF
                
 00AF           .SECTION
 00AF           ;-----------------------------------------------------------------------------
 00AF           ;  FUNCTION NAME: GYRO_bWriteBytes
 00AF           ;
 00AF           ;  DESCRIPTION:
 00AF           ;    Write multiple data bits to slave device.
 00AF           ;
 00AF           ;-----------------------------------------------------------------------------
 00AF           ;
 00AF           ;  ARGUMENTS:
 00AF           ; [SP-3] => Address of slave
 00AF           ; [SP-4] => LSB of Array address to put data in.
 00AF           ; [SP-5] => MSB of Array address to put data in.
 00AF           ; [SP-6] => Count of bytes to write.
 00AF           ; [SP-7] => Mode flags that allow the programmer to set flags
 00AF           ;           to determine if:
 00AF           ;              0x01 => Use RePeatStart instead of Start
 00AF           ;              0x02 => Don't send Stop
 00AF           ;
 00AF           ;
 00AF           ;  RETURNS:
 00AF           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 00AF           ;
 00AF           ;  SIDE EFFECTS:
 00AF           ;    The A and X registers may be modified by this or future implementations
 00AF           ;    of this function.  The same is true for all RAM page pointer registers in
 00AF           ;    the Large Memory Model.  When necessary, it is the calling function's
 00AF           ;    responsibility to perserve their values across calls to fastcall16 
 00AF           ;    functions.
 00AF           ;          
 00AF           ;    Currently only the page pointer registers listed below are modified: 
 00AF           ;          CUR_PP
 00AF           ;                  IDX_PP
 00AF           ;
 FFFFFFFD           TxSlaveAdr:   equ  -3
 FFFFFFFC           TxArrayLSB:   equ  -4
 FFFFFFFB           TxArrayMSB:   equ  -5
 FFFFFFFA           TxByteCount:  equ  -6
 FFFFFFF9           TxMode:       equ  -7
 00AF           
 00AF           _GYRO_bWriteBytes:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 00AF 4F            mov   X, SP
 00B0               
 00B0 52FD          mov   A,[x+TxSlaveAdr]
 00B2 64            asl   A                                           ; Shift address to the left to make
 00B3                                                                 ; a complete byte with the R/W bit.
 00B3                                                                 ; The ASL takes care of clearing bit 0.
 00B3 550000        mov   [GYRO_bStatus],0x00                         ; Clear all flags
 00B6           
 00B6           
 00B6 48F901        tst   [x+TxMode],GYRO_RepStart
 00B9 B005          jnz   DoRestartTx
 00BB 9123          call  I2C_DoStart                                 ; Send a start and address.
 00BD 8003          jmp   DoTxAck
 00BF           DoRestartTx:
 00BF 90EC          call  I2C_DoRepeatStart                           ; Send a repeat start and address.
 00C1           DoTxAck:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 00C1 550200        mov   [GYRO_bXferCnt],0x00                        ; Zero out byte count first
 00C4 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed             ; Test to see if Slave ACKed
 00C7 A01A          jz    End_WR_Loop
 00C9           WR_Loop:                                              ; Loop through bytes
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
 00C9 10            push  x                                           ; Save X for later
 00CA 52FC          mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
 00CC 08                push  a                                           ; save the address on the stack (will pop it back into X)
                IF SYSTEM_LARGE_MEMORY_MODEL
                    mov   a,[x+TxArrayMSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], a
                   ENDIF
                ENDIF
 00CD 20            pop   x                                           ; this recovers the address previously stoed on teh stack
 00CE 5200          mov   a,[x]                                       ; Get data pointer to by X
 00D0 5301          mov   [GYRO_bData],a                              ; Save data in temp location
 00D2 9136          call  GYRO_write                                  ; Write the data
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
 00D4 20            pop   x
 00D5 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 00D8 A00E          jz    DoWBstop                                    ; Stop transfer if NAKed
 00DA 7602          inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
 00DC 77FC          inc   [x+TxArrayLSB]                              ; Advance pointer
 00DE 7BFA          dec   [x+TxByteCount]                             ; Decrement byte counter
 00E0 BFE8          jnz   WR_Loop                                     ; Not finished, do another byte.
 00E2           End_WR_Loop:                                          ; Endloop
 00E2 48F902        tst   [x+TxMode],GYRO_NoStop
 00E5 B003          jnz   SkipTxStop
 00E7           DoWBstop:
 00E7 922E          call  GYRO_SendStop
 00E9           SkipTxStop:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 00E9 5102          mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
 00EB           End_WriteBytes:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00EB 7F            ret
 00EC           .ENDSECTION
 00EC           
 00EC           
                IF SYSTEM_SMALL_MEMORY_MODEL
 00EC           .SECTION
 00EC           ;-----------------------------------------------------------------------------
 00EC           ;  FUNCTION NAME: GYRO_bWriteBytes
 00EC           ;
 00EC           ;  DESCRIPTION:
 00EC           ;    Write multiple data bits to slave device.
 00EC           ;
 00EC           ;-----------------------------------------------------------------------------
 00EC           ;
 00EC           ;  ARGUMENTS:
 00EC           ;     A => Address of slave
 00EC           ;     X => Pointer to other arguments.
 00EC           ;   [x] => LSB of Array address to put data in.
 00EC           ; [X-1] => MSB of Array address to put data in (ignorned)
 00EC           ; [X-2] => Count of bytes to write.
 00EC           ; [X-3] => Mode flags that allow the programmer to set flags
 00EC           ;          to determine if:
 00EC           ;              0x01 => Use RePeatStart instead of Start
 00EC           ;              0x02 => Don't send Stop
 00EC           ;
 00EC           ;
 00EC           ;  RETURNS:
 00EC           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 00EC           ;
 00EC           ;  SIDE EFFECTS:
 00EC           ;    The A and X registers may be modified by this or future implementations
 00EC           ;    of this function.  The same is true for all RAM page pointer registers in
 00EC           ;    the Large Memory Model.  When necessary, it is the calling function's
 00EC           ;    responsibility to perserve their values across calls to fastcall16 
 00EC           ;    functions.
 00EC           ;          
 0000           TxArray_X:      equ   0
 FFFFFFFE           TxByteCount_X:  equ  -2
 FFFFFFFD           TxMode_X:       equ  -3
 00EC           
 00EC            GYRO_bWriteBytes:						       
 00EC 64            asl   A                                           ; Shift address to the left to make
 00ED                                                                 ; a complete byte with the R/W bit.
 00ED                                                                 ; The ASL takes care of clearing bit 0.
 00ED 550000        mov   [GYRO_bStatus],0x00                         ; Clear all flags
 00F0           
 00F0           
 00F0 48FD01        tst   [x+TxMode_X],GYRO_RepStart
 00F3 B005          jnz   DoRestartTxSmm
 00F5 90E9          call  I2C_DoStart                                 ; Send a start and address.
 00F7 8003          jmp   DoTxAckSmm
 00F9           DoRestartTxSmm:
 00F9 90B2          call  I2C_DoRepeatStart                           ; Send a repeat start and address.
 00FB           DoTxAckSmm:
 00FB 550200        mov   [GYRO_bXferCnt],0x00                        ; Zero out byte count first
 00FE 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed             ; Test to see if Slave ACKed
 0101 A018          jz    End_WR_LoopSmm
 0103           WR_LoopSmm:                                              ; Loop through bytes
 0103 10            push  x                                           ; Save X for later
 0104 5900          mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
 0106 5200          mov   a,[x]                                       ; Get data pointer to by X
 0108 5301          mov   [GYRO_bData],a                              ; Save data in temp location
 010A 90FE          call  GYRO_write                                  ; Write the data
 010C 20            pop   x
 010D 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 0110 A00E          jz    DoWBstopSmm                                    ; Stop transfer if NAKed
 0112 7602          inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
 0114 7700          inc   [x+TxArray_X]                                 ; Advance pointer
 0116 7BFE          dec   [x+TxByteCount_X]                             ; Decrement byte counter
 0118 BFEA          jnz   WR_LoopSmm                                     ; Not finished, do another byte.
 011A           End_WR_LoopSmm:                                          ; Endloop
 011A 48FD02        tst   [x+TxMode_X],GYRO_NoStop
 011D B003          jnz   SkipTxStopSmm
 011F           DoWBstopSmm:
 011F 91F6          call  GYRO_SendStop
 0121           SkipTxStopSmm:
 0121 5102          mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
 0123           End_WriteBytesSmm:
 0123 7F            ret
 0124           .ENDSECTION
                ENDIF
                
 0124           .SECTION
 0124           ;-----------------------------------------------------------------------------
 0124           ;  FUNCTION NAME: GYRO_bWriteCBytes
 0124           ;
 0124           ;  DESCRIPTION:
 0124           ;    Write multiple data bits to slave device from ROM
 0124           ;
 0124           ;-----------------------------------------------------------------------------
 0124           ;
 0124           ;  ARGUMENTS:
 0124           ;   [SP-3] => Address of slave
 0124           ;   [SP-4] => LSB of ROM Array address to put data in.
 0124           ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
 0124           ;   [SP-6] => Count of bytes to write.
 0124           ;   [SP-7] => Mode flags that allow the programmer to set flags
 0124           ;            to determine if:
 0124           ;               0x01 => Use RepeatStart instead of Start
 0124           ;               0x02 => Don't send Stop
 0124           ;
 0124           ;  RETURNS:
 0124           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 0124           ;
 0124           ;  SIDE EFFECTS:
 0124           ;    The A and X registers may be modified by this or future implementations
 0124           ;    of this function.  The same is true for all RAM page pointer registers in
 0124           ;    the Large Memory Model.  When necessary, it is the calling function's
 0124           ;    responsibility to perserve their values across calls to fastcall16 
 0124           ;    functions.
 0124           ;          
 0124           ;    Currently only the page pointer registers listed below are modified: 
 0124           ;          CUR_PP
 0124           ;
 FFFFFFFD           TxCSlaveAdr:   equ  -3
 FFFFFFFC           TxCArrayLSB:   equ  -4
 FFFFFFFB           TxCArrayMSB:   equ  -5
 FFFFFFFA           TxCByteCount:  equ  -6
 FFFFFFF9           TxCMode:       equ  -7
 0124           
 0124           _GYRO_bWriteCBytes:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0124 4F            mov   X, SP
 0125           
 0125 52FD          mov   A,[x+TxCSlaveAdr]
 0127 64            asl   A                                           ; Shift address to the left to make
 0128                                                                 ; a complete byte with the R/W bit.
 0128                                                                 ; The ASL takes care of clearing bit 0.
 0128 550000        mov   [GYRO_bStatus],0x00                         ; Clear all flags
 012B           
 012B           
 012B 48F901        tst   [x+TxCMode],GYRO_RepStart                   ; Check if a Start or RepeatStart
 012E B005          jnz   DoCRestartTx                                ; should executed.
 0130 90AE          call  I2C_DoStart                                 ; Send a start and address.
 0132 8003          jmp   DoCTxAck
 0134           DoCRestartTx:
 0134 9077          call  I2C_DoRepeatStart                           ; Send a repeat start and address.
 0136           
 0136           DoCTxAck:                                             ; Test to see if Slave is ACKed
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0136 550200        mov   [GYRO_bXferCnt],0x00            ; Zero out byte count first
 0139 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 013C A01D          jz    End_WRC_Loop
 013E           WRC_Loop:                                             ; Loop through bytes
 013E 10            push  x                                           ; Save X for later
 013F           
 013F 52FB          mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
 0141 59FC          mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
 0143 28            romx                                              ; Put ROM Data in a
 0144 5301          mov   [GYRO_bData],a                              ; Save data in temp location
 0146 90C2          call  GYRO_write                                  ; Write the data
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0148 20            pop   x
 0149 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 014C A012          jz    DoWCBstop                                    ; Stop transfer if NAKed
 014E 7602          inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
 0150 77FC          inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
 0152 D003          jnc   DecBCnt
 0154 77FB          inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
 0156           
 0156           DecBCnt:
 0156 7BFA          dec   [x+TxCByteCount]                            ; Decrement byte counter
 0158 BFE5          jnz   WRC_Loop                                    ; Not finished, do another byte.
 015A           End_WRC_Loop:                                         ; Endloop
 015A 48F902        tst   [x+TxCMode],GYRO_NoStop
 015D B003          jnz   SkipTxCStop
 015F           DoWCBstop:
 015F 91B6          call  GYRO_SendStop
 0161           SkipTxCStop:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0161 5102          mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
 0163           End_WriteCBytes:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0163 7F            ret
 0164           .ENDSECTION
 0164           
                IF SYSTEM_SMALL_MEMORY_MODEL
 0164           .SECTION
 0164           ;-----------------------------------------------------------------------------
 0164           ;  FUNCTION NAME: GYRO_bWriteCBytes
 0164           ;
 0164           ;  DESCRIPTION:
 0164           ;    Write multiple data bits to slave device from ROM
 0164           ;
 0164           ;-----------------------------------------------------------------------------
 0164           ;
 0164           ;  ARGUMENTS:
 0164           ;      A => Address of slave
 0164           ;      X => Pointer to other arguments.
 0164           ;     [x] => LSB of ROM Array address to put data in.
 0164           ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
 0164           ;   [X-2] => Count of bytes to write.
 0164           ;   [X-3] => Mode flags that allow the programmer to set flags
 0164           ;            to determine if:
 0164           ;               0x01 => Use RepeatStart instead of Start
 0164           ;               0x02 => Don't send Stop
 0164           ;
 0164           ;  RETURNS:
 0164           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 0164           ;
 0164           ;  SIDE EFFECTS:
 0164           ;    The A and X registers may be modified by this or future implementations
 0164           ;    of this function.  The same is true for all RAM page pointer registers in
 0164           ;    the Large Memory Model.  When necessary, it is the calling function's
 0164           ;    responsibility to perserve their values across calls to fastcall16 
 0164           ;    functions.
 0164           ;          
 0000           TxCArrayLSB_x:   equ   0
 FFFFFFFF           TxCArrayMSB_x:   equ  -1
 FFFFFFFE           TxCByteCount_x:  equ  -2
 FFFFFFFD           TxCMode_x:       equ  -3
 0164           
 0164            GYRO_bWriteCBytes:					        
 0164 64            asl   A                                           ; Shift address to the left to make
 0165                                                                 ; a complete byte with the R/W bit.
 0165                                                                 ; The ASL takes care of clearing bit 0.
 0165 550000        mov   [GYRO_bStatus],0x00                         ; Clear all flags
 0168           
 0168           
 0168 48FD01        tst   [x+TxCMode_x],GYRO_RepStart                 ; Check if a Start or RepeatStart
 016B B005          jnz   DoCRestartTxSmm                                ; should executed.
 016D 9071          call  I2C_DoStart                                 ; Send a start and address.
 016F 8003          jmp   DoCTxAckSmm
 0171           DoCRestartTxSmm:
 0171 903A          call  I2C_DoRepeatStart                           ; Send a repeat start and address.
 0173           
 0173           DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
 0173 550200        mov   [GYRO_bXferCnt],0x00            ; Zero out byte count first
 0176 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 0179 A01D          jz    End_WRC_LoopSmm
 017B           WRC_LoopSmm:                                             ; Loop through bytes
 017B 10            push  x                                           ; Save X for later
 017C           
 017C 52FF          mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
 017E 5900          mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
 0180 28            romx                                              ; Put ROM Data in a
 0181 5301          mov   [GYRO_bData],a                              ; Save data in temp location
 0183 9085          call  GYRO_write                                  ; Write the data
 0185 20            pop   x
 0186 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 0189 A012          jz    DoWCBstopSmm                                ; Stop transfer if NAKed
 018B 7602          inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
 018D 7700          inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
 018F D003          jnc   DecBCntSmm
 0191 77FF          inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
 0193           
 0193           DecBCntSmm:
 0193 7BFE          dec   [x+TxCByteCount_x]                            ; Decrement byte counter
 0195 BFE5          jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
 0197           End_WRC_LoopSmm:                                         ; Endloop
 0197 48FD02        tst   [x+TxCMode_x],GYRO_NoStop
 019A B003          jnz   SkipTxCStopSmm
 019C           DoWCBstopSmm:
 019C 9179          call  GYRO_SendStop
 019E           SkipTxCStopSmm:
 019E 5102          mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
 01A0           End_WriteCBytesSmm:
 01A0 7F            ret
 01A1           .ENDSECTION
                ENDIF
                
 01A1           .SECTION
 01A1           ;-----------------------------------------------------------------------------
 01A1           ;  FUNCTION NAME: GYRO_fSendRepeatStart
 01A1           ;
 01A1           ;  DESCRIPTION:
 01A1           ;    Send repeated start condition and send slave address.
 01A1           ;
 01A1           ;-----------------------------------------------------------------------------
 01A1           ;
 01A1           ;  ARGUMENTS:
 01A1           ;    GYRO_bAddr - Contains the slave address and transfer direction.
 01A1           ;
 01A1           ;  RETURNS:
 01A1           ;    GYRO_bSTatus - Cleared if a slave responds to a request. Set otherwise
 01A1           ;
 01A1           ;  SIDE EFFECTS:
 01A1           ;    The A and X registers may be modified by this or future implementations
 01A1           ;    of this function.  The same is true for all RAM page pointer registers in
 01A1           ;    the Large Memory Model.  When necessary, it is the calling function's
 01A1           ;    responsibility to perserve their values across calls to fastcall16 
 01A1           ;    functions.
 01A1           ;          
 01A1           ;    Currently only the page pointer registers listed below are modified: 
 01A1           ;          CUR_PP
 01A1           ;
 01A1           ;  THEORY of OPERATION or PROCEDURE:
 01A1           ;    Prepare to send start by setting SCl and SDA high.
 01A1           ;    must be followed directly by GYRO_start.
 01A1           ;
 01A1            GYRO_fSendRepeatStart:
 01A1           _GYRO_fSendRepeatStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01A1 64            asl   a                                                ; Shift address to the left
 01A2 79            dec   x                                                ; If zero, C flag will be set
 01A3 D004          jnc   .setRead                                ; Do a write if zero
 01A5 9006          call  I2C_DoRepeatStart
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01A7 7F            ret
 01A8           .setRead:
 01A8 2901          or    a,0x01                                           ; Set Read flag
 01AA 9001          call  I2C_DoRepeatStart
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01AC 7F            ret  
 01AD           
 01AD           I2C_DoRepeatStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 01AD 08            push  a
 01AE 7110          or    F, FLAG_XIO_MASK
 01B0 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin          ; Assert SCL low
 01B3 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin         ; Release SDA high
 01B6 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 01B8 6004          mov   reg[GYRO_I2CPRTDM0],A
 01BA           
 01BA                                                                      ; Delay 3/4 period
 01BA 500C          mov   A,GYRO_delay3qtr
 01BC 9188          call  GYRO_delay
 01BE                                                                      ; Release SCL high
 01BE 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 01C1 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 01C3 6004          mov   reg[GYRO_I2CPRTDM0],A
 01C5           
 01C5 70EF          and   F, ~FLAG_XIO_MASK
 01C7           clockstretch1:                                             ; Wait for SCL high in case of wait
 01C7                                                                      ; states adde by slave
 01C7 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 01CA AFFC          jz    clockstretch1
 01CC           
 01CC 500C          mov   A,GYRO_delay3qtr                                 ; Delay 1/2 period
 01CE 9176          call  GYRO_delay
 01D0 18            pop   a
 01D1 900D          call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01D3 7F            ret
 01D4           .ENDSECTION
 01D4           
 01D4           .SECTION
 01D4           ;-----------------------------------------------------------------------------
 01D4           ;  FUNCTION NAME: GYRO_fSendStart
 01D4           ;
 01D4           ;  DESCRIPTION:
 01D4           ;    Generates start condition and sends slave address.
 01D4           ;
 01D4           ;-----------------------------------------------------------------------------
 01D4           ;
 01D4           ;  ARGUMENTS:
 01D4           ;    A => Contains the slave address.
 01D4           ;
 01D4           ;  RETURNS:
 01D4           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 01D4           ;
 01D4           ;  SIDE EFFECTS:
 01D4           ;    The A and X registers may be modified by this or future implementations
 01D4           ;    of this function.  The same is true for all RAM page pointer registers in
 01D4           ;    the Large Memory Model.  When necessary, it is the calling function's
 01D4           ;    responsibility to perserve their values across calls to fastcall16 
 01D4           ;    functions.
 01D4           ;          
 01D4           ;    Currently only the page pointer registers listed below are modified: 
 01D4           ;          CUR_PP
 01D4           ;
 01D4           ;  THEORY of OPERATION or PROCEDURE:
 01D4           ;   Send start by setting SDA low while SCL is high. Set
 01D4           ;   SCL low in preparation to send address. Must be followed
 01D4           ;   by GYRO_write.
 01D4           ;
 01D4            GYRO_fSendStart:
 01D4           _GYRO_fSendStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01D4 64            asl   a                                                     ; Shift address to the left
 01D5 79            dec   x                                                     ; If zero, C flag will be set
 01D6 D004          jnc   .SetRead
 01D8 9006          call  I2C_DoStart                                           ; Do a write if zero
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01DA 7F            ret
 01DB           .SetRead:
 01DB 2901          or    a,0x01                                                ; Set Read flag
 01DD 9001          call  I2C_DoStart                                           ; Do a write if zero
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01DF 7F            ret
 01E0           
 01E0           I2C_DoStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 01E0 7110          or    F, FLAG_XIO_MASK
 01E2 08            push  A                                                     ; Save the slave address
 01E3 2E0002        or    [Port_1_DriveMode_0_SHADE],GYRO_SDA_pin               ; Assert SDA low
 01E6 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 01E8 6004          mov   reg[GYRO_I2CPRTDM0],A
 01EA           
 01EA 5005          mov   A,GYRO_delayhalf                                      ; Delay 1/2 period
 01EC 9158          call  GYRO_delay
 01EE 18            pop   A                                                     ; Restore slave address to A
 01EF 70EF          and   F, ~FLAG_XIO_MASK
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bData
                   ENDIF
 01F1 5301          mov   [GYRO_bData],A
 01F3           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 01F3 7110          or    F, FLAG_XIO_MASK
 01F5 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin               ; Set SCL low
 01F8 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 01FA 6004          mov   reg[GYRO_I2CPRTDM0],A
 01FC 70EF          and   F, ~FLAG_XIO_MASK
 01FE           
 01FE 5002          mov   A,GYRO_delayqtr                                       ; Delay 1/4 period
 0200 9144          call  GYRO_delay
 0202 9006          call   GYRO_write                                           ; Write the byte.
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0204 7F            ret
 0205           .ENDSECTION
 0205           
 0205           .SECTION
 0205           ;-----------------------------------------------------------------------------
 0205           ;  FUNCTION NAME: GYRO_fWrite
 0205           ;
 0205           ;  DESCRIPTION:
 0205           ;    Writes a byte to the I2C master bus.
 0205           ;
 0205           ;-----------------------------------------------------------------------------
 0205           ;
 0205           ;  ARGUMENTS:
 0205           ;    A contains Data to be written to I2C slave.
 0205           ;
 0205           ;  RETURNS:
 0205           ;    1 If ACKed, else 0
 0205           ;
 0205           ;  SIDE EFFECTS:
 0205           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0205           ;
 0205           ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 0205           ;
 0205           ;  FUNCTION NAME: GYRO_write
 0205           ;
 0205           ;  DESCRIPTION:
 0205           ;    Writes a byte to the I2C master bus. Also used for sending the address.
 0205           ;
 0205           ;  ARGUMENTS:
 0205           ;    Reg A contains slave address.
 0205           ;    GYRO_bData - Contains data to be transmitted.
 0205           ;
 0205           ;  RETURNS:
 0205           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 0205           ;
 0205           ;  SIDE EFFECTS:
 0205           ;    The A and X registers may be modified by this or future implementations
 0205           ;    of this function.  The same is true for all RAM page pointer registers in
 0205           ;    the Large Memory Model.  When necessary, it is the calling function's
 0205           ;    responsibility to perserve their values across calls to fastcall16 
 0205           ;    functions.
 0205           ;          
 0205           ;    Currently only the page pointer registers listed below are modified: 
 0205           ;          CUR_PP
 0205           ;
 0205           ;    Send data byte to slave. Must be followed by GYRO_get_ack.
 0205           ;
 0205           GYRO_fWrite:
 0205           _GYRO_fWrite:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bData
                   ENDIF
 0205 5301          mov   [GYRO_bData],A                                   ; Put data in bData
 0207 9001          call  GYRO_write
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0209 7F            ret
 020A           
 020A           GYRO_write:
 020A           _GYRO_write:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bit_count
                   ENDIF
                    
 020A 550308        mov   [GYRO_bit_count],8                                ; Set up count to xmit 8 bits
 020D           writenextbit:
 020D 7A03          dec   [GYRO_bit_count]
 020F           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
                                                                           ; Assert SCL low
 020F 7110          or    F, FLAG_XIO_MASK
 0211 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
 0214 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0216 6004          mov   reg[GYRO_I2CPRTDM0],A
 0218 70EF          and   F, ~FLAG_XIO_MASK
 021A           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bit_count
                   ENDIF
 021A 6B01          rlc   [GYRO_bData]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 021C 7110          or    F, FLAG_XIO_MASK
 021E C00A          jc    write_bit                                        ; Assert SDA low for data 0    
 0220 2E0002        or    [Port_1_DriveMode_0_SHADE],GYRO_SDA_pin
 0223 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0225 6004          mov   reg[GYRO_I2CPRTDM0],A
 0227           
 0227 8008          jmp   writestartclock
 0229           write_bit:                                                 ; Release SDA high for data 1
 0229 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin      
 022C 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 022E 6004          mov   reg[GYRO_I2CPRTDM0],A
 0230           
 0230           writestartclock:
 0230 5005          mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
 0232 9112          call  GYRO_delay
 0234                                                                      ; Release SCL High
 0234 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 0237 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0239 6004          mov   reg[GYRO_I2CPRTDM0],A
 023B           
 023B 70EF          and   F, ~FLAG_XIO_MASK
 023D           clockstretch2:                                             ; Wait for SCL high in case of wait states
 023D                                                                      ; are added by slave.
 023D 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 0240 AFFC          jz    clockstretch2
 0242                                                                      ; Delay for 1/2 period
 0242 5005          mov   A,GYRO_delayhalf
 0244 9100          call  GYRO_delay
 0246           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bit_count
                   ENDIF
 0246 3C0300        cmp   [GYRO_bit_count],0
 0249 BFC3          jnz   writenextbit
 024B 9001          call  GYRO_get_ack                
 024D           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 024D 7F            ret
 024E           .ENDSECTION
 024E           
 024E           .SECTION
 024E           ;-----------------------------------------------------------------------------
 024E           ;  FUNCTION NAME: GYRO_get_ack
 024E           ;
 024E           ;  DESCRIPTION:
 024E           ;    Get slave acknowledge response. Used only by GYRO_write.
 024E           ;
 024E           ;-----------------------------------------------------------------------------
 024E           ;
 024E           ;  ARGUMENTS:
 024E           ;    GYRO_bData - Contains data to be transmitted.
 024E           ;
 024E           ;  RETURNS:
 024E           ;    Sets flag in GYRO_bStatus if ACKed by Slave.
 024E           ;
 024E           ;  SIDE EFFECTS:
 024E           ;    The A and X registers may be modified by this or future implementations
 024E           ;    of this function.  The same is true for all RAM page pointer registers in
 024E           ;    the Large Memory Model.  When necessary, it is the calling function's
 024E           ;    responsibility to perserve their values across calls to fastcall16 
 024E           ;    functions.
 024E           ;          
 024E           ;    Currently only the page pointer registers listed below are modified: 
 024E           ;          CUR_PP
 024E           ;
 024E           GYRO_get_ack:
 024E           _GYRO_get_ack:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 024E 7110          or    F, FLAG_XIO_MASK
 0250 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
 0253 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0255 6004          mov   reg[GYRO_I2CPRTDM0],A
 0257                                                                      ; Release SDA high so slave may ACK
 0257 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin
 025A 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 025C 6004          mov   reg[GYRO_I2CPRTDM0],A
 025E                                                                      ; Delay 3/4 period
 025E 500C          mov   A,GYRO_delay3qtr
 0260 90E4          call  GYRO_delay
 0262                                                                      ; Release SCL high
 0262 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 0265 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0267 6004          mov   reg[GYRO_I2CPRTDM0],A
 0269           
 0269 70EF          and   F, ~FLAG_XIO_MASK
 026B           clockstretch3:                                             ; Wait for SCL to go high in case wait states
 026B                                                                      ; are added my slave.
 026B 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 026E AFFC          jz    clockstretch3
 0270               
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
                                                                       ; Clear ACK bit
 0270 2600FE        and   [GYRO_bStatus],~GYRO_SLAVE_ACKed
 0273 490402        tst   reg[GYRO_I2CPRTDR],GYRO_SDA_pin
 0276 B004          jnz    getack2                                         ; If ACKed, set flag
 0278 2E0001        or    [GYRO_bStatus],GYRO_SLAVE_ACKed
 027B           
 027B           getack2:
 027B 5005          mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
 027D 90C7          call  GYRO_delay
 027F           
 027F 5100          mov   A,[GYRO_bStatus]                                 ; Get result and put it in A
 0281 2101          and   A,GYRO_SLAVE_ACKed                               ; Mask off just the ACK flag.
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0283 7F            ret
 0284           .ENDSECTION
 0284           
 0284           .SECTION
 0284           ;-----------------------------------------------------------------------------
 0284           ;  FUNCTION NAME: GYRO_bRead
 0284           ;
 0284           ;  DESCRIPTION:
 0284           ;    Reads 1 data byte from the I2C master bus.
 0284           ;
 0284           ;-----------------------------------------------------------------------------
 0284           ;
 0284           ;  ARGUMENTS:
 0284           ;    Reg A Contains the Slave Address.
 0284           ;    GYRO_bStatus - Set for no ack to be followed by stop.
 0284           ;    Clear for ack to indicate more data to follow.
 0284           ;
 0284           ;  RETURNS:
 0284           ;    GYRO_bData - Contains received data.
 0284           ;
 0284           ;  SIDE EFFECTS:
 0284           ;    The A and X registers may be modified by this or future implementations
 0284           ;    of this function.  The same is true for all RAM page pointer registers in
 0284           ;    the Large Memory Model.  When necessary, it is the calling function's
 0284           ;    responsibility to perserve their values across calls to fastcall16 
 0284           ;    functions.
 0284           ;          
 0284           ;    Currently only the page pointer registers listed below are modified: 
 0284           ;          CUR_PP
 0284           ;
 0284           ;    Must be followed by GYRO_put_ack.
 0284           ;
 0284           GYRO_bRead:
 0284           _GYRO_bRead:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0284 550000        mov   [GYRO_bStatus],0x00                              ; Clear ACK flag
 0287 21FF          and   A,0xFF                                           ; Is Ack flag set"
 0289 A007          jz    GYRO_read                                        ; Don't ACK
 028B 2E0010        or    [GYRO_bStatus],GYRO_SEND_ACK                     ; Set ACK flag
 028E 9001          call  GYRO_read
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0290 7F            ret
 0291           
 0291           GYRO_read:
 0291           _GYRO_read:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0291 550308        mov   [GYRO_bit_count],8                               ; Count and prepare bits to read
 0294           readnextbit:
 0294 7A03          dec   [GYRO_bit_count]
 0296 6B01          rlc   [GYRO_bData]
 0298               
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 0298 7110          or    F, FLAG_XIO_MASK
 029A 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
 029D 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 029F 6004          mov   reg[GYRO_I2CPRTDM0],A
 02A1                                                                      ; Delay 1/2 period
 02A1 5005          mov   A,GYRO_delayhalf
 02A3 90A1          call  GYRO_delay
 02A5                                                                      ; Release SCL high
 02A5 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 02A8 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02AA 6004          mov   reg[GYRO_I2CPRTDM0],A
 02AC           
 02AC 70EF          and   F, ~FLAG_XIO_MASK
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 02AE           clockstretch4:                                             ; Wait for SCL to go high in case slave
 02AE                                                                      ; addes wait states.
 02AE           
 02AE 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 02B1 AFFC          jz    clockstretch4
 02B3                                                                      ; Delay 1/4 period
 02B3 5002          mov   A,GYRO_delayqtr
 02B5 908F          call  GYRO_delay
 02B7           
 02B7 2601FE        and   [GYRO_bData],~01h                                ; Record bit received
 02BA 490402        tst   reg[GYRO_I2CPRTDR],GYRO_SDA_pin
 02BD A004          jz    readnobit
 02BF 2E0101        or    [GYRO_bData],01h
 02C2           readnobit:
 02C2 3C0300        cmp   [GYRO_bit_count],0
 02C5 BFCE          jnz   readnextbit                                      ; Check for byte complete
 02C7           
 02C7 9001          call   GYRO_put_ack                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 02C9 7F            ret
 02CA           .ENDSECTION
 02CA                                                                    
 02CA           .SECTION
 02CA           ;-----------------------------------------------------------------------------
 02CA           ;  FUNCTION NAME: GYRO_put_ack
 02CA           ;
 02CA           ;  DESCRIPTION:
 02CA           ;    Send acknowledge to slave. Used only by GYRO_read
 02CA           ;
 02CA           ;-----------------------------------------------------------------------------
 02CA           ;
 02CA           ;  ARGUMENTS:
 02CA           ;    GYRO_bStatus - Set for no ack to be followed by stop. Clear for ack
 02CA           ;    to indicate more data to follow.
 02CA           ;
 02CA           ;  RETURNS:
 02CA           ;    GYRO_bData - Contains received data.
 02CA           ;
 02CA           ;  SIDE EFFECTS:
 02CA           ;    The A and X registers may be modified by this or future implementations
 02CA           ;    of this function.  The same is true for all RAM page pointer registers in
 02CA           ;    the Large Memory Model.  When necessary, it is the calling function's
 02CA           ;    responsibility to perserve their values across calls to fastcall16 
 02CA           ;    functions.
 02CA           ;          
 02CA           ;    Currently only the page pointer registers listed below are modified: 
 02CA           ;          CUR_PP
 02CA           ;
 02CA           ;    Send ack if more data will follow.
 02CA           ;
 02CA           GYRO_put_ack:
 02CA           _GYRO_put_ack:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 02CA 7110          or    F, FLAG_XIO_MASK
 02CC 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
 02CF 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02D1 6004          mov   reg[GYRO_I2CPRTDM0],A
 02D3 70EF          and   F, ~FLAG_XIO_MASK
 02D5           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
                                                                       ; Check if ack is to be transmitted
 02D5 470010        tst   [GYRO_bStatus],GYRO_SEND_ACK
 02D8           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 02D8 7110          or    F, FLAG_XIO_MASK
 02DA           
 02DA A00A          jz    noputack
 02DC                                                                      ; Assert SDA low
 02DC 2E0002        or    [Port_1_DriveMode_0_SHADE],GYRO_SDA_pin
 02DF 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02E1 6004          mov   reg[GYRO_I2CPRTDM0],A
 02E3           
 02E3 8008          jmp   putack1
 02E5           noputack:                                                  ; Release SDA high
 02E5 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin
 02E8 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02EA 6004          mov   reg[GYRO_I2CPRTDM0],A
 02EC           
 02EC           putack1:
 02EC 5002          mov   A,GYRO_delayqtr                                  ; Delay 1/4 period
 02EE 9056          call  GYRO_delay
 02F0                                                                      ; Release SCL high
 02F0 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 02F3 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02F5 6004          mov   reg[GYRO_I2CPRTDM0],A
 02F7           
 02F7 70EF          and   F, ~FLAG_XIO_MASK
 02F9           clockstretch5:                                             ; Wait for SCL high in case slave
 02F9                                                                      ; adds wait states.
 02F9 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 02FC AFFC          jz    clockstretch5
 02FE                                                                      ; delay for the high half of the clock.
 02FE 5005          mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
 0300 9044          call  GYRO_delay
 0302           
 0302 7110          or    F, FLAG_XIO_MASK
 0304 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
 0307 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0309 6004          mov   reg[GYRO_I2CPRTDM0],A
 030B                                                                      ; If there is another read pending
 030B                                                                      ; must release SDA for slave
 030B 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin         ; Release SDA high
 030E 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0310 6004          mov   reg[GYRO_I2CPRTDM0],A
 0312 70EF          and   F, ~FLAG_XIO_MASK
 0314           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0314 5101          mov   A, [GYRO_bData]
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0316 7F            ret
 0317           .ENDSECTION
 0317           
 0317           .SECTION
 0317           ;-----------------------------------------------------------------------------
 0317           ;  FUNCTION NAME: GYRO_SendStop
 0317           ;
 0317           ;  DESCRIPTION:
 0317           ;    Assert stop condition.
 0317           ;
 0317           ;-----------------------------------------------------------------------------
 0317           ;
 0317           ;  ARGUMENTS: none
 0317           ;
 0317           ;  RETURNS: none
 0317           ;
 0317           ;  SIDE EFFECTS:
 0317           ;    The A and X registers may be modified by this or future implementations
 0317           ;    of this function.  The same is true for all RAM page pointer registers in
 0317           ;    the Large Memory Model.  When necessary, it is the calling function's
 0317           ;    responsibility to perserve their values across calls to fastcall16 
 0317           ;    functions.
 0317           ;          
 0317           ;    Currently only the page pointer registers listed below are modified: 
 0317           ;          CUR_PP
 0317           ;
 0317           ;  THEORY of OPERATION or PROCEDURE:
 0317           ;     Send stop by releasing SDA high while SCL high.ASA21CR1
 0317           ;
 0317            GYRO_SendStop:
 0317           _GYRO_SendStop:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 0317 7110          or    F, FLAG_XIO_MASK
 0319 2E0003        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin|GYRO_SDA_pin
 031C 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 031E 6004          mov   reg[GYRO_I2CPRTDM0],A
 0320           
 0320 500C          mov   A,GYRO_delay3qtr                                 ; Delay 3/4 period
 0322 9022          call  GYRO_delay
 0324                                                                      ; Release SCL high
 0324 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 0327 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0329 6004          mov   reg[GYRO_I2CPRTDM0],A
 032B           
 032B 70EF          and   F, ~FLAG_XIO_MASK
 032D           clockstretch6:                                             ; Wait for SCL to go high in case slave
 032D                                                                      ; has added wait states.
 032D 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 0330 AFFC          jz    clockstretch6
 0332 7110          or    F, FLAG_XIO_MASK
 0334           
 0334 500C          mov   A,GYRO_delay3qtr                                 ; Delay 3/4 period
 0336 900E          call  GYRO_delay
 0338           
 0338                                                                      ; Release SDA high
 0338 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin
 033B 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 033D 6004          mov   reg[GYRO_I2CPRTDM0],A
 033F           
 033F 5005          mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
 0341 9003          call  GYRO_delay
 0343 70EF          and   F, ~FLAG_XIO_MASK
 0345               
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0345 7F            ret
 0346           .ENDSECTION
 0346           
 0346           .SECTION
 0346           ;-----------------------------------------------------------------------------
 0346           ;  FUNCTION NAME: GYRO_delay
 0346           ;
 0346           ;  DESCRIPTION:
 0346           ;    Create delays for GYRO routines.
 0346           ;
 0346           ;-----------------------------------------------------------------------------
 0346           ;
 0346           ;  ARGUMENTS: none
 0346           ;
 0346           ;  RETURNS: none
 0346           ;
 0346           ;  SIDE EFFECTS:
 0346           ;    The A and X registers may be modified by this or future implementations
 0346           ;    of this function.  The same is true for all RAM page pointer registers in
 0346           ;    the Large Memory Model.  When necessary, it is the calling function's
 0346           ;    responsibility to perserve their values across calls to fastcall16 
 0346           ;    functions.
 0346           ;          
 0346           GYRO_delay:                                      ; 11 cycles for call. 32 total.
 0346           GYROdelay1:                                      ; Delay 1/4 period at 100 kHz
 0346 78             dec  A                                      ; 4 cycles
 0347 BFFE           jnz  GYROdelay1                             ; 5 cycles for jump, 4 no jump.     
 0349 7F             ret                                         ; 8 cycles
 034A             
 034A           .ENDSECTION
 034A           
 034A           
 034A           
 034A           ; End of File GYRO.asm
 034A           
 034A           
