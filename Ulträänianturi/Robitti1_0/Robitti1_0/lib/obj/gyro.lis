 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: GYRO.asm
 0000           ;;   Version: 2.00, Updated on 2013/5/19 at 10:43:43
 0000           ;;  Generated by PSoC Designer 5.4.2946
 0000           ;;
 0000           ;;  DESCRIPTION: I2Cm User Module software implementation file.
 0000           ;;
 0000           ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
 0000           ;;        arguments and observe the associated "Registers are volatile" policy.
 0000           ;;        This means it is the caller's responsibility to preserve any values
 0000           ;;        in the X and A registers that are still needed after the API functions
 0000           ;;        returns. For Large Memory Model devices it is also the caller's 
 0000           ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
 0000           ;;        MVW_PP registers. Even though some of these registers may not be modified
 0000           ;;        now, there is no guarantee that will remain the case in future releases.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 00C0           FLAG_PGMODE_MASK:  equ 0C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ 0C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ 0C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           ; Port 6
 0018           PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
 0019           PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
 001A           PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
 001B           PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
 0000           ; Port 7
 001C           PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
 001D           PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
 001E           PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
 001F           PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20DR0:     equ 40h          ; data register 0                          (#)
 0041           DBB20DR1:     equ 41h          ; data register 1                          (W)
 0042           DBB20DR2:     equ 42h          ; data register 2                          (RW)
 0043           DBB20CR0:     equ 43h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21DR0:     equ 44h          ; data register 0                          (#)
 0045           DBB21DR1:     equ 45h          ; data register 1                          (W)
 0046           DBB21DR2:     equ 46h          ; data register 2                          (RW)
 0047           DBB21CR0:     equ 47h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22DR0:     equ 48h          ; data register 0                          (#)
 0049           DCB22DR1:     equ 49h          ; data register 1                          (W)
 004A           DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
 004B           DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23DR0:     equ 4Ch          ; data register 0                          (#)
 004D           DCB23DR1:     equ 4Dh          ; data register 1                          (W)
 004E           DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
 004F           DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30DR0:     equ 50h          ; data register 0                          (#)
 0051           DBB30DR1:     equ 51h          ; data register 1                          (W)
 0052           DBB30DR2:     equ 52h          ; data register 2                          (RW)
 0053           DBB30CR0:     equ 53h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31DR0:     equ 54h          ; data register 0                          (#)
 0055           DBB31DR1:     equ 55h          ; data register 1                          (W)
 0056           DBB31DR2:     equ 56h          ; data register 2                          (RW)
 0057           DBB31CR0:     equ 57h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32DR0:     equ 58h          ; data register 0                          (#)
 0059           DCB32DR1:     equ 59h          ; data register 1                          (W)
 005A           DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
 005B           DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33DR0:     equ 5Ch          ; data register 0                          (#)
 005D           DCB33DR1:     equ 5Dh          ; data register 1                          (W)
 005E           DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
 005F           DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP0_DR:      equ 6Ch          ; deprecated do not use
 006D           TMP1_DR:      equ 6Dh          ; deprecated do not use
 006E           TMP2_DR:      equ 6Eh          ; deprecated do not use
 006F           TMP3_DR:      equ 6Fh          ; deprecated do not use
 0000           
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 00C0           RDI2RI:       equ 0C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
 00C1           RDI2SYN:      equ 0C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
 00C2           RDI2IS:       equ 0C2h          ; Row 2 Input Select Register              (RW)
 00C3           RDI2LT0:      equ 0C3h          ; Row 2 Look Up Table Register 0           (RW)
 00C4           RDI2LT1:      equ 0C4h          ; Row 2 Look Up Table Register 1           (RW)
 00C5           RDI2RO0:      equ 0C5h          ; Row 2 Output Register 0                  (RW)
 00C6           RDI2RO1:      equ 0C6h          ; Row 2 Output Register 1                  (RW)
 0000           
 00C8           RDI3RI:       equ 0C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
 00C9           RDI3SYN:      equ 0C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
 00CA           RDI3IS:       equ 0CAh          ; Row 3 Input Select Register              (RW)
 00CB           RDI3LT0:      equ 0CBh          ; Row 3 Look Up Table Register 0           (RW)
 00CC           RDI3LT1:      equ 0CCh          ; Row 3 Look Up Table Register 1           (RW)
 00CD           RDI3RO0:      equ 0CDh          ; Row 3 Output Register 0                  (RW)
 00CE           RDI3RO1:      equ 0CEh          ; Row 3 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ 0D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ 0D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ 0D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ 0D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ 0D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ 0DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00DF           INT_MSK2:     equ 0DFh          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
 0040           INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
 0020           INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
 0010           INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
 0008           INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
 0004           INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
 0002           INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
 0001           INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000                                          ; Also see DEC_CR2 in bank 1
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 0000           //   Compatibility Set: Maps onto MAC0
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           // Multiply/Accumulate Unit 0
 00E8           MUL0_X:       equ 0E8h          ; Multiplier 0 X Register (write)          (W)
 00E9           MUL0_Y:       equ 0E9h          ; Multiplier 0 Y Register (write)          (W)
 00EA           MUL0_DH:      equ 0EAh          ; Multiplier 0 Result Data (high byte read)(R)
 00EB           MUL0_DL:      equ 0EBh          ; Multiplier 0 Result Data ( low byte read)(R)
 00EC           MAC0_X:       equ 0ECh          ; write = MAC 0 X register [also see ACC_DR1]
 00EC           ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
 00ED           MAC0_Y:       equ 0EDh          ; write = MAC 0 Y register [also see ACC_DR0]
 00ED           ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
 00EE           MAC0_CL0:     equ 0EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
 00EE           ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
 00EF           MAC0_CL1:     equ 0EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
 00EF           ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
 0000           
 0000           // Multiply/Accumulate Unit 1
 00A8           MUL1_X:       equ 0A8h          ; Multiplier 1 X Register (write)          (W)
 00A9           MUL1_Y:       equ 0A9h          ; Multiplier 1 Y Register (write)          (W)
 00AA           MUL1_DH:      equ 0AAh          ; Multiplier 1 Result Data (high byte read)(R)
 00AB           MUL1_DL:      equ 0ABh          ; Multiplier 1 Result Data ( low byte read)(R)
 00AC           MAC1_X:       equ 0ACh          ; write = MAC 1 X register [also see ACC_DR1]
 00AC           ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
 00AD           MAC1_Y:       equ 0ADh          ; write = MAC 1 Y register [also see ACC_DR0]
 00AD           ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
 00AE           MAC1_CL0:     equ 0AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
 00AE           ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AF           MAC1_CL1:     equ 0AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
 00AF           ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
 0010           CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 6
 0018           PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
 0019           PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
 001A           PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
 001B           PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 7
 001C           PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
 001D           PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
 001E           PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
 001F           PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20FN:      equ 40h          ; Function Register                        (RW)
 0041           DBB20IN:      equ 41h          ;    Input Register                        (RW)
 0042           DBB20OU:      equ 42h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21FN:      equ 44h          ; Function Register                        (RW)
 0045           DBB21IN:      equ 45h          ;    Input Register                        (RW)
 0046           DBB21OU:      equ 46h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22FN:      equ 48h          ; Function Register                        (RW)
 0049           DCB22IN:      equ 49h          ;    Input Register                        (RW)
 004A           DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23FN:      equ 4Ch          ; Function Register                        (RW)
 004D           DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
 004E           DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30FN:      equ 50h          ; Function Register                        (RW)
 0051           DBB30IN:      equ 51h          ;    Input Register                        (RW)
 0052           DBB30OU:      equ 52h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31FN:      equ 54h          ; Function Register                        (RW)
 0055           DBB31IN:      equ 55h          ;    Input Register                        (RW)
 0056           DBB31OU:      equ 56h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32FN:      equ 58h          ; Function Register                        (RW)
 0059           DCB32IN:      equ 59h          ;    Input Register                        (RW)
 005A           DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33FN:      equ 5Ch          ; Function Register                        (RW)
 005D           DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
 005E           DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E7           DEC_CR2:      equ 0E7h          ; Decimator Control Register 2             (RW)
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0007           SYSTEM_STACK_PAGE: equ 7   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C29000.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0002           GYRO_delayqtr:     equ   2            ; Define delays for proper timing at 24 MHz
 0005           GYRO_delayhalf:    equ   5
 000C           GYRO_delay3qtr:    equ   12
 0000           
 0000           ;12 MHz
 0000           ;GYRO_delayqtr:    equ   3
 0000           ;GYRO_delayhalf:   equ   3
 0000           ;GYRO_delay3qtr:   equ   3
 0000           
 0002           GYRO_SDA_pin:      equ   2h ; bit number of for SDA
 0001           GYRO_SCL_pin:      equ   1h ; bit number of for SCL
 0001           GYRO_I2CPortNum:   equ   1h     ; Port number to use for I2C Both pins will be on this port
 0000           
 0001           GYRO_DriveMode2:   equ   1
 0000           
 0000           ;-----------------
 0000           ; Bank 0
 0000           ;-----------------
 0004           GYRO_I2CPRTDR:     equ   PRT1DR  ; Port number to use for I2C Both pins will be on this port
 0000           
                IF(GYRO_DriveMode2)
 0007           GYRO_I2CPRTDM2:                        equ   PRT1DM2  ; Port number to use for I2C Both pins will be on this port
                ENDIF
                
                ;-----------------
                ; Bank 1
                ;-----------------
                
 0004           GYRO_I2CPRTDM0:                        equ   PRT1DM0  ; Port number to use for I2C Both pins will be on this port
 0005           GYRO_I2CPRTDM1:                        equ   PRT1DM1  ; Port number to use for I2C Both pins will be on this port
 0000           
 0000           ;-----------------
 0000           ; Misc
 0000           ;-----------------
 0001           GYRO_READ:           equ  0x01 ; Set the R/W flag after the slave address.
 0000           GYRO_WRITE:          equ  0x00 ; Clear the R/W flag after the slave address.
 0000           GYRO_XFER_ERROR:     equ  0x00 ; Slave did not ACK
 0001           GYRO_XFER_COMPLETE:  equ  0x01 ; Returned if Slave did ACK
 0000           
 0000           GYRO_CompleteXfer:   equ  0x00 ; Perform a complete I2C transfer
 0001           GYRO_RepStart:       equ  0x01 ; Perform a complete transfer with a Repeat Start
 0002           GYRO_NoStop:         equ  0x02 ; Perform a complete transfer, but leave off the stop.
 0000           
 0000           GYRO_NAKslave:       equ  0x00 ; NAK the slave after a read
 0001           GYRO_ACKslave:       equ  0x01 ; ACK the slave after a read
 0000           
 0000           ; end of file GYRO.inc
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global Symbols
 0000           ;-----------------------------------------------
 0000           
                export   GYRO_Start
                export  _GYRO_Start
                export   GYRO_Stop
                export  _GYRO_Stop
                export   GYRO_fSendRepeatStart
                export  _GYRO_fSendRepeatStart
                export   GYRO_fSendStart
                export  _GYRO_fSendStart
                export   GYRO_SendStop
                export  _GYRO_SendStop
                ; export the following 3 functions for C-implementations large or small mem models 
                export  _GYRO_fReadBytes
                export  _GYRO_bWriteBytes
                export  _GYRO_bWriteCBytes
                
                export   GYRO_fWrite
                export  _GYRO_fWrite
                
                export   GYRO_bRead
                export  _GYRO_bRead
                
                IF SYSTEM_SMALL_MEMORY_MODEL
                
                export   GYRO_fReadBytes
                export   GYRO_bWriteBytes
                export   GYRO_bWriteCBytes
                
                ENDIF    ;SYSTEM_SMALL_MEMORY_MODEL
                
                ;-------------------------------------------------------------------
                ;  Declare the varables for both the assembler and C compiler.
                ;
                ;-------------------------------------------------------------------
                export  GYRO_bStatus
                export _GYRO_bStatus
                export  GYRO_bData
                export _GYRO_bData
                export  GYRO_bAddr
                export _GYRO_bAddr
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                area robitti1_0_RAM(RAM, REL, CON)
                
 0000           _GYRO_bStatus:
 0000            GYRO_bStatus:                         blk   1  ; Status during transfers
 0001           _GYRO_bData:
 0001            GYRO_bData:                           blk   1  ; Data transfered
 0002           _GYRO_bXferCnt:
 0002            GYRO_bXferCnt:                                  ; Reused variable for counting transfered
 0002           _GYRO_bAddr:                                     ; Bytes
 0002            GYRO_bAddr:                           blk   1  ; Slave Address
 0003           _GYRO_bit_count:
 0003            GYRO_bit_count:                       blk   1  ; Bit counter
 0004           
                AREA UserModules (ROM, REL)
                ;-----------------------------------------------
                ;  EQUATES
                ;-----------------------------------------------
 0001           GYRO_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
 0010           GYRO_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
 0000           
 0000           .SECTION
 0000           ;-----------------------------------------------------------------------------
 0000           ;  FUNCTION NAME: GYRO_Start
 0000           ;
 0000           ;  DESCRIPTION:
 0000           ;
 0000           ;-----------------------------------------------------------------------------
 0000           ;
 0000           ;  ARGUMENTS: none
 0000           ;
 0000           ;  RETURNS: none
 0000           ;
 0000           ;  SIDE EFFECTS:
 0000           ;    The A and X registers may be modified by this or future implementations
 0000           ;    of this function.  The same is true for all RAM page pointer registers in
 0000           ;    the Large Memory Model.  When necessary, it is the calling function's
 0000           ;    responsibility to perserve their values across calls to fastcall16 
 0000           ;    functions.
 0000           ;          
 0000           ;    Currently only the page pointer registers listed below are modified: 
 0000           ;          CUR_PP
 0000           ;
 0000           ;    Resets all pins on the I2C master port to the pulldown drive
 0000           ;
 0000           ;  THEORY of OPERATION or PROCEDURE:
 0000           ;
 0000           ;-----------------------------------------------------------------------------
 0000            GYRO_Start:
 0000           _GYRO_Start:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000 62D000          mov reg[CUR_PP], >Port_1_DriveMode_1_SHADE
                   ENDIF
                    ; Set pins to drive mode high Z
 0003 2E0003        or   [Port_1_DriveMode_1_SHADE],GYRO_SDA_pin|GYRO_SCL_pin
 0006 2600FC        and  [Port_1_DriveMode_0_SHADE],~(GYRO_SDA_pin|GYRO_SCL_pin)
 0009           
                IF(GYRO_DriveMode2)            
 0009 2600FC        and  [Port_1_DriveMode_2_SHADE],~(GYRO_SDA_pin|GYRO_SCL_pin)
 000C 5100          mov  A,[Port_1_DriveMode_2_SHADE]
 000E 6007          mov  reg[GYRO_I2CPRTDM2],A
                ENDIF
                
 0010 7110          or    F, FLAG_XIO_MASK
 0012 5100          mov  A,[Port_1_DriveMode_1_SHADE]
 0014 6005          mov  reg[GYRO_I2CPRTDM1],A
 0016 5100          mov  A,[Port_1_DriveMode_0_SHADE]
 0018 6004          mov  reg[GYRO_I2CPRTDM0],A
 001A 70EF          and   F, ~FLAG_XIO_MASK
 001C                                                                ; Set both pins, low so that only the port
 001C                                                                ; mode has to be changed from a 0 to a 1
 001C 2600FC        and  [Port_1_Data_SHADE],~(GYRO_SDA_pin|GYRO_SCL_pin)
 001F 5100          mov  A,[Port_1_Data_SHADE]
 0021 6004          mov  reg[GYRO_I2CPRTDR],A
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0023 7F            ret
 0024           .ENDSECTION
 0024           
 0024           .SECTION
 0024           ;-----------------------------------------------------------------------------
 0024           ;  FUNCTION NAME: GYRO_Stop
 0024           ;
 0024           ;  DESCRIPTION:
 0024           ;    This function performs no operation and is used for future
 0024           ;    module compatibility.
 0024           ;
 0024           ;-----------------------------------------------------------------------------
 0024           ;
 0024           ;  ARGUMENTS: none
 0024           ;
 0024           ;  RETURNS: none
 0024           ;
 0024           ;  SIDE EFFECTS:
 0024           ;    The A and X registers may be modified by this or future implementations
 0024           ;    of this function.  The same is true for all RAM page pointer registers in
 0024           ;    the Large Memory Model.  When necessary, it is the calling function's
 0024           ;    responsibility to perserve their values across calls to fastcall16 
 0024           ;    functions.
 0024           ;          
 0024            GYRO_Stop:
 0024           _GYRO_Stop:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0024 7F            ret
 0025           .ENDSECTION
 0025           
 0025           .SECTION
 0025           ;-----------------------------------------------------------------------------
 0025           ;  FUNCTION NAME: GYRO_fReadBytes
 0025           ;
 0025           ;  DESCRIPTION:
 0025           ;
 0025           ;-----------------------------------------------------------------------------
 0025           ;
 0025           ;  ARGUMENTS:
 0025           ;  [SP-3]=> Address of slave
 0025           ;  [SP-4]=> LSB of Array address to put data in.
 0025           ;  [SP-5]=> MSB of Array address to put data in.
 0025           ;  [SP-6]=> Count of bytes to read.
 0025           ;  [SP-7]=> Mode flags that allow the programmer to set flags
 0025           ;           to determine if:
 0025           ;             0x01 => Use RepeatStart instead of Start
 0025           ;             0x02 => Don't send Stop
 0025           ;
 0025           ;  RETURNS:
 0025           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 0025           ;
 0025           ;  SIDE EFFECTS:
 0025           ;    The A and X registers may be modified by this or future implementations
 0025           ;    of this function.  The same is true for all RAM page pointer registers in
 0025           ;    the Large Memory Model.  When necessary, it is the calling function's
 0025           ;    responsibility to perserve their values across calls to fastcall16 
 0025           ;    functions.
 0025           ;          
 0025           ;    Currently only the page pointer registers listed below are modified: 
 0025           ;          CUR_PP
 0025           ;                  IDX_PP
 0025           ;
 FFFFFFFD           SlaveAdr:     equ  -3
 FFFFFFFC           RxArrayLSB:   equ  -4
 FFFFFFFB           RxArrayMSB:   equ  -5
 FFFFFFFA           RxByteCount:  equ  -6
 FFFFFFF9           RxMode:       equ  -7
 0025           
 0025           _GYRO_fReadBytes:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0025 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0027 62D307          mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 002A 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 002D 4F            mov   X, SP
 002E               
 002E 52FD          mov   A, [X+SlaveAdr]
 0030 64            asl   A                                                ; Shift address to the left to make
 0031                                                                      ; a complete byte with the R/W bit.
 0031 2901          or    A,0x01                                           ; OR the address with the Read bit.
 0033 550000        mov   [GYRO_bStatus],0x00                              ; Clear all flags
 0036 48F901        tst   [x+RxMode],GYRO_RepStart
 0039 B005          jnz   DoRestartRx
 003B 913B          call  I2C_DoStart                                      ; Send a start and address.
 003D 8003          jmp   CheckRxAck
 003F           DoRestartRx:
 003F 9101          call  I2C_DoRepeatStart                                ; Send a repeat start and address.
 0041           CheckRxAck:                                                ; Test to see if Slave ACKed
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0041 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0044 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 0047 A02A          jz    End_RD_Loop
 0049                                                                      ; Send ACK until last byte
 0049 2E0010        or    [GYRO_bStatus],GYRO_SEND_ACK                     ; Send ACK until last byte
 004C           RD_Loop:                                                   ; Loop through bytes
 004C 10            push  x                                                ; Save X for later
 004D 7BFA          dec   [x+RxByteCount]                                  ; Decrement data counter
 004F B004          jnz   I2C_READ
 0051 2600EF        and   [GYRO_bStatus],~GYRO_SEND_ACK                    ; If last Byte, don't ACK
 0054           I2C_READ:
 0054 91F7          call  GYRO_read                                        ; Read a byte
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0056 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0059 20            pop   x                                                ; Restore x
 005A 10            push  x
 005B 52FC          mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
 005D 08            push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                IF SYSTEM_LARGE_MEMORY_MODEL
 005E 52FB          mov   A,[x+RxArrayMSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0060 60D3            mov reg[IDX_PP], A
                   ENDIF
                ENDIF
 0062 20            pop   x                                                ; restores the index pointer pushed a few lines above
 0063 5101          mov   a,[GYRO_bData]                                   ; Save data in data array
 0065 5400          mov   [x],a                                            ; Put read data in array
 0067 20            pop   x                                                ; Restore the original pointer (for the subrtn params)
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0068 62D307          mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
 006B 77FC          inc   [x+RxArrayLSB]                                   ; Advance data pointer
 006D 48FAFF        tst   [x+RxByteCount],FFh                              ; Decrement data counter
 0070 BFDB          jnz   RD_Loop                                          ; Not finished, do another byte.
 0072           End_RD_Loop:                                               ; Endloop
 0072 48F902        tst   [x+RxMode],GYRO_NoStop
 0075 B003          jnz   SkipRxStop
 0077 926F          call  GYRO_SendStop
 0079           SkipRxStop:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0079 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 007C 5000          mov   a,GYRO_XFER_ERROR                                ; Clear return value until we test if slave ACKed
 007E 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed                  ; Test to see if Slave ACKed
 0081 A003          jz    End_ReadBytes
 0083 5001          mov   a,GYRO_XFER_COMPLETE                             ; Return ACKed True
 0085           End_ReadBytes:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0085 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0087 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0089 7F            ret
 008A           .ENDSECTION
 008A           
                IF SYSTEM_SMALL_MEMORY_MODEL
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: GYRO_fReadBytes
                ;
                ;  DESCRIPTION:
                ;
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;      A => Address of slave
                ;      X => Pointer to other arguments.
                ;    [x] => LSB of Array address to put data in.
                ;  [X-1] => MSB of Array address to put data in (ignorned)
                ;  [X-2] => Count of bytes to read.
                ;  [X-3] => Mode flags that allow the programmer to set flags
                ;           to determine if:
                ;             0x01 => Use RepeatStart instead of Start
                ;             0x02 => Don't send Stop
                ;
                ;  RETURNS:
                ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
                ;
                ;  SIDE EFFECTS:
                ;    The A and X registers may be modified by this or future implementations
                ;    of this function.  The same is true for all RAM page pointer registers in
                ;    the Large Memory Model.  When necessary, it is the calling function's
                ;    responsibility to perserve their values across calls to fastcall16 
                ;    functions.
                ;          
                RxArray_X:      equ   0
                RxByteCount_X:  equ  -2
                RxMode_X:       equ  -3
                
                 GYRO_fReadBytes:                                
                    asl   A                                            ; Shift address to the left to make
                                                                       ; a complete byte with the R/W bit.
                    or    A,0x01                                       ; OR the address with the Read bit.
                    mov   [GYRO_bStatus],0x00                              ; Clear all flags
                    tst   [x+RxMode_X],GYRO_RepStart
                    jnz   DoRestartRxSmm
                    call  I2C_DoStart                                      ; Send a start and address.
                    jmp   CheckRxAckSmm
                DoRestartRxSmm:
                    call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                    tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
                    jz    End_RD_LoopSmm
                                                                           ; Send ACK until last byte
                    or    [GYRO_bStatus],GYRO_SEND_ACK                     ; Send ACK until last byte
                RD_LoopSmm:                                                   ; Loop through bytes
                    push  x                                                ; Save X for later
                    dec   [x+RxByteCount_X]                                ; Decrement data counter
                    jnz   I2C_READSmm
                    and   [GYRO_bStatus],~GYRO_SEND_ACK                    ; If last Byte, don't ACK
                I2C_READSmm:
                    call  GYRO_read                                        ; Read a byte
                    pop   x                                                ; Restore x
                    push  x                                                ; Store x
                    mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
                    mov   a,[GYRO_bData]                                   ; Save data in data array
                    mov   [x+RxArray_X],a                                  ; Put read data in array
                    pop   x                                                ; Restore the original pointer
                    inc   [x+RxArray_X]                                    ; Advance data pointer
                    tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
                    jnz   RD_LoopSmm                                       ; Not finished, do another byte.
                End_RD_LoopSmm:                                            ; Endloop
                    tst   [x+RxMode_X],GYRO_NoStop
                    jnz   SkipRxStopSmm
                    call  GYRO_SendStop
                SkipRxStopSmm:
                    mov   a,GYRO_XFER_ERROR                                ; Clear return value until we test if slave ACKed
                    tst   [GYRO_bStatus],GYRO_SLAVE_ACKed                  ; Test to see if Slave ACKed
                    jz    End_ReadBytesSmm
                    mov   a,GYRO_XFER_COMPLETE                             ; Return ACKed True
                End_ReadBytesSmm:
                    ret
                .ENDSECTION
                ENDIF
                
 008A           .SECTION
 008A           ;-----------------------------------------------------------------------------
 008A           ;  FUNCTION NAME: GYRO_bWriteBytes
 008A           ;
 008A           ;  DESCRIPTION:
 008A           ;    Write multiple data bits to slave device.
 008A           ;
 008A           ;-----------------------------------------------------------------------------
 008A           ;
 008A           ;  ARGUMENTS:
 008A           ; [SP-3] => Address of slave
 008A           ; [SP-4] => LSB of Array address to put data in.
 008A           ; [SP-5] => MSB of Array address to put data in.
 008A           ; [SP-6] => Count of bytes to write.
 008A           ; [SP-7] => Mode flags that allow the programmer to set flags
 008A           ;           to determine if:
 008A           ;              0x01 => Use RePeatStart instead of Start
 008A           ;              0x02 => Don't send Stop
 008A           ;
 008A           ;
 008A           ;  RETURNS:
 008A           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 008A           ;
 008A           ;  SIDE EFFECTS:
 008A           ;    The A and X registers may be modified by this or future implementations
 008A           ;    of this function.  The same is true for all RAM page pointer registers in
 008A           ;    the Large Memory Model.  When necessary, it is the calling function's
 008A           ;    responsibility to perserve their values across calls to fastcall16 
 008A           ;    functions.
 008A           ;          
 008A           ;    Currently only the page pointer registers listed below are modified: 
 008A           ;          CUR_PP
 008A           ;                  IDX_PP
 008A           ;
 FFFFFFFD           TxSlaveAdr:   equ  -3
 FFFFFFFC           TxArrayLSB:   equ  -4
 FFFFFFFB           TxArrayMSB:   equ  -5
 FFFFFFFA           TxByteCount:  equ  -6
 FFFFFFF9           TxMode:       equ  -7
 008A           
 008A           _GYRO_bWriteBytes:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 008A 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 008C 62D307          mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 008F 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0092 4F            mov   X, SP
 0093               
 0093 52FD          mov   A,[x+TxSlaveAdr]
 0095 64            asl   A                                           ; Shift address to the left to make
 0096                                                                 ; a complete byte with the R/W bit.
 0096                                                                 ; The ASL takes care of clearing bit 0.
 0096 550000        mov   [GYRO_bStatus],0x00                         ; Clear all flags
 0099           
 0099           
 0099 48F901        tst   [x+TxMode],GYRO_RepStart
 009C B005          jnz   DoRestartTx
 009E 90D8          call  I2C_DoStart                                 ; Send a start and address.
 00A0 8003          jmp   DoTxAck
 00A2           DoRestartTx:
 00A2 909E          call  I2C_DoRepeatStart                           ; Send a repeat start and address.
 00A4           DoTxAck:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00A4 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 00A7 550200        mov   [GYRO_bXferCnt],0x00                        ; Zero out byte count first
 00AA 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed             ; Test to see if Slave ACKed
 00AD A027          jz    End_WR_Loop
 00AF           WR_Loop:                                              ; Loop through bytes
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00AF 62D307          mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
 00B2 10            push  x                                           ; Save X for later
 00B3 52FC          mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
 00B5 08                push  a                                           ; save the address on the stack (will pop it back into X)
                IF SYSTEM_LARGE_MEMORY_MODEL
 00B6 52FB          mov   a,[x+TxArrayMSB]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00B8 60D3            mov reg[IDX_PP], a
                   ENDIF
                ENDIF
 00BA 20            pop   x                                           ; this recovers the address previously stoed on teh stack
 00BB 5200          mov   a,[x]                                       ; Get data pointer to by X
 00BD 5301          mov   [GYRO_bData],a                              ; Save data in temp location
 00BF 90ED          call  GYRO_write                                  ; Write the data
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00C1 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      IF ( SYSTEM_MULTIPAGE_STACK )
                         mov   A, reg[STK_PP]
                         mov   reg[IDX_PP], A
                      ELSE
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00C4 62D307          mov reg[IDX_PP], SYSTEM_STACK_PAGE
                   ENDIF
                      ENDIF
                   ENDIF
 00C7 20            pop   x
 00C8 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 00CB A00E          jz    DoWBstop                                    ; Stop transfer if NAKed
 00CD 7602          inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
 00CF 77FC          inc   [x+TxArrayLSB]                              ; Advance pointer
 00D1 7BFA          dec   [x+TxByteCount]                             ; Decrement byte counter
 00D3 BFDB          jnz   WR_Loop                                     ; Not finished, do another byte.
 00D5           End_WR_Loop:                                          ; Endloop
 00D5 48F902        tst   [x+TxMode],GYRO_NoStop
 00D8 B003          jnz   SkipTxStop
 00DA           DoWBstop:
 00DA 920C          call  GYRO_SendStop
 00DC           SkipTxStop:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00DC 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 00DF 5102          mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
 00E1           End_WriteBytes:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00E1 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 00E3 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00E5 7F            ret
 00E6           .ENDSECTION
 00E6           
 00E6           
                IF SYSTEM_SMALL_MEMORY_MODEL
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: GYRO_bWriteBytes
                ;
                ;  DESCRIPTION:
                ;    Write multiple data bits to slave device.
                ;
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;     A => Address of slave
                ;     X => Pointer to other arguments.
                ;   [x] => LSB of Array address to put data in.
                ; [X-1] => MSB of Array address to put data in (ignorned)
                ; [X-2] => Count of bytes to write.
                ; [X-3] => Mode flags that allow the programmer to set flags
                ;          to determine if:
                ;              0x01 => Use RePeatStart instead of Start
                ;              0x02 => Don't send Stop
                ;
                ;
                ;  RETURNS:
                ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
                ;
                ;  SIDE EFFECTS:
                ;    The A and X registers may be modified by this or future implementations
                ;    of this function.  The same is true for all RAM page pointer registers in
                ;    the Large Memory Model.  When necessary, it is the calling function's
                ;    responsibility to perserve their values across calls to fastcall16 
                ;    functions.
                ;          
                TxArray_X:      equ   0
                TxByteCount_X:  equ  -2
                TxMode_X:       equ  -3
                
                 GYRO_bWriteBytes:                                                     
                    asl   A                                           ; Shift address to the left to make
                                                                      ; a complete byte with the R/W bit.
                                                                      ; The ASL takes care of clearing bit 0.
                    mov   [GYRO_bStatus],0x00                         ; Clear all flags
                
                
                    tst   [x+TxMode_X],GYRO_RepStart
                    jnz   DoRestartTxSmm
                    call  I2C_DoStart                                 ; Send a start and address.
                    jmp   DoTxAckSmm
                DoRestartTxSmm:
                    call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                DoTxAckSmm:
                    mov   [GYRO_bXferCnt],0x00                        ; Zero out byte count first
                    tst   [GYRO_bStatus],GYRO_SLAVE_ACKed             ; Test to see if Slave ACKed
                    jz    End_WR_LoopSmm
                WR_LoopSmm:                                              ; Loop through bytes
                    push  x                                           ; Save X for later
                    mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
                    mov   a,[x]                                       ; Get data pointer to by X
                    mov   [GYRO_bData],a                              ; Save data in temp location
                    call  GYRO_write                                  ; Write the data
                    pop   x
                    tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
                    jz    DoWBstopSmm                                    ; Stop transfer if NAKed
                    inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
                    inc   [x+TxArray_X]                                 ; Advance pointer
                    dec   [x+TxByteCount_X]                             ; Decrement byte counter
                    jnz   WR_LoopSmm                                     ; Not finished, do another byte.
                End_WR_LoopSmm:                                          ; Endloop
                    tst   [x+TxMode_X],GYRO_NoStop
                    jnz   SkipTxStopSmm
                DoWBstopSmm:
                    call  GYRO_SendStop
                SkipTxStopSmm:
                    mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
                End_WriteBytesSmm:
                    ret
                .ENDSECTION
                ENDIF
                
 00E6           .SECTION
 00E6           ;-----------------------------------------------------------------------------
 00E6           ;  FUNCTION NAME: GYRO_bWriteCBytes
 00E6           ;
 00E6           ;  DESCRIPTION:
 00E6           ;    Write multiple data bits to slave device from ROM
 00E6           ;
 00E6           ;-----------------------------------------------------------------------------
 00E6           ;
 00E6           ;  ARGUMENTS:
 00E6           ;   [SP-3] => Address of slave
 00E6           ;   [SP-4] => LSB of ROM Array address to put data in.
 00E6           ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
 00E6           ;   [SP-6] => Count of bytes to write.
 00E6           ;   [SP-7] => Mode flags that allow the programmer to set flags
 00E6           ;            to determine if:
 00E6           ;               0x01 => Use RepeatStart instead of Start
 00E6           ;               0x02 => Don't send Stop
 00E6           ;
 00E6           ;  RETURNS:
 00E6           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 00E6           ;
 00E6           ;  SIDE EFFECTS:
 00E6           ;    The A and X registers may be modified by this or future implementations
 00E6           ;    of this function.  The same is true for all RAM page pointer registers in
 00E6           ;    the Large Memory Model.  When necessary, it is the calling function's
 00E6           ;    responsibility to perserve their values across calls to fastcall16 
 00E6           ;    functions.
 00E6           ;          
 00E6           ;    Currently only the page pointer registers listed below are modified: 
 00E6           ;          CUR_PP
 00E6           ;
 FFFFFFFD           TxCSlaveAdr:   equ  -3
 FFFFFFFC           TxCArrayLSB:   equ  -4
 FFFFFFFB           TxCArrayMSB:   equ  -5
 FFFFFFFA           TxCByteCount:  equ  -6
 FFFFFFF9           TxCMode:       equ  -7
 00E6           
 00E6           _GYRO_bWriteCBytes:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00E6 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 00E9 4F            mov   X, SP
 00EA           
 00EA 52FD          mov   A,[x+TxCSlaveAdr]
 00EC 64            asl   A                                           ; Shift address to the left to make
 00ED                                                                 ; a complete byte with the R/W bit.
 00ED                                                                 ; The ASL takes care of clearing bit 0.
 00ED 550000        mov   [GYRO_bStatus],0x00                         ; Clear all flags
 00F0           
 00F0           
 00F0 48F901        tst   [x+TxCMode],GYRO_RepStart                   ; Check if a Start or RepeatStart
 00F3 B005          jnz   DoCRestartTx                                ; should executed.
 00F5 9081          call  I2C_DoStart                                 ; Send a start and address.
 00F7 8003          jmp   DoCTxAck
 00F9           DoCRestartTx:
 00F9 9047          call  I2C_DoRepeatStart                           ; Send a repeat start and address.
 00FB           
 00FB           DoCTxAck:                                             ; Test to see if Slave is ACKed
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00FB 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 00FE 550200        mov   [GYRO_bXferCnt],0x00            ; Zero out byte count first
 0101 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 0104 A020          jz    End_WRC_Loop
 0106           WRC_Loop:                                             ; Loop through bytes
 0106 10            push  x                                           ; Save X for later
 0107           
 0107 52FB          mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
 0109 59FC          mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
 010B 28            romx                                              ; Put ROM Data in a
 010C 5301          mov   [GYRO_bData],a                              ; Save data in temp location
 010E 909E          call  GYRO_write                                  ; Write the data
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0110 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0113 20            pop   x
 0114 470001        tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
 0117 A012          jz    DoWCBstop                                    ; Stop transfer if NAKed
 0119 7602          inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
 011B 77FC          inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
 011D D003          jnc   DecBCnt
 011F 77FB          inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
 0121           
 0121           DecBCnt:
 0121 7BFA          dec   [x+TxCByteCount]                            ; Decrement byte counter
 0123 BFE2          jnz   WRC_Loop                                    ; Not finished, do another byte.
 0125           End_WRC_Loop:                                         ; Endloop
 0125 48F902        tst   [x+TxCMode],GYRO_NoStop
 0128 B003          jnz   SkipTxCStop
 012A           DoWCBstop:
 012A 91BC          call  GYRO_SendStop
 012C           SkipTxCStop:
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 012C 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 012F 5102          mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
 0131           End_WriteCBytes:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0131 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0133 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0135 7F            ret
 0136           .ENDSECTION
 0136           
                IF SYSTEM_SMALL_MEMORY_MODEL
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: GYRO_bWriteCBytes
                ;
                ;  DESCRIPTION:
                ;    Write multiple data bits to slave device from ROM
                ;
                ;-----------------------------------------------------------------------------
                ;
                ;  ARGUMENTS:
                ;      A => Address of slave
                ;      X => Pointer to other arguments.
                ;     [x] => LSB of ROM Array address to put data in.
                ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                ;   [X-2] => Count of bytes to write.
                ;   [X-3] => Mode flags that allow the programmer to set flags
                ;            to determine if:
                ;               0x01 => Use RepeatStart instead of Start
                ;               0x02 => Don't send Stop
                ;
                ;  RETURNS:
                ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
                ;
                ;  SIDE EFFECTS:
                ;    The A and X registers may be modified by this or future implementations
                ;    of this function.  The same is true for all RAM page pointer registers in
                ;    the Large Memory Model.  When necessary, it is the calling function's
                ;    responsibility to perserve their values across calls to fastcall16 
                ;    functions.
                ;          
                TxCArrayLSB_x:   equ   0
                TxCArrayMSB_x:   equ  -1
                TxCByteCount_x:  equ  -2
                TxCMode_x:       equ  -3
                
                 GYRO_bWriteCBytes:                                             
                    asl   A                                           ; Shift address to the left to make
                                                                      ; a complete byte with the R/W bit.
                                                                      ; The ASL takes care of clearing bit 0.
                    mov   [GYRO_bStatus],0x00                         ; Clear all flags
                
                
                    tst   [x+TxCMode_x],GYRO_RepStart                 ; Check if a Start or RepeatStart
                    jnz   DoCRestartTxSmm                                ; should executed.
                    call  I2C_DoStart                                 ; Send a start and address.
                    jmp   DoCTxAckSmm
                DoCRestartTxSmm:
                    call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                
                DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
                    mov   [GYRO_bXferCnt],0x00            ; Zero out byte count first
                    tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
                    jz    End_WRC_LoopSmm
                WRC_LoopSmm:                                             ; Loop through bytes
                    push  x                                           ; Save X for later
                
                    mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
                    mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
                    romx                                              ; Put ROM Data in a
                    mov   [GYRO_bData],a                              ; Save data in temp location
                    call  GYRO_write                                  ; Write the data
                    pop   x
                    tst   [GYRO_bStatus],GYRO_SLAVE_ACKed
                    jz    DoWCBstopSmm                                ; Stop transfer if NAKed
                    inc   [GYRO_bXferCnt]                             ; Increment transfer byte count
                    inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
                    jnc   DecBCntSmm
                    inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
                
                DecBCntSmm:
                    dec   [x+TxCByteCount_x]                            ; Decrement byte counter
                    jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
                End_WRC_LoopSmm:                                         ; Endloop
                    tst   [x+TxCMode_x],GYRO_NoStop
                    jnz   SkipTxCStopSmm
                DoWCBstopSmm:
                    call  GYRO_SendStop
                SkipTxCStopSmm:
                    mov   a,[GYRO_bXferCnt]                           ; Return bytes transfered
                End_WriteCBytesSmm:
                    ret
                .ENDSECTION
                ENDIF
                
 0136           .SECTION
 0136           ;-----------------------------------------------------------------------------
 0136           ;  FUNCTION NAME: GYRO_fSendRepeatStart
 0136           ;
 0136           ;  DESCRIPTION:
 0136           ;    Send repeated start condition and send slave address.
 0136           ;
 0136           ;-----------------------------------------------------------------------------
 0136           ;
 0136           ;  ARGUMENTS:
 0136           ;    GYRO_bAddr - Contains the slave address and transfer direction.
 0136           ;
 0136           ;  RETURNS:
 0136           ;    GYRO_bSTatus - Cleared if a slave responds to a request. Set otherwise
 0136           ;
 0136           ;  SIDE EFFECTS:
 0136           ;    The A and X registers may be modified by this or future implementations
 0136           ;    of this function.  The same is true for all RAM page pointer registers in
 0136           ;    the Large Memory Model.  When necessary, it is the calling function's
 0136           ;    responsibility to perserve their values across calls to fastcall16 
 0136           ;    functions.
 0136           ;          
 0136           ;    Currently only the page pointer registers listed below are modified: 
 0136           ;          CUR_PP
 0136           ;
 0136           ;  THEORY of OPERATION or PROCEDURE:
 0136           ;    Prepare to send start by setting SCl and SDA high.
 0136           ;    must be followed directly by GYRO_start.
 0136           ;
 0136            GYRO_fSendRepeatStart:
 0136           _GYRO_fSendRepeatStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0136 64            asl   a                                                ; Shift address to the left
 0137 79            dec   x                                                ; If zero, C flag will be set
 0138 D004          jnc   .setRead                                ; Do a write if zero
 013A 9006          call  I2C_DoRepeatStart
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 013C 7F            ret
 013D           .setRead:
 013D 2901          or    a,0x01                                           ; Set Read flag
 013F 9001          call  I2C_DoRepeatStart
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0141 7F            ret  
 0142           
 0142           I2C_DoRepeatStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0142 62D000          mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 0145 08            push  a
 0146 7110          or    F, FLAG_XIO_MASK
 0148 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin          ; Assert SCL low
 014B 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin         ; Release SDA high
 014E 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0150 6004          mov   reg[GYRO_I2CPRTDM0],A
 0152           
 0152                                                                      ; Delay 3/4 period
 0152 500C          mov   A,GYRO_delay3qtr
 0154 91C4          call  GYRO_delay
 0156                                                                      ; Release SCL high
 0156 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 0159 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 015B 6004          mov   reg[GYRO_I2CPRTDM0],A
 015D           
 015D 70EF          and   F, ~FLAG_XIO_MASK
 015F           clockstretch1:                                             ; Wait for SCL high in case of wait
 015F                                                                      ; states adde by slave
 015F 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 0162 AFFC          jz    clockstretch1
 0164           
 0164 500C          mov   A,GYRO_delay3qtr                                 ; Delay 1/2 period
 0166 91B2          call  GYRO_delay
 0168 18            pop   a
 0169 900D          call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 016B 7F            ret
 016C           .ENDSECTION
 016C           
 016C           .SECTION
 016C           ;-----------------------------------------------------------------------------
 016C           ;  FUNCTION NAME: GYRO_fSendStart
 016C           ;
 016C           ;  DESCRIPTION:
 016C           ;    Generates start condition and sends slave address.
 016C           ;
 016C           ;-----------------------------------------------------------------------------
 016C           ;
 016C           ;  ARGUMENTS:
 016C           ;    A => Contains the slave address.
 016C           ;
 016C           ;  RETURNS:
 016C           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 016C           ;
 016C           ;  SIDE EFFECTS:
 016C           ;    The A and X registers may be modified by this or future implementations
 016C           ;    of this function.  The same is true for all RAM page pointer registers in
 016C           ;    the Large Memory Model.  When necessary, it is the calling function's
 016C           ;    responsibility to perserve their values across calls to fastcall16 
 016C           ;    functions.
 016C           ;          
 016C           ;    Currently only the page pointer registers listed below are modified: 
 016C           ;          CUR_PP
 016C           ;
 016C           ;  THEORY of OPERATION or PROCEDURE:
 016C           ;   Send start by setting SDA low while SCL is high. Set
 016C           ;   SCL low in preparation to send address. Must be followed
 016C           ;   by GYRO_write.
 016C           ;
 016C            GYRO_fSendStart:
 016C           _GYRO_fSendStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 016C 64            asl   a                                                     ; Shift address to the left
 016D 79            dec   x                                                     ; If zero, C flag will be set
 016E D004          jnc   .SetRead
 0170 9006          call  I2C_DoStart                                           ; Do a write if zero
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0172 7F            ret
 0173           .SetRead:
 0173 2901          or    a,0x01                                                ; Set Read flag
 0175 9001          call  I2C_DoStart                                           ; Do a write if zero
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0177 7F            ret
 0178           
 0178           I2C_DoStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0178 62D000          mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 017B 7110          or    F, FLAG_XIO_MASK
 017D 08            push  A                                                     ; Save the slave address
 017E 2E0002        or    [Port_1_DriveMode_0_SHADE],GYRO_SDA_pin               ; Assert SDA low
 0181 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0183 6004          mov   reg[GYRO_I2CPRTDM0],A
 0185           
 0185 5005          mov   A,GYRO_delayhalf                                      ; Delay 1/2 period
 0187 9191          call  GYRO_delay
 0189 18            pop   A                                                     ; Restore slave address to A
 018A 70EF          and   F, ~FLAG_XIO_MASK
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 018C 62D001          mov reg[CUR_PP], >GYRO_bData
                   ENDIF
 018F 5301          mov   [GYRO_bData],A
 0191           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0191 62D000          mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 0194 7110          or    F, FLAG_XIO_MASK
 0196 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin               ; Set SCL low
 0199 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 019B 6004          mov   reg[GYRO_I2CPRTDM0],A
 019D 70EF          and   F, ~FLAG_XIO_MASK
 019F           
 019F 5002          mov   A,GYRO_delayqtr                                       ; Delay 1/4 period
 01A1 9177          call  GYRO_delay
 01A3 9009          call   GYRO_write                                           ; Write the byte.
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01A5 7F            ret
 01A6           .ENDSECTION
 01A6           
 01A6           .SECTION
 01A6           ;-----------------------------------------------------------------------------
 01A6           ;  FUNCTION NAME: GYRO_fWrite
 01A6           ;
 01A6           ;  DESCRIPTION:
 01A6           ;    Writes a byte to the I2C master bus.
 01A6           ;
 01A6           ;-----------------------------------------------------------------------------
 01A6           ;
 01A6           ;  ARGUMENTS:
 01A6           ;    A contains Data to be written to I2C slave.
 01A6           ;
 01A6           ;  RETURNS:
 01A6           ;    1 If ACKed, else 0
 01A6           ;
 01A6           ;  SIDE EFFECTS:
 01A6           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01A6           ;
 01A6           ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 01A6           ;
 01A6           ;  FUNCTION NAME: GYRO_write
 01A6           ;
 01A6           ;  DESCRIPTION:
 01A6           ;    Writes a byte to the I2C master bus. Also used for sending the address.
 01A6           ;
 01A6           ;  ARGUMENTS:
 01A6           ;    Reg A contains slave address.
 01A6           ;    GYRO_bData - Contains data to be transmitted.
 01A6           ;
 01A6           ;  RETURNS:
 01A6           ;    GYRO_bStatus - Cleared if a slave responds to a request. Set otherwise
 01A6           ;
 01A6           ;  SIDE EFFECTS:
 01A6           ;    The A and X registers may be modified by this or future implementations
 01A6           ;    of this function.  The same is true for all RAM page pointer registers in
 01A6           ;    the Large Memory Model.  When necessary, it is the calling function's
 01A6           ;    responsibility to perserve their values across calls to fastcall16 
 01A6           ;    functions.
 01A6           ;          
 01A6           ;    Currently only the page pointer registers listed below are modified: 
 01A6           ;          CUR_PP
 01A6           ;
 01A6           ;    Send data byte to slave. Must be followed by GYRO_get_ack.
 01A6           ;
 01A6           GYRO_fWrite:
 01A6           _GYRO_fWrite:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01A6 62D001          mov reg[CUR_PP], >GYRO_bData
                   ENDIF
 01A9 5301          mov   [GYRO_bData],A                                   ; Put data in bData
 01AB 9001          call  GYRO_write
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01AD 7F            ret
 01AE           
 01AE           GYRO_write:
 01AE           _GYRO_write:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01AE 62D003          mov reg[CUR_PP], >GYRO_bit_count
                   ENDIF
                    
 01B1 550308        mov   [GYRO_bit_count],8                                ; Set up count to xmit 8 bits
 01B4           writenextbit:
 01B4 7A03          dec   [GYRO_bit_count]
 01B6           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01B6 62D000          mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
                                                                           ; Assert SCL low
 01B9 7110          or    F, FLAG_XIO_MASK
 01BB 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
 01BE 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 01C0 6004          mov   reg[GYRO_I2CPRTDM0],A
 01C2 70EF          and   F, ~FLAG_XIO_MASK
 01C4           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01C4 62D003          mov reg[CUR_PP], >GYRO_bit_count
                   ENDIF
 01C7 6B01          rlc   [GYRO_bData]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01C9 62D000          mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 01CC 7110          or    F, FLAG_XIO_MASK
 01CE C00A          jc    write_bit                                        ; Assert SDA low for data 0    
 01D0 2E0002        or    [Port_1_DriveMode_0_SHADE],GYRO_SDA_pin
 01D3 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 01D5 6004          mov   reg[GYRO_I2CPRTDM0],A
 01D7           
 01D7 8008          jmp   writestartclock
 01D9           write_bit:                                                 ; Release SDA high for data 1
 01D9 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin      
 01DC 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 01DE 6004          mov   reg[GYRO_I2CPRTDM0],A
 01E0           
 01E0           writestartclock:
 01E0 5005          mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
 01E2 9136          call  GYRO_delay
 01E4                                                                      ; Release SCL High
 01E4 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 01E7 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 01E9 6004          mov   reg[GYRO_I2CPRTDM0],A
 01EB           
 01EB 70EF          and   F, ~FLAG_XIO_MASK
 01ED           clockstretch2:                                             ; Wait for SCL high in case of wait states
 01ED                                                                      ; are added by slave.
 01ED 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 01F0 AFFC          jz    clockstretch2
 01F2                                                                      ; Delay for 1/2 period
 01F2 5005          mov   A,GYRO_delayhalf
 01F4 9124          call  GYRO_delay
 01F6           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01F6 62D003          mov reg[CUR_PP], >GYRO_bit_count
                   ENDIF
 01F9 3C0300        cmp   [GYRO_bit_count],0
 01FC BFB7          jnz   writenextbit
 01FE 9001          call  GYRO_get_ack                
 0200           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0200 7F            ret
 0201           .ENDSECTION
 0201           
 0201           .SECTION
 0201           ;-----------------------------------------------------------------------------
 0201           ;  FUNCTION NAME: GYRO_get_ack
 0201           ;
 0201           ;  DESCRIPTION:
 0201           ;    Get slave acknowledge response. Used only by GYRO_write.
 0201           ;
 0201           ;-----------------------------------------------------------------------------
 0201           ;
 0201           ;  ARGUMENTS:
 0201           ;    GYRO_bData - Contains data to be transmitted.
 0201           ;
 0201           ;  RETURNS:
 0201           ;    Sets flag in GYRO_bStatus if ACKed by Slave.
 0201           ;
 0201           ;  SIDE EFFECTS:
 0201           ;    The A and X registers may be modified by this or future implementations
 0201           ;    of this function.  The same is true for all RAM page pointer registers in
 0201           ;    the Large Memory Model.  When necessary, it is the calling function's
 0201           ;    responsibility to perserve their values across calls to fastcall16 
 0201           ;    functions.
 0201           ;          
 0201           ;    Currently only the page pointer registers listed below are modified: 
 0201           ;          CUR_PP
 0201           ;
 0201           GYRO_get_ack:
 0201           _GYRO_get_ack:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0201 62D000          mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 0204 7110          or    F, FLAG_XIO_MASK
 0206 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
 0209 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 020B 6004          mov   reg[GYRO_I2CPRTDM0],A
 020D                                                                      ; Release SDA high so slave may ACK
 020D 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin
 0210 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0212 6004          mov   reg[GYRO_I2CPRTDM0],A
 0214                                                                      ; Delay 3/4 period
 0214 500C          mov   A,GYRO_delay3qtr
 0216 9102          call  GYRO_delay
 0218                                                                      ; Release SCL high
 0218 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 021B 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 021D 6004          mov   reg[GYRO_I2CPRTDM0],A
 021F           
 021F 70EF          and   F, ~FLAG_XIO_MASK
 0221           clockstretch3:                                             ; Wait for SCL to go high in case wait states
 0221                                                                      ; are added my slave.
 0221 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 0224 AFFC          jz    clockstretch3
 0226               
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0226 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
                                                                       ; Clear ACK bit
 0229 2600FE        and   [GYRO_bStatus],~GYRO_SLAVE_ACKed
 022C 490402        tst   reg[GYRO_I2CPRTDR],GYRO_SDA_pin
 022F B004          jnz    getack2                                         ; If ACKed, set flag
 0231 2E0001        or    [GYRO_bStatus],GYRO_SLAVE_ACKed
 0234           
 0234           getack2:
 0234 5005          mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
 0236 90E2          call  GYRO_delay
 0238           
 0238 5100          mov   A,[GYRO_bStatus]                                 ; Get result and put it in A
 023A 2101          and   A,GYRO_SLAVE_ACKed                               ; Mask off just the ACK flag.
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 023C 7F            ret
 023D           .ENDSECTION
 023D           
 023D           .SECTION
 023D           ;-----------------------------------------------------------------------------
 023D           ;  FUNCTION NAME: GYRO_bRead
 023D           ;
 023D           ;  DESCRIPTION:
 023D           ;    Reads 1 data byte from the I2C master bus.
 023D           ;
 023D           ;-----------------------------------------------------------------------------
 023D           ;
 023D           ;  ARGUMENTS:
 023D           ;    Reg A Contains the Slave Address.
 023D           ;    GYRO_bStatus - Set for no ack to be followed by stop.
 023D           ;    Clear for ack to indicate more data to follow.
 023D           ;
 023D           ;  RETURNS:
 023D           ;    GYRO_bData - Contains received data.
 023D           ;
 023D           ;  SIDE EFFECTS:
 023D           ;    The A and X registers may be modified by this or future implementations
 023D           ;    of this function.  The same is true for all RAM page pointer registers in
 023D           ;    the Large Memory Model.  When necessary, it is the calling function's
 023D           ;    responsibility to perserve their values across calls to fastcall16 
 023D           ;    functions.
 023D           ;          
 023D           ;    Currently only the page pointer registers listed below are modified: 
 023D           ;          CUR_PP
 023D           ;
 023D           ;    Must be followed by GYRO_put_ack.
 023D           ;
 023D           GYRO_bRead:
 023D           _GYRO_bRead:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 023D 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0240 550000        mov   [GYRO_bStatus],0x00                              ; Clear ACK flag
 0243 21FF          and   A,0xFF                                           ; Is Ack flag set"
 0245 A007          jz    GYRO_read                                        ; Don't ACK
 0247 2E0010        or    [GYRO_bStatus],GYRO_SEND_ACK                     ; Set ACK flag
 024A 9001          call  GYRO_read
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 024C 7F            ret
 024D           
 024D           GYRO_read:
 024D           _GYRO_read:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 024D 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0250 550308        mov   [GYRO_bit_count],8                               ; Count and prepare bits to read
 0253           readnextbit:
 0253 7A03          dec   [GYRO_bit_count]
 0255 6B01          rlc   [GYRO_bData]
 0257               
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0257 62D000          mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 025A 7110          or    F, FLAG_XIO_MASK
 025C 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
 025F 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0261 6004          mov   reg[GYRO_I2CPRTDM0],A
 0263                                                                      ; Delay 1/2 period
 0263 5005          mov   A,GYRO_delayhalf
 0265 90B3          call  GYRO_delay
 0267                                                                      ; Release SCL high
 0267 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 026A 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 026C 6004          mov   reg[GYRO_I2CPRTDM0],A
 026E           
 026E 70EF          and   F, ~FLAG_XIO_MASK
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0270 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 0273           clockstretch4:                                             ; Wait for SCL to go high in case slave
 0273                                                                      ; addes wait states.
 0273           
 0273 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 0276 AFFC          jz    clockstretch4
 0278                                                                      ; Delay 1/4 period
 0278 5002          mov   A,GYRO_delayqtr
 027A 909E          call  GYRO_delay
 027C           
 027C 2601FE        and   [GYRO_bData],~01h                                ; Record bit received
 027F 490402        tst   reg[GYRO_I2CPRTDR],GYRO_SDA_pin
 0282 A004          jz    readnobit
 0284 2E0101        or    [GYRO_bData],01h
 0287           readnobit:
 0287 3C0300        cmp   [GYRO_bit_count],0
 028A BFC8          jnz   readnextbit                                      ; Check for byte complete
 028C           
 028C 9001          call   GYRO_put_ack                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 028E 7F            ret
 028F           .ENDSECTION
 028F                                                                    
 028F           .SECTION
 028F           ;-----------------------------------------------------------------------------
 028F           ;  FUNCTION NAME: GYRO_put_ack
 028F           ;
 028F           ;  DESCRIPTION:
 028F           ;    Send acknowledge to slave. Used only by GYRO_read
 028F           ;
 028F           ;-----------------------------------------------------------------------------
 028F           ;
 028F           ;  ARGUMENTS:
 028F           ;    GYRO_bStatus - Set for no ack to be followed by stop. Clear for ack
 028F           ;    to indicate more data to follow.
 028F           ;
 028F           ;  RETURNS:
 028F           ;    GYRO_bData - Contains received data.
 028F           ;
 028F           ;  SIDE EFFECTS:
 028F           ;    The A and X registers may be modified by this or future implementations
 028F           ;    of this function.  The same is true for all RAM page pointer registers in
 028F           ;    the Large Memory Model.  When necessary, it is the calling function's
 028F           ;    responsibility to perserve their values across calls to fastcall16 
 028F           ;    functions.
 028F           ;          
 028F           ;    Currently only the page pointer registers listed below are modified: 
 028F           ;          CUR_PP
 028F           ;
 028F           ;    Send ack if more data will follow.
 028F           ;
 028F           GYRO_put_ack:
 028F           _GYRO_put_ack:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 028F 62D000          mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 0292 7110          or    F, FLAG_XIO_MASK
 0294 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
 0297 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0299 6004          mov   reg[GYRO_I2CPRTDM0],A
 029B 70EF          and   F, ~FLAG_XIO_MASK
 029D           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 029D 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
                                                                       ; Check if ack is to be transmitted
 02A0 470010        tst   [GYRO_bStatus],GYRO_SEND_ACK
 02A3           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 02A3 62D000          mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 02A6 7110          or    F, FLAG_XIO_MASK
 02A8           
 02A8 A00A          jz    noputack
 02AA                                                                      ; Assert SDA low
 02AA 2E0002        or    [Port_1_DriveMode_0_SHADE],GYRO_SDA_pin
 02AD 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02AF 6004          mov   reg[GYRO_I2CPRTDM0],A
 02B1           
 02B1 8008          jmp   putack1
 02B3           noputack:                                                  ; Release SDA high
 02B3 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin
 02B6 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02B8 6004          mov   reg[GYRO_I2CPRTDM0],A
 02BA           
 02BA           putack1:
 02BA 5002          mov   A,GYRO_delayqtr                                  ; Delay 1/4 period
 02BC 905C          call  GYRO_delay
 02BE                                                                      ; Release SCL high
 02BE 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 02C1 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02C3 6004          mov   reg[GYRO_I2CPRTDM0],A
 02C5           
 02C5 70EF          and   F, ~FLAG_XIO_MASK
 02C7           clockstretch5:                                             ; Wait for SCL high in case slave
 02C7                                                                      ; adds wait states.
 02C7 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 02CA AFFC          jz    clockstretch5
 02CC                                                                      ; delay for the high half of the clock.
 02CC 5005          mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
 02CE 904A          call  GYRO_delay
 02D0           
 02D0 7110          or    F, FLAG_XIO_MASK
 02D2 2E0001        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin
 02D5 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02D7 6004          mov   reg[GYRO_I2CPRTDM0],A
 02D9                                                                      ; If there is another read pending
 02D9                                                                      ; must release SDA for slave
 02D9 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin         ; Release SDA high
 02DC 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02DE 6004          mov   reg[GYRO_I2CPRTDM0],A
 02E0 70EF          and   F, ~FLAG_XIO_MASK
 02E2           
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 02E2 62D000          mov reg[CUR_PP], >GYRO_bStatus
                   ENDIF
 02E5 5101          mov   A, [GYRO_bData]
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 02E7 7F            ret
 02E8           .ENDSECTION
 02E8           
 02E8           .SECTION
 02E8           ;-----------------------------------------------------------------------------
 02E8           ;  FUNCTION NAME: GYRO_SendStop
 02E8           ;
 02E8           ;  DESCRIPTION:
 02E8           ;    Assert stop condition.
 02E8           ;
 02E8           ;-----------------------------------------------------------------------------
 02E8           ;
 02E8           ;  ARGUMENTS: none
 02E8           ;
 02E8           ;  RETURNS: none
 02E8           ;
 02E8           ;  SIDE EFFECTS:
 02E8           ;    The A and X registers may be modified by this or future implementations
 02E8           ;    of this function.  The same is true for all RAM page pointer registers in
 02E8           ;    the Large Memory Model.  When necessary, it is the calling function's
 02E8           ;    responsibility to perserve their values across calls to fastcall16 
 02E8           ;    functions.
 02E8           ;          
 02E8           ;    Currently only the page pointer registers listed below are modified: 
 02E8           ;          CUR_PP
 02E8           ;
 02E8           ;  THEORY of OPERATION or PROCEDURE:
 02E8           ;     Send stop by releasing SDA high while SCL high.ASA21CR1
 02E8           ;
 02E8            GYRO_SendStop:
 02E8           _GYRO_SendStop:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 02E8 62D000          mov reg[CUR_PP], >Port_1_DriveMode_0_SHADE
                   ENDIF
 02EB 7110          or    F, FLAG_XIO_MASK
 02ED 2E0003        or    [Port_1_DriveMode_0_SHADE],GYRO_SCL_pin|GYRO_SDA_pin
 02F0 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02F2 6004          mov   reg[GYRO_I2CPRTDM0],A
 02F4           
 02F4 500C          mov   A,GYRO_delay3qtr                                 ; Delay 3/4 period
 02F6 9022          call  GYRO_delay
 02F8                                                                      ; Release SCL high
 02F8 2600FE        and   [Port_1_DriveMode_0_SHADE],~GYRO_SCL_pin
 02FB 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 02FD 6004          mov   reg[GYRO_I2CPRTDM0],A
 02FF           
 02FF 70EF          and   F, ~FLAG_XIO_MASK
 0301           clockstretch6:                                             ; Wait for SCL to go high in case slave
 0301                                                                      ; has added wait states.
 0301 490401        tst   reg[GYRO_I2CPRTDR],GYRO_SCL_pin
 0304 AFFC          jz    clockstretch6
 0306 7110          or    F, FLAG_XIO_MASK
 0308           
 0308 500C          mov   A,GYRO_delay3qtr                                 ; Delay 3/4 period
 030A 900E          call  GYRO_delay
 030C           
 030C                                                                      ; Release SDA high
 030C 2600FD        and   [Port_1_DriveMode_0_SHADE],~GYRO_SDA_pin
 030F 5100          mov   A,[Port_1_DriveMode_0_SHADE]
 0311 6004          mov   reg[GYRO_I2CPRTDM0],A
 0313           
 0313 5005          mov   A,GYRO_delayhalf                                 ; Delay 1/2 period
 0315 9003          call  GYRO_delay
 0317 70EF          and   F, ~FLAG_XIO_MASK
 0319               
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0319 7F            ret
 031A           .ENDSECTION
 031A           
 031A           .SECTION
 031A           ;-----------------------------------------------------------------------------
 031A           ;  FUNCTION NAME: GYRO_delay
 031A           ;
 031A           ;  DESCRIPTION:
 031A           ;    Create delays for GYRO routines.
 031A           ;
 031A           ;-----------------------------------------------------------------------------
 031A           ;
 031A           ;  ARGUMENTS: none
 031A           ;
 031A           ;  RETURNS: none
 031A           ;
 031A           ;  SIDE EFFECTS:
 031A           ;    The A and X registers may be modified by this or future implementations
 031A           ;    of this function.  The same is true for all RAM page pointer registers in
 031A           ;    the Large Memory Model.  When necessary, it is the calling function's
 031A           ;    responsibility to perserve their values across calls to fastcall16 
 031A           ;    functions.
 031A           ;          
 031A           GYRO_delay:                                      ; 11 cycles for call. 32 total.
 031A           GYROdelay1:                                      ; Delay 1/4 period at 100 kHz
 031A 78             dec  A                                      ; 4 cycles
 031B BFFE           jnz  GYROdelay1                             ; 5 cycles for jump, 4 no jump.     
 031D 7F             ret                                         ; 8 cycles
 031E             
 031E           .ENDSECTION
 031E           
 031E           
 031E           
 031E           ; End of File GYRO.asm
 031E           
 031E           
